
White_Line_Following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800200  00006740  000067d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800316  00800316  000068ea  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000068ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005dd  00000000  00000000  0000690a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bdf  00000000  00000000  00006ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000255  00000000  00000000  00008ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029ea  00000000  00000000  00008d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  0000b708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c1  00000000  00000000  0000bb88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_5>
      18:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e4       	ldi	r30, 0x40	; 64
      fc:	f7 e6       	ldi	r31, 0x67	; 103
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 31       	cpi	r26, 0x16	; 22
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	15 e0       	ldi	r17, 0x05	; 5
     110:	a6 e1       	ldi	r26, 0x16	; 22
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 33       	cpi	r26, 0x3A	; 58
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <main>
     122:	0c 94 9e 33 	jmp	0x673c	; 0x673c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 33 03 	sts	0x0333, r25
    12ec:	80 93 32 03 	sts	0x0332, r24
		lcd_wr_char(million);
    12f0:	80 91 32 03 	lds	r24, 0x0332
    12f4:	90 91 33 03 	lds	r25, 0x0333
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 35 03 	sts	0x0335, r25
    1324:	80 93 34 03 	sts	0x0334, r24
		thousand = temp%10 + 48;
    1328:	80 91 34 03 	lds	r24, 0x0334
    132c:	90 91 35 03 	lds	r25, 0x0335
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 35 05 	sts	0x0535, r25
    1340:	80 93 34 05 	sts	0x0534, r24
		lcd_wr_char(thousand);
    1344:	80 91 34 05 	lds	r24, 0x0534
    1348:	90 91 35 05 	lds	r25, 0x0535
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 35 03 	sts	0x0335, r25
    1378:	80 93 34 03 	sts	0x0334, r24
		hundred = temp%10 + 48;
    137c:	80 91 34 03 	lds	r24, 0x0334
    1380:	90 91 35 03 	lds	r25, 0x0335
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 6f 03 	sts	0x036F, r25
    1394:	80 93 6e 03 	sts	0x036E, r24
		lcd_wr_char(hundred);
    1398:	80 91 6e 03 	lds	r24, 0x036E
    139c:	90 91 6f 03 	lds	r25, 0x036F
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 35 03 	sts	0x0335, r25
    13cc:	80 93 34 03 	sts	0x0334, r24
		tens = temp%10 + 48;
    13d0:	80 91 34 03 	lds	r24, 0x0334
    13d4:	90 91 35 03 	lds	r25, 0x0335
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 3a 03 	sts	0x033A, r25
    13e8:	80 93 39 03 	sts	0x0339, r24
		lcd_wr_char(tens);
    13ec:	80 91 39 03 	lds	r24, 0x0339
    13f0:	90 91 3a 03 	lds	r25, 0x033A
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 40 33 	call	0x6680	; 0x6680 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 33 05 	sts	0x0533, r25
    1420:	80 93 32 05 	sts	0x0532, r24
		lcd_wr_char(unit);
    1424:	80 91 32 05 	lds	r24, 0x0532
    1428:	90 91 33 05 	lds	r25, 0x0533
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <servo1_pin_config>:
int z=0,count=0;
int f=1,b=0,r=0,l=0,a=4,p=0;
char mapping[20][20];

void servo1_pin_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    145a:	a4 e2       	ldi	r26, 0x24	; 36
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e2       	ldi	r30, 0x24	; 36
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 62       	ori	r24, 0x20	; 32
    1466:	8c 93       	st	X, r24
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1468:	a5 e2       	ldi	r26, 0x25	; 37
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e2       	ldi	r30, 0x25	; 37
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1484:	a4 e2       	ldi	r26, 0x24	; 36
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e4 e2       	ldi	r30, 0x24	; 36
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 64       	ori	r24, 0x40	; 64
    1490:	8c 93       	st	X, r24
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1492:	a5 e2       	ldi	r26, 0x25	; 37
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e2       	ldi	r30, 0x25	; 37
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 64       	ori	r24, 0x40	; 64
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    14ae:	a7 e2       	ldi	r26, 0x27	; 39
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e2       	ldi	r30, 0x27	; 39
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	88 60       	ori	r24, 0x08	; 8
    14ba:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    14bc:	a8 e2       	ldi	r26, 0x28	; 40
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e2       	ldi	r30, 0x28	; 40
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	87 7f       	andi	r24, 0xF7	; 247
    14c8:	8c 93       	st	X, r24
}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <interrupt_switch_config>:

//Function to initialize ports
void interrupt_switch_config (void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
    14d8:	ad e2       	ldi	r26, 0x2D	; 45
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ed e2       	ldi	r30, 0x2D	; 45
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 77       	andi	r24, 0x7F	; 127
    14e4:	8c 93       	st	X, r24
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
    14e6:	ae e2       	ldi	r26, 0x2E	; 46
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ee e2       	ldi	r30, 0x2E	; 46
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 68       	ori	r24, 0x80	; 128
    14f2:	8c 93       	st	X, r24
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <buzzer_on>:


void buzzer_on (void)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1504:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1506:	e6 e2       	ldi	r30, 0x26	; 38
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1514:	e8 e2       	ldi	r30, 0x28	; 40
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	80 83       	st	Z, r24
}
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <buzzer_off>:


void buzzer_off (void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
    152e:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
    1530:	e6 e2       	ldi	r30, 0x26	; 38
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	87 7f       	andi	r24, 0xF7	; 247
    153c:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
    153e:	e8 e2       	ldi	r30, 0x28	; 40
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	80 83       	st	Z, r24
}
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
    1556:	e1 ed       	ldi	r30, 0xD1	; 209
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    155c:	e0 ed       	ldi	r30, 0xD0	; 208
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	10 82       	st	Z, r1
 UCSR2C = 0x06;
    1562:	e2 ed       	ldi	r30, 0xD2	; 210
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	86 e0       	ldi	r24, 0x06	; 6
    1568:	80 83       	st	Z, r24
 UBRR2L = 0x5F; //set baud rate lo
    156a:	e4 ed       	ldi	r30, 0xD4	; 212
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8f e5       	ldi	r24, 0x5F	; 95
    1570:	80 83       	st	Z, r24
 UBRR2H = 0x00; //set baud rate hi
    1572:	e5 ed       	ldi	r30, 0xD5	; 213
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	10 82       	st	Z, r1
 UCSR2B = 0x98;
    1578:	e1 ed       	ldi	r30, 0xD1	; 209
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	88 e9       	ldi	r24, 0x98	; 152
    157e:	80 83       	st	Z, r24
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	00 90 5b 00 	lds	r0, 0x005B
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable 
    15a8:	e6 ed       	ldi	r30, 0xD6	; 214
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 93 3b 03 	sts	0x033B, r24

	UDR2 = data; 				//echo data back to PC
    15b2:	e6 ed       	ldi	r30, 0xD6	; 214
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 91 3b 03 	lds	r24, 0x033B
    15ba:	80 83       	st	Z, r24
    
	if(data)
    15bc:	80 91 3b 03 	lds	r24, 0x033B
    15c0:	88 23       	and	r24, r24
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <__vector_51+0x5c>
		serial_ip[z++]=data;
    15c4:	80 91 22 03 	lds	r24, 0x0322
    15c8:	90 91 23 03 	lds	r25, 0x0323
    15cc:	20 91 3b 03 	lds	r18, 0x033B
    15d0:	fc 01       	movw	r30, r24
    15d2:	e4 5c       	subi	r30, 0xC4	; 196
    15d4:	fc 4f       	sbci	r31, 0xFC	; 252
    15d6:	20 83       	st	Z, r18
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	90 93 23 03 	sts	0x0323, r25
    15de:	80 93 22 03 	sts	0x0322, r24
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	00 92 5b 00 	sts	0x005B, r0
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <motion_pin_config>:



//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1608:	a1 e2       	ldi	r26, 0x21	; 33
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e1 e2       	ldi	r30, 0x21	; 33
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 60       	ori	r24, 0x0F	; 15
    1614:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1616:	a2 e2       	ldi	r26, 0x22	; 34
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e2 e2       	ldi	r30, 0x22	; 34
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 7f       	andi	r24, 0xF0	; 240
    1622:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1624:	aa e0       	ldi	r26, 0x0A	; 10
    1626:	b1 e0       	ldi	r27, 0x01	; 1
    1628:	ea e0       	ldi	r30, 0x0A	; 10
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	80 81       	ld	r24, Z
    162e:	88 61       	ori	r24, 0x18	; 24
    1630:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1632:	ab e0       	ldi	r26, 0x0B	; 11
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	eb e0       	ldi	r30, 0x0B	; 11
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	80 81       	ld	r24, Z
    163c:	88 61       	ori	r24, 0x18	; 24
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    164e:	ad e2       	ldi	r26, 0x2D	; 45
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ed e2       	ldi	r30, 0x2D	; 45
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8f 7e       	andi	r24, 0xEF	; 239
    165a:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    165c:	ae e2       	ldi	r26, 0x2E	; 46
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ee e2       	ldi	r30, 0x2E	; 46
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 61       	ori	r24, 0x10	; 16
    1668:	8c 93       	st	X, r24
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1678:	ad e2       	ldi	r26, 0x2D	; 45
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ed e2       	ldi	r30, 0x2D	; 45
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1686:	ae e2       	ldi	r26, 0x2E	; 46
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ee e2       	ldi	r30, 0x2E	; 46
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	8c 93       	st	X, r24
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <port_init>:

//Function to initialize ports
void port_init()
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
    16a2:	0e 94 00 0b 	call	0x1600	; 0x1600 <motion_pin_config>
 left_encoder_pin_config(); //left encoder pin config
    16a6:	0e 94 23 0b 	call	0x1646	; 0x1646 <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
    16aa:	0e 94 38 0b 	call	0x1670	; 0x1670 <right_encoder_pin_config>
 lcd_port_config();
    16ae:	0e 94 a0 0c 	call	0x1940	; 0x1940 <lcd_port_config>
 adc_pin_config();
    16b2:	0e 94 b5 0c 	call	0x196a	; 0x196a <adc_pin_config>
 buzzer_pin_config();
    16b6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <buzzer_pin_config>
 interrupt_switch_config();
    16ba:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <interrupt_switch_config>
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    16be:	0e 94 29 0a 	call	0x1452	; 0x1452 <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    16c2:	0e 94 3e 0a 	call	0x147c	; 0x147c <servo2_pin_config>
}
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <timer1_init>:

void timer1_init(void)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    16d4:	e1 e8       	ldi	r30, 0x81	; 129
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    16da:	e5 e8       	ldi	r30, 0x85	; 133
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8c ef       	ldi	r24, 0xFC	; 252
    16e0:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    16e2:	e4 e8       	ldi	r30, 0x84	; 132
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    16ea:	e9 e8       	ldi	r30, 0x89	; 137
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    16f2:	e8 e8       	ldi	r30, 0x88	; 136
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    16fa:	eb e8       	ldi	r30, 0x8B	; 139
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1702:	ea e8       	ldi	r30, 0x8A	; 138
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    170a:	ed e8       	ldi	r30, 0x8D	; 141
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1712:	ec e8       	ldi	r30, 0x8C	; 140
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
    171a:	e7 e8       	ldi	r30, 0x87	; 135
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    1722:	e6 e8       	ldi	r30, 0x86	; 134
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    172a:	e0 e8       	ldi	r30, 0x80	; 128
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8b ea       	ldi	r24, 0xAB	; 171
    1730:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1732:	e2 e8       	ldi	r30, 0x82	; 130
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1738:	e1 e8       	ldi	r30, 0x81	; 129
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8c e0       	ldi	r24, 0x0C	; 12
    173e:	80 83       	st	Z, r24
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    174e:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1750:	aa e6       	ldi	r26, 0x6A	; 106
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ea e6       	ldi	r30, 0x6A	; 106
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    175e:	ad e3       	ldi	r26, 0x3D	; 61
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ed e3       	ldi	r30, 0x3D	; 61
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 61       	ori	r24, 0x10	; 16
    176a:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    176c:	78 94       	sei
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    177c:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    177e:	aa e6       	ldi	r26, 0x6A	; 106
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	ea e6       	ldi	r30, 0x6A	; 106
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 60       	ori	r24, 0x08	; 8
    178a:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    178c:	ad e3       	ldi	r26, 0x3D	; 61
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ed e3       	ldi	r30, 0x3D	; 61
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 62       	ori	r24, 0x20	; 32
    1798:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    179a:	78 94       	sei
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    17bc:	80 91 1e 03 	lds	r24, 0x031E
    17c0:	90 91 1f 03 	lds	r25, 0x031F
    17c4:	a0 91 20 03 	lds	r26, 0x0320
    17c8:	b0 91 21 03 	lds	r27, 0x0321
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	a1 1d       	adc	r26, r1
    17d0:	b1 1d       	adc	r27, r1
    17d2:	80 93 1e 03 	sts	0x031E, r24
    17d6:	90 93 1f 03 	sts	0x031F, r25
    17da:	a0 93 20 03 	sts	0x0320, r26
    17de:	b0 93 21 03 	sts	0x0321, r27
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	bf 91       	pop	r27
    17e8:	af 91       	pop	r26
    17ea:	9f 91       	pop	r25
    17ec:	8f 91       	pop	r24
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    1812:	80 91 1a 03 	lds	r24, 0x031A
    1816:	90 91 1b 03 	lds	r25, 0x031B
    181a:	a0 91 1c 03 	lds	r26, 0x031C
    181e:	b0 91 1d 03 	lds	r27, 0x031D
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	a1 1d       	adc	r26, r1
    1826:	b1 1d       	adc	r27, r1
    1828:	80 93 1a 03 	sts	0x031A, r24
    182c:	90 93 1b 03 	sts	0x031B, r25
    1830:	a0 93 1c 03 	sts	0x031C, r26
    1834:	b0 93 1d 03 	sts	0x031D, r27
}
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	0f 92       	push	r0
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    185c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1864:	e2 e2       	ldi	r30, 0x22	; 34
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	80 7f       	andi	r24, 0xF0	; 240
    1870:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1872:	99 81       	ldd	r25, Y+1	; 0x01
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	89 2b       	or	r24, r25
    1878:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    187a:	e2 e2       	ldi	r30, 0x22	; 34
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	80 83       	st	Z, r24
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <forward>:

void forward (void) //both wheels forward
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    1894:	86 e0       	ldi	r24, 0x06	; 6
    1896:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <back>:

void back (void) //both wheels backward
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    18a8:	89 e0       	ldi	r24, 0x09	; 9
    18aa:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    18bc:	85 e0       	ldi	r24, 0x05	; 5
    18be:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    18d0:	8a e0       	ldi	r24, 0x0A	; 10
    18d2:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    18e4:	84 e0       	ldi	r24, 0x04	; 4
    18e6:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    1920:	88 e0       	ldi	r24, 0x08	; 8
    1922:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <stop>:

void stop (void)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	0e 94 27 0c 	call	0x184e	; 0x184e <motion_set>
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1948:	a7 e2       	ldi	r26, 0x27	; 39
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e7 e2       	ldi	r30, 0x27	; 39
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	87 6f       	ori	r24, 0xF7	; 247
    1954:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1956:	a8 e2       	ldi	r26, 0x28	; 40
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e8 e2       	ldi	r30, 0x28	; 40
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	80 78       	andi	r24, 0x80	; 128
    1962:	8c 93       	st	X, r24
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1972:	e0 e3       	ldi	r30, 0x30	; 48
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	10 82       	st	Z, r1
 PORTF = 0x00;
    1978:	e1 e3       	ldi	r30, 0x31	; 49
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	10 82       	st	Z, r1
 DDRK = 0x00;
    197e:	e7 e0       	ldi	r30, 0x07	; 7
    1980:	f1 e0       	ldi	r31, 0x01	; 1
    1982:	10 82       	st	Z, r1
 PORTK = 0x00;
    1984:	e8 e0       	ldi	r30, 0x08	; 8
    1986:	f1 e0       	ldi	r31, 0x01	; 1
    1988:	10 82       	st	Z, r1
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1998:	e1 e2       	ldi	r30, 0x21	; 33
    199a:	f1 e0       	ldi	r31, 0x01	; 1
    199c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    199e:	e5 e2       	ldi	r30, 0x25	; 37
    19a0:	f1 e0       	ldi	r31, 0x01	; 1
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    19a6:	e4 e2       	ldi	r30, 0x24	; 36
    19a8:	f1 e0       	ldi	r31, 0x01	; 1
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    19ae:	e9 e2       	ldi	r30, 0x29	; 41
    19b0:	f1 e0       	ldi	r31, 0x01	; 1
    19b2:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    19b4:	e8 e2       	ldi	r30, 0x28	; 40
    19b6:	f1 e0       	ldi	r31, 0x01	; 1
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    19bc:	eb e2       	ldi	r30, 0x2B	; 43
    19be:	f1 e0       	ldi	r31, 0x01	; 1
    19c0:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    19c2:	ea e2       	ldi	r30, 0x2A	; 42
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    19ca:	ed e2       	ldi	r30, 0x2D	; 45
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    19d0:	ec e2       	ldi	r30, 0x2C	; 44
    19d2:	f1 e0       	ldi	r31, 0x01	; 1
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    19d8:	e0 e2       	ldi	r30, 0x20	; 32
    19da:	f1 e0       	ldi	r31, 0x01	; 1
    19dc:	89 ea       	ldi	r24, 0xA9	; 169
    19de:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    19e0:	e1 e2       	ldi	r30, 0x21	; 33
    19e2:	f1 e0       	ldi	r31, 0x01	; 1
    19e4:	8b e0       	ldi	r24, 0x0B	; 11
    19e6:	80 83       	st	Z, r24
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <adc_init>:

void adc_init()
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    19f6:	ea e7       	ldi	r30, 0x7A	; 122
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    19fc:	eb e7       	ldi	r30, 0x7B	; 123
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1a02:	ec e7       	ldi	r30, 0x7C	; 124
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	80 83       	st	Z, r24
	ACSR = 0x80;
    1a0a:	e0 e5       	ldi	r30, 0x50	; 80
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 e8       	ldi	r24, 0x80	; 128
    1a10:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1a12:	ea e7       	ldi	r30, 0x7A	; 122
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	86 e8       	ldi	r24, 0x86	; 134
    1a18:	80 83       	st	Z, r24
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	0f 92       	push	r0
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1a34:	eb e7       	ldi	r30, 0x7B	; 123
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	88 e0       	ldi	r24, 0x08	; 8
    1a3a:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	87 70       	andi	r24, 0x07	; 7
    1a40:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1a42:	ec e7       	ldi	r30, 0x7C	; 124
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	80 62       	ori	r24, 0x20	; 32
    1a4a:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1a4c:	aa e7       	ldi	r26, 0x7A	; 122
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	ea e7       	ldi	r30, 0x7A	; 122
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 64       	ori	r24, 0x40	; 64
    1a58:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1a5a:	ea e7       	ldi	r30, 0x7A	; 122
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	80 71       	andi	r24, 0x10	; 16
    1a66:	90 70       	andi	r25, 0x00	; 0
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	b9 f3       	breq	.-18     	; 0x1a5a <ADC_Conversion+0x3a>
	a=ADCH;
    1a6c:	e9 e7       	ldi	r30, 0x79	; 121
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1a74:	aa e7       	ldi	r26, 0x7A	; 122
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	ea e7       	ldi	r30, 0x7A	; 122
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 61       	ori	r24, 0x10	; 16
    1a80:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1a82:	eb e7       	ldi	r30, 0x7B	; 123
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	10 82       	st	Z, r1
	return a;
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <print_sensor+0x6>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	6a 83       	std	Y+2, r22	; 0x02
    1aa2:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    1aaa:	80 93 36 03 	sts	0x0336, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1aae:	80 91 36 03 	lds	r24, 0x0336
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	6a 81       	ldd	r22, Y+2	; 0x02
    1aba:	a9 01       	movw	r20, r18
    1abc:	23 e0       	ldi	r18, 0x03	; 3
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <angle_rotate>:



//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	2c 97       	sbiw	r28, 0x0c	; 12
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	9a 87       	std	Y+10, r25	; 0x0a
    1ae6:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	af 83       	std	Y+7, r26	; 0x07
    1af6:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1af8:	19 82       	std	Y+1, r1	; 0x01
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	1b 82       	std	Y+3, r1	; 0x03
    1afe:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	cc 01       	movw	r24, r24
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__floatunsisf>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	28 e4       	ldi	r18, 0x48	; 72
    1b1c:	31 ee       	ldi	r19, 0xE1	; 225
    1b1e:	42 e8       	ldi	r20, 0x82	; 130
    1b20:	50 e4       	ldi	r21, 0x40	; 64
    1b22:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__divsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	af 83       	std	Y+7, r26	; 0x07
    1b30:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1b32:	6d 81       	ldd	r22, Y+5	; 0x05
    1b34:	7e 81       	ldd	r23, Y+6	; 0x06
    1b36:	8f 81       	ldd	r24, Y+7	; 0x07
    1b38:	98 85       	ldd	r25, Y+8	; 0x08
    1b3a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	cc 01       	movw	r24, r24
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	ab 83       	std	Y+3, r26	; 0x03
    1b4e:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
    1b50:	10 92 1e 03 	sts	0x031E, r1
    1b54:	10 92 1f 03 	sts	0x031F, r1
    1b58:	10 92 20 03 	sts	0x0320, r1
    1b5c:	10 92 21 03 	sts	0x0321, r1
 ShaftCountLeft = 0; 
    1b60:	10 92 1a 03 	sts	0x031A, r1
    1b64:	10 92 1b 03 	sts	0x031B, r1
    1b68:	10 92 1c 03 	sts	0x031C, r1
    1b6c:	10 92 1d 03 	sts	0x031D, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1b70:	20 91 1e 03 	lds	r18, 0x031E
    1b74:	30 91 1f 03 	lds	r19, 0x031F
    1b78:	40 91 20 03 	lds	r20, 0x0320
    1b7c:	50 91 21 03 	lds	r21, 0x0321
    1b80:	1c 86       	std	Y+12, r1	; 0x0c
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	ab 81       	ldd	r26, Y+3	; 0x03
    1b88:	bc 81       	ldd	r27, Y+4	; 0x04
    1b8a:	28 17       	cp	r18, r24
    1b8c:	39 07       	cpc	r19, r25
    1b8e:	4a 07       	cpc	r20, r26
    1b90:	5b 07       	cpc	r21, r27
    1b92:	10 f0       	brcs	.+4      	; 0x1b98 <angle_rotate+0xc8>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	8c 87       	std	Y+12, r24	; 0x0c
    1b98:	20 91 1a 03 	lds	r18, 0x031A
    1b9c:	30 91 1b 03 	lds	r19, 0x031B
    1ba0:	40 91 1c 03 	lds	r20, 0x031C
    1ba4:	50 91 1d 03 	lds	r21, 0x031D
    1ba8:	1b 86       	std	Y+11, r1	; 0x0b
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	ab 81       	ldd	r26, Y+3	; 0x03
    1bb0:	bc 81       	ldd	r27, Y+4	; 0x04
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	4a 07       	cpc	r20, r26
    1bb8:	5b 07       	cpc	r21, r27
    1bba:	10 f0       	brcs	.+4      	; 0x1bc0 <angle_rotate+0xf0>
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	9b 87       	std	Y+11, r25	; 0x0b
    1bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc4:	89 2b       	or	r24, r25
    1bc6:	88 23       	and	r24, r24
    1bc8:	99 f2       	breq	.-90     	; 0x1b70 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
    1bca:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
}
    1bce:	2c 96       	adiw	r28, 0x0c	; 12
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	2a 97       	sbiw	r28, 0x0a	; 10
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	9a 87       	std	Y+10, r25	; 0x0a
    1bf6:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	af 83       	std	Y+7, r26	; 0x07
    1c06:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1c08:	19 82       	std	Y+1, r1	; 0x01
    1c0a:	1a 82       	std	Y+2, r1	; 0x02
    1c0c:	1b 82       	std	Y+3, r1	; 0x03
    1c0e:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	cc 01       	movw	r24, r24
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__floatunsisf>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	25 ee       	ldi	r18, 0xE5	; 229
    1c2c:	30 ed       	ldi	r19, 0xD0	; 208
    1c2e:	4a ea       	ldi	r20, 0xAA	; 170
    1c30:	50 e4       	ldi	r21, 0x40	; 64
    1c32:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__divsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	af 83       	std	Y+7, r26	; 0x07
    1c40:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1c42:	6d 81       	ldd	r22, Y+5	; 0x05
    1c44:	7e 81       	ldd	r23, Y+6	; 0x06
    1c46:	8f 81       	ldd	r24, Y+7	; 0x07
    1c48:	98 85       	ldd	r25, Y+8	; 0x08
    1c4a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	ab 83       	std	Y+3, r26	; 0x03
    1c58:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
    1c5a:	10 92 1e 03 	sts	0x031E, r1
    1c5e:	10 92 1f 03 	sts	0x031F, r1
    1c62:	10 92 20 03 	sts	0x0320, r1
    1c66:	10 92 21 03 	sts	0x0321, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
    1c6a:	20 91 1e 03 	lds	r18, 0x031E
    1c6e:	30 91 1f 03 	lds	r19, 0x031F
    1c72:	40 91 20 03 	lds	r20, 0x0320
    1c76:	50 91 21 03 	lds	r21, 0x0321
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c80:	bc 81       	ldd	r27, Y+4	; 0x04
    1c82:	82 17       	cp	r24, r18
    1c84:	93 07       	cpc	r25, r19
    1c86:	a4 07       	cpc	r26, r20
    1c88:	b5 07       	cpc	r27, r21
    1c8a:	78 f7       	brcc	.-34     	; 0x1c6a <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop robot
    1c8c:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
}
    1c90:	2a 96       	adiw	r28, 0x0a	; 10
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <velocity>:


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	0f 92       	push	r0
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1cb2:	e8 e2       	ldi	r30, 0x28	; 40
    1cb4:	f1 e0       	ldi	r31, 0x01	; 1
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1cba:	ea e2       	ldi	r30, 0x2A	; 42
    1cbc:	f1 e0       	ldi	r31, 0x01	; 1
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	80 83       	st	Z, r24
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <forward_mm>:



void forward_mm(unsigned int DistanceInMM)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	0f 92       	push	r0
    1cd2:	0f 92       	push	r0
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
 forward();
    1cdc:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
 velocity(150,150);
    1ce0:	86 e9       	ldi	r24, 0x96	; 150
    1ce2:	66 e9       	ldi	r22, 0x96	; 150
    1ce4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
 linear_distance_mm(DistanceInMM);
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <linear_distance_mm>
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	0f 92       	push	r0
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
 back();
    1d0a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <back>
 velocity(150,150);
    1d0e:	86 e9       	ldi	r24, 0x96	; 150
    1d10:	66 e9       	ldi	r22, 0x96	; 150
    1d12:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
 linear_distance_mm(DistanceInMM);
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <linear_distance_mm>
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	0f 92       	push	r0
    1d2e:	0f 92       	push	r0
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1d38:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <left>
 
 angle_rotate(Degrees);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <angle_rotate>
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	0f 92       	push	r0
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1d5e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <right>
 angle_rotate(Degrees);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <angle_rotate>
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	0f 92       	push	r0
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
    1d84:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <soft_left>
 Degrees=Degrees*2;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <angle_rotate>
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
    1db6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <soft_right>
 Degrees=Degrees*2;
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <angle_rotate>
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	0f 92       	push	r0
    1dde:	0f 92       	push	r0
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
    1de8:	0e 94 82 0c 	call	0x1904	; 0x1904 <soft_left_2>
 Degrees=Degrees*2;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <angle_rotate>
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	0f 92       	push	r0
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
    1e1a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <soft_right_2>
 Degrees=Degrees*2;
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <angle_rotate>
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <init_devices>:


void init_devices (void)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    1e44:	f8 94       	cli
	port_init();  //Initializes all the ports
    1e46:	0e 94 4d 0b 	call	0x169a	; 0x169a <port_init>
	left_position_encoder_interrupt_init();
    1e4a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <left_position_encoder_interrupt_init>
 	right_position_encoder_interrupt_init();
    1e4e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <right_position_encoder_interrupt_init>
	adc_init();
    1e52:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <adc_init>
	timer5_init();
    1e56:	0e 94 c8 0c 	call	0x1990	; 0x1990 <timer5_init>
	uart2_init(); //Initailize UART1 for serial communiaction
    1e5a:	0e 94 a7 0a 	call	0x154e	; 0x154e <uart2_init>
	port_init();
    1e5e:	0e 94 4d 0b 	call	0x169a	; 0x169a <port_init>
	timer1_init();
    1e62:	0e 94 66 0b 	call	0x16cc	; 0x16cc <timer1_init>
	sei();   //Enables the global interrupts
    1e66:	78 94       	sei
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 0.4 degrees
void servo_1(unsigned char degrees)
{
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <servo_1+0xa>
    1e78:	0f 92       	push	r0
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e0       	ldi	r26, 0x00	; 0
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	ab 83       	std	Y+3, r26	; 0x03
    1e90:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 0.4) + 35.0;     //start from an offset of 35
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__floatunsisf>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	2d ec       	ldi	r18, 0xCD	; 205
    1eae:	3c ec       	ldi	r19, 0xCC	; 204
    1eb0:	4c ec       	ldi	r20, 0xCC	; 204
    1eb2:	5e e3       	ldi	r21, 0x3E	; 62
    1eb4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__divsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4c e0       	ldi	r20, 0x0C	; 12
    1ec6:	52 e4       	ldi	r21, 0x42	; 66
    1ec8:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__addsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	ab 83       	std	Y+3, r26	; 0x03
    1ed6:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    1ed8:	e9 e8       	ldi	r30, 0x89	; 137
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    1ede:	08 e8       	ldi	r16, 0x88	; 136
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	69 81       	ldd	r22, Y+1	; 0x01
    1ee4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 83       	st	Z, r24
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <servo_2>:



//Function to rotate Servo 2 by a specified angle in the multiples of 0.9 degrees
void servo_2(unsigned char degrees)
{
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <servo_2+0xa>
    1f14:	0f 92       	push	r0
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
	float PositionTiltServo = 0;
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	ab 83       	std	Y+3, r26	; 0x03
    1f2c:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 0.9)+40.0;   //start from an offset of 40 
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e0       	ldi	r26, 0x00	; 0
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__floatunsisf>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	26 e6       	ldi	r18, 0x66	; 102
    1f4a:	36 e6       	ldi	r19, 0x66	; 102
    1f4c:	46 e6       	ldi	r20, 0x66	; 102
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__divsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	52 e4       	ldi	r21, 0x42	; 66
    1f64:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__addsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	ab 83       	std	Y+3, r26	; 0x03
    1f72:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    1f74:	eb e8       	ldi	r30, 0x8B	; 139
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1f7a:	0a e8       	ldi	r16, 0x8A	; 138
    1f7c:	10 e0       	ldi	r17, 0x00	; 0
    1f7e:	69 81       	ldd	r22, Y+1	; 0x01
    1f80:	7a 81       	ldd	r23, Y+2	; 0x02
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	f8 01       	movw	r30, r16
    1f90:	80 83       	st	Z, r24
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <servo_1_free>:

void servo_1_free (void) //makes servo 1 free rotating
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03;
    1fae:	e9 e8       	ldi	r30, 0x89	; 137
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	80 83       	st	Z, r24
	OCR1AL = 0xFF; //Servo 1 off
    1fb6:	e8 e8       	ldi	r30, 0x88	; 136
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	80 83       	st	Z, r24
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	OCR1BH = 0x03;
    1fcc:	eb e8       	ldi	r30, 0x8B	; 139
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Servo 2 off
    1fd4:	ea e8       	ldi	r30, 0x8A	; 138
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	80 83       	st	Z, r24
}
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <nodes>:

/* Finds all nodes of a given habitat and returns the coordinates of the nearest node from animal location i.e. (x,y) */
int* nodes(int n,int x,int y)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	a8 97       	sbiw	r28, 0x28	; 40
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	9c 8f       	std	Y+28, r25	; 0x1c
    1ff8:	8b 8f       	std	Y+27, r24	; 0x1b
    1ffa:	7e 8f       	std	Y+30, r23	; 0x1e
    1ffc:	6d 8f       	std	Y+29, r22	; 0x1d
    1ffe:	58 a3       	std	Y+32, r21	; 0x20
    2000:	4f 8f       	std	Y+31, r20	; 0x1f
	Output: temp
	*/
	
	// find coordinates of bottom left corner of habitat number n 
	// ----------------------------------------------------------
	int x0=n%5; 
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	25 e0       	ldi	r18, 0x05	; 5
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    2010:	9a 8f       	std	Y+26, r25	; 0x1a
    2012:	89 8f       	std	Y+25, r24	; 0x19
	int y0=n/5;
    2014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2018:	25 e0       	ldi	r18, 0x05	; 5
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    2022:	cb 01       	movw	r24, r22
    2024:	98 8f       	std	Y+24, r25	; 0x18
    2026:	8f 8b       	std	Y+23, r24	; 0x17
	
	// Calculate coordinates of other 3 nodes of habitat n and returns the closest to animal location
	// ----------------------------------------------------------------------------------------------
	int x1,y1,x2,y2,x3,y3,rx,ry,d1,d2;
	int *temp=(int*) malloc(sizeof(int)*2);
    2028:	84 e0       	ldi	r24, 0x04	; 4
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 ce 31 	call	0x639c	; 0x639c <malloc>
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
	x1=x0+1;
    2034:	89 8d       	ldd	r24, Y+25	; 0x19
    2036:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	9e 8b       	std	Y+22, r25	; 0x16
    203c:	8d 8b       	std	Y+21, r24	; 0x15
	x2=x1;
    203e:	8d 89       	ldd	r24, Y+21	; 0x15
    2040:	9e 89       	ldd	r25, Y+22	; 0x16
    2042:	9a 8b       	std	Y+18, r25	; 0x12
    2044:	89 8b       	std	Y+17, r24	; 0x11
	x3=x0;
    2046:	89 8d       	ldd	r24, Y+25	; 0x19
    2048:	9a 8d       	ldd	r25, Y+26	; 0x1a
    204a:	9e 87       	std	Y+14, r25	; 0x0e
    204c:	8d 87       	std	Y+13, r24	; 0x0d
	y1=y0;
    204e:	8f 89       	ldd	r24, Y+23	; 0x17
    2050:	98 8d       	ldd	r25, Y+24	; 0x18
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
	y2=y0+1;
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	98 8b       	std	Y+16, r25	; 0x10
    205e:	8f 87       	std	Y+15, r24	; 0x0f
	y3=y2;
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	98 89       	ldd	r25, Y+16	; 0x10
    2064:	9c 87       	std	Y+12, r25	; 0x0c
    2066:	8b 87       	std	Y+11, r24	; 0x0b
	d1=abs(x-x0);
    2068:	2d 8d       	ldd	r18, Y+29	; 0x1d
    206a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    206c:	89 8d       	ldd	r24, Y+25	; 0x19
    206e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2070:	a9 01       	movw	r20, r18
    2072:	48 1b       	sub	r20, r24
    2074:	59 0b       	sbc	r21, r25
    2076:	ca 01       	movw	r24, r20
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	99 23       	and	r25, r25
    2082:	3c f4       	brge	.+14     	; 0x2092 <nodes+0xb0>
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	90 95       	com	r25
    208a:	81 95       	neg	r24
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
	d2=abs(x-x1);
    2092:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2094:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2096:	8d 89       	ldd	r24, Y+21	; 0x15
    2098:	9e 89       	ldd	r25, Y+22	; 0x16
    209a:	a9 01       	movw	r20, r18
    209c:	48 1b       	sub	r20, r24
    209e:	59 0b       	sbc	r21, r25
    20a0:	ca 01       	movw	r24, r20
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	99 23       	and	r25, r25
    20ac:	3c f4       	brge	.+14     	; 0x20bc <nodes+0xda>
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	90 95       	com	r25
    20b4:	81 95       	neg	r24
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
	
	d1>d2?((abs(y-y1)>abs(y-y2)?(rx=x1,ry=y2):(rx=x1,ry=y1))):((abs(y-y0)>abs(y-y3))?(rx=x0,ry=y3):(rx=x0,ry=y0)); // Find node with least distance
    20bc:	2d 81       	ldd	r18, Y+5	; 0x05
    20be:	3e 81       	ldd	r19, Y+6	; 0x06
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	82 17       	cp	r24, r18
    20c6:	93 07       	cpc	r25, r19
    20c8:	0c f0       	brlt	.+2      	; 0x20cc <nodes+0xea>
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <nodes+0x168>
    20cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ce:	98 a1       	ldd	r25, Y+32	; 0x20
    20d0:	2b 89       	ldd	r18, Y+19	; 0x13
    20d2:	3c 89       	ldd	r19, Y+20	; 0x14
    20d4:	82 1b       	sub	r24, r18
    20d6:	93 0b       	sbc	r25, r19
    20d8:	98 a7       	std	Y+40, r25	; 0x28
    20da:	8f a3       	std	Y+39, r24	; 0x27
    20dc:	8f a1       	ldd	r24, Y+39	; 0x27
    20de:	98 a5       	ldd	r25, Y+40	; 0x28
    20e0:	99 23       	and	r25, r25
    20e2:	3c f4       	brge	.+14     	; 0x20f2 <nodes+0x110>
    20e4:	2f a1       	ldd	r18, Y+39	; 0x27
    20e6:	38 a5       	ldd	r19, Y+40	; 0x28
    20e8:	30 95       	com	r19
    20ea:	21 95       	neg	r18
    20ec:	3f 4f       	sbci	r19, 0xFF	; 255
    20ee:	38 a7       	std	Y+40, r19	; 0x28
    20f0:	2f a3       	std	Y+39, r18	; 0x27
    20f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f4:	98 a1       	ldd	r25, Y+32	; 0x20
    20f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    20f8:	38 89       	ldd	r19, Y+16	; 0x10
    20fa:	82 1b       	sub	r24, r18
    20fc:	93 0b       	sbc	r25, r19
    20fe:	9e a3       	std	Y+38, r25	; 0x26
    2100:	8d a3       	std	Y+37, r24	; 0x25
    2102:	4d a1       	ldd	r20, Y+37	; 0x25
    2104:	5e a1       	ldd	r21, Y+38	; 0x26
    2106:	55 23       	and	r21, r21
    2108:	3c f4       	brge	.+14     	; 0x2118 <nodes+0x136>
    210a:	8d a1       	ldd	r24, Y+37	; 0x25
    210c:	9e a1       	ldd	r25, Y+38	; 0x26
    210e:	90 95       	com	r25
    2110:	81 95       	neg	r24
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	9e a3       	std	Y+38, r25	; 0x26
    2116:	8d a3       	std	Y+37, r24	; 0x25
    2118:	2f a1       	ldd	r18, Y+39	; 0x27
    211a:	38 a5       	ldd	r19, Y+40	; 0x28
    211c:	4d a1       	ldd	r20, Y+37	; 0x25
    211e:	5e a1       	ldd	r21, Y+38	; 0x26
    2120:	42 17       	cp	r20, r18
    2122:	53 07       	cpc	r21, r19
    2124:	4c f4       	brge	.+18     	; 0x2138 <nodes+0x156>
    2126:	8d 89       	ldd	r24, Y+21	; 0x15
    2128:	9e 89       	ldd	r25, Y+22	; 0x16
    212a:	9a 87       	std	Y+10, r25	; 0x0a
    212c:	89 87       	std	Y+9, r24	; 0x09
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 89       	ldd	r25, Y+16	; 0x10
    2132:	98 87       	std	Y+8, r25	; 0x08
    2134:	8f 83       	std	Y+7, r24	; 0x07
    2136:	47 c0       	rjmp	.+142    	; 0x21c6 <nodes+0x1e4>
    2138:	8d 89       	ldd	r24, Y+21	; 0x15
    213a:	9e 89       	ldd	r25, Y+22	; 0x16
    213c:	9a 87       	std	Y+10, r25	; 0x0a
    213e:	89 87       	std	Y+9, r24	; 0x09
    2140:	8b 89       	ldd	r24, Y+19	; 0x13
    2142:	9c 89       	ldd	r25, Y+20	; 0x14
    2144:	98 87       	std	Y+8, r25	; 0x08
    2146:	8f 83       	std	Y+7, r24	; 0x07
    2148:	3e c0       	rjmp	.+124    	; 0x21c6 <nodes+0x1e4>
    214a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    214c:	98 a1       	ldd	r25, Y+32	; 0x20
    214e:	2f 89       	ldd	r18, Y+23	; 0x17
    2150:	38 8d       	ldd	r19, Y+24	; 0x18
    2152:	82 1b       	sub	r24, r18
    2154:	93 0b       	sbc	r25, r19
    2156:	9c a3       	std	Y+36, r25	; 0x24
    2158:	8b a3       	std	Y+35, r24	; 0x23
    215a:	8b a1       	ldd	r24, Y+35	; 0x23
    215c:	9c a1       	ldd	r25, Y+36	; 0x24
    215e:	99 23       	and	r25, r25
    2160:	3c f4       	brge	.+14     	; 0x2170 <nodes+0x18e>
    2162:	2b a1       	ldd	r18, Y+35	; 0x23
    2164:	3c a1       	ldd	r19, Y+36	; 0x24
    2166:	30 95       	com	r19
    2168:	21 95       	neg	r18
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	3c a3       	std	Y+36, r19	; 0x24
    216e:	2b a3       	std	Y+35, r18	; 0x23
    2170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2172:	98 a1       	ldd	r25, Y+32	; 0x20
    2174:	2b 85       	ldd	r18, Y+11	; 0x0b
    2176:	3c 85       	ldd	r19, Y+12	; 0x0c
    2178:	82 1b       	sub	r24, r18
    217a:	93 0b       	sbc	r25, r19
    217c:	9a a3       	std	Y+34, r25	; 0x22
    217e:	89 a3       	std	Y+33, r24	; 0x21
    2180:	49 a1       	ldd	r20, Y+33	; 0x21
    2182:	5a a1       	ldd	r21, Y+34	; 0x22
    2184:	55 23       	and	r21, r21
    2186:	3c f4       	brge	.+14     	; 0x2196 <nodes+0x1b4>
    2188:	89 a1       	ldd	r24, Y+33	; 0x21
    218a:	9a a1       	ldd	r25, Y+34	; 0x22
    218c:	90 95       	com	r25
    218e:	81 95       	neg	r24
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	9a a3       	std	Y+34, r25	; 0x22
    2194:	89 a3       	std	Y+33, r24	; 0x21
    2196:	2b a1       	ldd	r18, Y+35	; 0x23
    2198:	3c a1       	ldd	r19, Y+36	; 0x24
    219a:	49 a1       	ldd	r20, Y+33	; 0x21
    219c:	5a a1       	ldd	r21, Y+34	; 0x22
    219e:	42 17       	cp	r20, r18
    21a0:	53 07       	cpc	r21, r19
    21a2:	4c f4       	brge	.+18     	; 0x21b6 <nodes+0x1d4>
    21a4:	89 8d       	ldd	r24, Y+25	; 0x19
    21a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21a8:	9a 87       	std	Y+10, r25	; 0x0a
    21aa:	89 87       	std	Y+9, r24	; 0x09
    21ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    21b0:	98 87       	std	Y+8, r25	; 0x08
    21b2:	8f 83       	std	Y+7, r24	; 0x07
    21b4:	08 c0       	rjmp	.+16     	; 0x21c6 <nodes+0x1e4>
    21b6:	89 8d       	ldd	r24, Y+25	; 0x19
    21b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21ba:	9a 87       	std	Y+10, r25	; 0x0a
    21bc:	89 87       	std	Y+9, r24	; 0x09
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	98 87       	std	Y+8, r25	; 0x08
    21c4:	8f 83       	std	Y+7, r24	; 0x07
	
	// Store coordinates of closest node in temp and return it
	*temp=rx;
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
	*(temp+1)=ry;
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	fc 01       	movw	r30, r24
    21d8:	32 96       	adiw	r30, 0x02	; 2
    21da:	8f 81       	ldd	r24, Y+7	; 0x07
    21dc:	98 85       	ldd	r25, Y+8	; 0x08
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
	return temp;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21e6:	a8 96       	adiw	r28, 0x28	; 40
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <straight>:

/* Follow black line for given number of nodes(d) */
void straight(int d)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	0f 92       	push	r0
    21fe:	0f 92       	push	r0
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	89 83       	std	Y+1, r24	; 0x01
	nodetraverse(d);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <nodetraverse>
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <turn_180>:

/* Rotate 180 degrees from current direction on to black line */
int turn_180()
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	2e 97       	sbiw	r28, 0x0e	; 14
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: turn_180
	Input: None
	Output:a
	*/
	init_devices();
    222e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	right_degrees(177);
    2232:	81 eb       	ldi	r24, 0xB1	; 177
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <right_degrees>
	while(1)
	{
		// Adjust position by rotating in steps of 3 degrees until black line is found
		Center_white_line = ADC_Conversion(2);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    2240:	80 93 18 03 	sts	0x0318, r24
		if(Center_white_line<0x20)
    2244:	80 91 18 03 	lds	r24, 0x0318
    2248:	80 32       	cpi	r24, 0x20	; 32
    224a:	28 f4       	brcc	.+10     	; 0x2256 <turn_180+0x3c>
			right_degrees(3);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <right_degrees>
    2254:	f2 cf       	rjmp	.-28     	; 0x223a <turn_180+0x20>
		else
			break;
	}
	stop();
    2256:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a8 ec       	ldi	r26, 0xC8	; 200
    2260:	b2 e4       	ldi	r27, 0x42	; 66
    2262:	8b 87       	std	Y+11, r24	; 0x0b
    2264:	9c 87       	std	Y+12, r25	; 0x0c
    2266:	ad 87       	std	Y+13, r26	; 0x0d
    2268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	26 e6       	ldi	r18, 0x66	; 102
    2274:	36 e6       	ldi	r19, 0x66	; 102
    2276:	46 e6       	ldi	r20, 0x66	; 102
    2278:	55 e4       	ldi	r21, 0x45	; 69
    227a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	98 87       	std	Y+8, r25	; 0x08
    2286:	a9 87       	std	Y+9, r26	; 0x09
    2288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <turn_180+0x92>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <turn_180+0x110>
	else if (__tmp > 65535)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <turn_180+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <turn_180+0xf2>
    22ee:	80 e7       	ldi	r24, 0x70	; 112
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <turn_180+0xe0>
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <turn_180+0xd4>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <turn_180+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <turn_180+0x11c>
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	
	a=a+2;
    233e:	80 91 02 02 	lds	r24, 0x0202
    2342:	90 91 03 02 	lds	r25, 0x0203
    2346:	02 96       	adiw	r24, 0x02	; 2
    2348:	90 93 03 02 	sts	0x0203, r25
    234c:	80 93 02 02 	sts	0x0202, r24
	// Update the direction reference of the robot and return it
	if(a==8||a==0)
    2350:	80 91 02 02 	lds	r24, 0x0202
    2354:	90 91 03 02 	lds	r25, 0x0203
    2358:	88 30       	cpi	r24, 0x08	; 8
    235a:	91 05       	cpc	r25, r1
    235c:	31 f0       	breq	.+12     	; 0x236a <turn_180+0x150>
    235e:	80 91 02 02 	lds	r24, 0x0202
    2362:	90 91 03 02 	lds	r25, 0x0203
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	31 f4       	brne	.+12     	; 0x2376 <turn_180+0x15c>
		a=4;
    236a:	84 e0       	ldi	r24, 0x04	; 4
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	90 93 03 02 	sts	0x0203, r25
    2372:	80 93 02 02 	sts	0x0202, r24
	return a;
    2376:	80 91 02 02 	lds	r24, 0x0202
    237a:	90 91 03 02 	lds	r25, 0x0203
}
    237e:	2e 96       	adiw	r28, 0x0e	; 14
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <turn>:

/* Turn the robot by 90 degrees left/right based on parameter value*/
int turn(int f)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	6e 97       	sbiw	r28, 0x1e	; 30
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	9e 8f       	std	Y+30, r25	; 0x1e
    23a6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*
	Function Name: turn
	Input: f
	Output: a
	*/
	init_devices();
    23a8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	forward_mm(35);
    23ac:	83 e2       	ldi	r24, 0x23	; 35
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
	stop();
    23b4:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a8 ec       	ldi	r26, 0xC8	; 200
    23be:	b2 e4       	ldi	r27, 0x42	; 66
    23c0:	89 8f       	std	Y+25, r24	; 0x19
    23c2:	9a 8f       	std	Y+26, r25	; 0x1a
    23c4:	ab 8f       	std	Y+27, r26	; 0x1b
    23c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d0:	26 e6       	ldi	r18, 0x66	; 102
    23d2:	36 e6       	ldi	r19, 0x66	; 102
    23d4:	46 e6       	ldi	r20, 0x66	; 102
    23d6:	55 e4       	ldi	r21, 0x45	; 69
    23d8:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8d 8b       	std	Y+21, r24	; 0x15
    23e2:	9e 8b       	std	Y+22, r25	; 0x16
    23e4:	af 8b       	std	Y+23, r26	; 0x17
    23e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <turn+0x7a>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <turn+0xf8>
	else if (__tmp > 65535)
    240a:	6d 89       	ldd	r22, Y+21	; 0x15
    240c:	7e 89       	ldd	r23, Y+22	; 0x16
    240e:	8f 89       	ldd	r24, Y+23	; 0x17
    2410:	98 8d       	ldd	r25, Y+24	; 0x18
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <turn+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	69 8d       	ldd	r22, Y+25	; 0x19
    2424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	0f c0       	rjmp	.+30     	; 0x246a <turn+0xda>
    244c:	80 e7       	ldi	r24, 0x70	; 112
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
    2454:	89 89       	ldd	r24, Y+17	; 0x11
    2456:	9a 89       	ldd	r25, Y+18	; 0x12
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <turn+0xc8>
    245c:	9a 8b       	std	Y+18, r25	; 0x12
    245e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <turn+0xbc>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <turn+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6d 89       	ldd	r22, Y+21	; 0x15
    2476:	7e 89       	ldd	r23, Y+22	; 0x16
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	98 89       	ldd	r25, Y+16	; 0x10
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <turn+0x104>
    2498:	98 8b       	std	Y+16, r25	; 0x10
    249a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	// Rotate right by 90 degrees
	if(f==1)
    249c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	91 05       	cpc	r25, r1
    24a4:	e1 f4       	brne	.+56     	; 0x24de <turn+0x14e>
	{
		right_degrees(70);
    24a6:	86 e4       	ldi	r24, 0x46	; 70
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <right_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    24b4:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x50)
    24b8:	80 91 18 03 	lds	r24, 0x0318
    24bc:	80 35       	cpi	r24, 0x50	; 80
    24be:	28 f4       	brcc	.+10     	; 0x24ca <turn+0x13a>
				right_degrees(3);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <right_degrees>
    24c8:	f2 cf       	rjmp	.-28     	; 0x24ae <turn+0x11e>
			else
				break;
		}
		a++;
    24ca:	80 91 02 02 	lds	r24, 0x0202
    24ce:	90 91 03 02 	lds	r25, 0x0203
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	90 93 03 02 	sts	0x0203, r25
    24d8:	80 93 02 02 	sts	0x0202, r24
    24dc:	1b c0       	rjmp	.+54     	; 0x2514 <turn+0x184>
	}
	
	// Rotate left by 90 degrees
	else
	{
		left_degrees(70);
    24de:	86 e4       	ldi	r24, 0x46	; 70
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <left_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    24ec:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x50)
    24f0:	80 91 18 03 	lds	r24, 0x0318
    24f4:	80 35       	cpi	r24, 0x50	; 80
    24f6:	28 f4       	brcc	.+10     	; 0x2502 <turn+0x172>
				left_degrees(3);
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <left_degrees>
    2500:	f2 cf       	rjmp	.-28     	; 0x24e6 <turn+0x156>
			else
				break;
		}
		a--;
    2502:	80 91 02 02 	lds	r24, 0x0202
    2506:	90 91 03 02 	lds	r25, 0x0203
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	90 93 03 02 	sts	0x0203, r25
    2510:	80 93 02 02 	sts	0x0202, r24
	}
	stop();
    2514:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a8 ec       	ldi	r26, 0xC8	; 200
    251e:	b2 e4       	ldi	r27, 0x42	; 66
    2520:	8b 87       	std	Y+11, r24	; 0x0b
    2522:	9c 87       	std	Y+12, r25	; 0x0c
    2524:	ad 87       	std	Y+13, r26	; 0x0d
    2526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	26 e6       	ldi	r18, 0x66	; 102
    2532:	36 e6       	ldi	r19, 0x66	; 102
    2534:	46 e6       	ldi	r20, 0x66	; 102
    2536:	55 e4       	ldi	r21, 0x45	; 69
    2538:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8f 83       	std	Y+7, r24	; 0x07
    2542:	98 87       	std	Y+8, r25	; 0x08
    2544:	a9 87       	std	Y+9, r26	; 0x09
    2546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <turn+0x1da>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <turn+0x258>
	else if (__tmp > 65535)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <turn+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	6b 85       	ldd	r22, Y+11	; 0x0b
    2584:	7c 85       	ldd	r23, Y+12	; 0x0c
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <turn+0x23a>
    25ac:	80 e7       	ldi	r24, 0x70	; 112
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <turn+0x228>
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <turn+0x21c>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <turn+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <turn+0x264>
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	
	// Update direction reference of robot and return it
	if(a==8||a==0)
    25fc:	80 91 02 02 	lds	r24, 0x0202
    2600:	90 91 03 02 	lds	r25, 0x0203
    2604:	88 30       	cpi	r24, 0x08	; 8
    2606:	91 05       	cpc	r25, r1
    2608:	31 f0       	breq	.+12     	; 0x2616 <turn+0x286>
    260a:	80 91 02 02 	lds	r24, 0x0202
    260e:	90 91 03 02 	lds	r25, 0x0203
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	31 f4       	brne	.+12     	; 0x2622 <turn+0x292>
		a=4;
    2616:	84 e0       	ldi	r24, 0x04	; 4
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	90 93 03 02 	sts	0x0203, r25
    261e:	80 93 02 02 	sts	0x0202, r24
	return a;
    2622:	80 91 02 02 	lds	r24, 0x0202
    2626:	90 91 03 02 	lds	r25, 0x0203
}
    262a:	6e 96       	adiw	r28, 0x1e	; 30
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <facing>:

/* Updates the direction flags based on direction reference value passed*/
void facing(int a)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	0f 92       	push	r0
    2642:	0f 92       	push	r0
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
	/*
	Function Name: facing
	Input: a
	Output: None
	*/
	if(a%4==0) // facing front
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	83 70       	andi	r24, 0x03	; 3
    2652:	90 70       	andi	r25, 0x00	; 0
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	b9 f4       	brne	.+46     	; 0x2686 <facing+0x4a>
	{
		l=0;
    2658:	10 92 2b 03 	sts	0x032B, r1
    265c:	10 92 2a 03 	sts	0x032A, r1
		f=1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	90 93 01 02 	sts	0x0201, r25
    2668:	80 93 00 02 	sts	0x0200, r24
		r=b=0;
    266c:	10 92 27 03 	sts	0x0327, r1
    2670:	10 92 26 03 	sts	0x0326, r1
    2674:	80 91 26 03 	lds	r24, 0x0326
    2678:	90 91 27 03 	lds	r25, 0x0327
    267c:	90 93 29 03 	sts	0x0329, r25
    2680:	80 93 28 03 	sts	0x0328, r24
    2684:	6e c0       	rjmp	.+220    	; 0x2762 <facing+0x126>
	}
	else if(a%4==2) // facing back
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	24 e0       	ldi	r18, 0x04	; 4
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	b9 01       	movw	r22, r18
    2690:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	91 05       	cpc	r25, r1
    2698:	d9 f4       	brne	.+54     	; 0x26d0 <facing+0x94>
	{
		l=f=r=0;
    269a:	10 92 29 03 	sts	0x0329, r1
    269e:	10 92 28 03 	sts	0x0328, r1
    26a2:	80 91 28 03 	lds	r24, 0x0328
    26a6:	90 91 29 03 	lds	r25, 0x0329
    26aa:	90 93 01 02 	sts	0x0201, r25
    26ae:	80 93 00 02 	sts	0x0200, r24
    26b2:	80 91 00 02 	lds	r24, 0x0200
    26b6:	90 91 01 02 	lds	r25, 0x0201
    26ba:	90 93 2b 03 	sts	0x032B, r25
    26be:	80 93 2a 03 	sts	0x032A, r24
		b=1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	90 93 27 03 	sts	0x0327, r25
    26ca:	80 93 26 03 	sts	0x0326, r24
    26ce:	49 c0       	rjmp	.+146    	; 0x2762 <facing+0x126>
	}
	else if(a%4==1) // facing right
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	24 e0       	ldi	r18, 0x04	; 4
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	b9 01       	movw	r22, r18
    26da:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	d9 f4       	brne	.+54     	; 0x271a <facing+0xde>
	{
		r=1;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	90 93 29 03 	sts	0x0329, r25
    26ec:	80 93 28 03 	sts	0x0328, r24
		f=b=l=0;
    26f0:	10 92 2b 03 	sts	0x032B, r1
    26f4:	10 92 2a 03 	sts	0x032A, r1
    26f8:	80 91 2a 03 	lds	r24, 0x032A
    26fc:	90 91 2b 03 	lds	r25, 0x032B
    2700:	90 93 27 03 	sts	0x0327, r25
    2704:	80 93 26 03 	sts	0x0326, r24
    2708:	80 91 26 03 	lds	r24, 0x0326
    270c:	90 91 27 03 	lds	r25, 0x0327
    2710:	90 93 01 02 	sts	0x0201, r25
    2714:	80 93 00 02 	sts	0x0200, r24
    2718:	24 c0       	rjmp	.+72     	; 0x2762 <facing+0x126>
	}
	else if(a%4==3) // facing left
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	24 e0       	ldi	r18, 0x04	; 4
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	b9 01       	movw	r22, r18
    2724:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    2728:	83 30       	cpi	r24, 0x03	; 3
    272a:	91 05       	cpc	r25, r1
    272c:	d1 f4       	brne	.+52     	; 0x2762 <facing+0x126>
	{
		l=1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	90 93 2b 03 	sts	0x032B, r25
    2736:	80 93 2a 03 	sts	0x032A, r24
		f=b=r=0;
    273a:	10 92 29 03 	sts	0x0329, r1
    273e:	10 92 28 03 	sts	0x0328, r1
    2742:	80 91 28 03 	lds	r24, 0x0328
    2746:	90 91 29 03 	lds	r25, 0x0329
    274a:	90 93 27 03 	sts	0x0327, r25
    274e:	80 93 26 03 	sts	0x0326, r24
    2752:	80 91 26 03 	lds	r24, 0x0326
    2756:	90 91 27 03 	lds	r25, 0x0327
    275a:	90 93 01 02 	sts	0x0201, r25
    275e:	80 93 00 02 	sts	0x0200, r24
	}
	return;
}
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <path>:


/* Move the robot from source(x,y) to destination (rx,ry)*/
void path(int x,int y,int rx,int ry)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	28 97       	sbiw	r28, 0x08	; 8
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	7c 83       	std	Y+4, r23	; 0x04
    2786:	6b 83       	std	Y+3, r22	; 0x03
    2788:	5e 83       	std	Y+6, r21	; 0x06
    278a:	4d 83       	std	Y+5, r20	; 0x05
    278c:	38 87       	std	Y+8, r19	; 0x08
    278e:	2f 83       	std	Y+7, r18	; 0x07
	/*
	Function Name: path
	Input: x,y,rx,ry
	Output: None
	*/
	if(b==1) // Swap the direction flags if robot is facing backward
    2790:	80 91 26 03 	lds	r24, 0x0326
    2794:	90 91 27 03 	lds	r25, 0x0327
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	91 05       	cpc	r25, r1
    279c:	c1 f4       	brne	.+48     	; 0x27ce <path+0x62>
	{
		p=r;r=l;l=p;
    279e:	80 91 28 03 	lds	r24, 0x0328
    27a2:	90 91 29 03 	lds	r25, 0x0329
    27a6:	90 93 2d 03 	sts	0x032D, r25
    27aa:	80 93 2c 03 	sts	0x032C, r24
    27ae:	80 91 2a 03 	lds	r24, 0x032A
    27b2:	90 91 2b 03 	lds	r25, 0x032B
    27b6:	90 93 29 03 	sts	0x0329, r25
    27ba:	80 93 28 03 	sts	0x0328, r24
    27be:	80 91 2c 03 	lds	r24, 0x032C
    27c2:	90 91 2d 03 	lds	r25, 0x032D
    27c6:	90 93 2b 03 	sts	0x032B, r25
    27ca:	80 93 2a 03 	sts	0x032A, r24
	}		
	if(x==rx) // If destination has the same x-coordinate as source
    27ce:	29 81       	ldd	r18, Y+1	; 0x01
    27d0:	3a 81       	ldd	r19, Y+2	; 0x02
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	28 17       	cp	r18, r24
    27d8:	39 07       	cpc	r19, r25
    27da:	09 f0       	breq	.+2      	; 0x27de <path+0x72>
    27dc:	85 c0       	rjmp	.+266    	; 0x28e8 <path+0x17c>
	{
		if(ry>y) // If destination y-coordinate is greater than source
    27de:	2f 81       	ldd	r18, Y+7	; 0x07
    27e0:	38 85       	ldd	r19, Y+8	; 0x08
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	82 17       	cp	r24, r18
    27e8:	93 07       	cpc	r25, r19
    27ea:	dc f5       	brge	.+118    	; 0x2862 <path+0xf6>
		{
			/* Turn the robot along y-direction */
			if(r==1 || l==1) 
    27ec:	80 91 28 03 	lds	r24, 0x0328
    27f0:	90 91 29 03 	lds	r25, 0x0329
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	91 05       	cpc	r25, r1
    27f8:	39 f0       	breq	.+14     	; 0x2808 <path+0x9c>
    27fa:	80 91 2a 03 	lds	r24, 0x032A
    27fe:	90 91 2b 03 	lds	r25, 0x032B
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	91 05       	cpc	r25, r1
    2806:	89 f4       	brne	.+34     	; 0x282a <path+0xbe>
			{
				a=turn(l);
    2808:	80 91 2a 03 	lds	r24, 0x032A
    280c:	90 91 2b 03 	lds	r25, 0x032B
    2810:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    2814:	90 93 03 02 	sts	0x0203, r25
    2818:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    281c:	80 91 02 02 	lds	r24, 0x0202
    2820:	90 91 03 02 	lds	r25, 0x0203
    2824:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
    2828:	13 c0       	rjmp	.+38     	; 0x2850 <path+0xe4>
			}
			else if(b==1) 
    282a:	80 91 26 03 	lds	r24, 0x0326
    282e:	90 91 27 03 	lds	r25, 0x0327
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	91 05       	cpc	r25, r1
    2836:	61 f4       	brne	.+24     	; 0x2850 <path+0xe4>
			{
				a=turn_180();
    2838:	0e 94 0d 11 	call	0x221a	; 0x221a <turn_180>
    283c:	90 93 03 02 	sts	0x0203, r25
    2840:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2844:	80 91 02 02 	lds	r24, 0x0202
    2848:	90 91 03 02 	lds	r25, 0x0203
    284c:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
			}
			
			// Move straight for ry-y nodes
			straight(ry-y);
    2850:	8f 81       	ldd	r24, Y+7	; 0x07
    2852:	98 85       	ldd	r25, Y+8	; 0x08
    2854:	2b 81       	ldd	r18, Y+3	; 0x03
    2856:	3c 81       	ldd	r19, Y+4	; 0x04
    2858:	82 1b       	sub	r24, r18
    285a:	93 0b       	sbc	r25, r19
    285c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <straight>
    2860:	d8 c0       	rjmp	.+432    	; 0x2a12 <path+0x2a6>
		}
		else if(ry<y) // If destination y-coordinate is lesser than source
    2862:	2f 81       	ldd	r18, Y+7	; 0x07
    2864:	38 85       	ldd	r19, Y+8	; 0x08
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	28 17       	cp	r18, r24
    286c:	39 07       	cpc	r19, r25
    286e:	0c f0       	brlt	.+2      	; 0x2872 <path+0x106>
    2870:	d0 c0       	rjmp	.+416    	; 0x2a12 <path+0x2a6>
		{
			/* Turn the robot along y-direction */
			if(r==1 || l==1)
    2872:	80 91 28 03 	lds	r24, 0x0328
    2876:	90 91 29 03 	lds	r25, 0x0329
    287a:	81 30       	cpi	r24, 0x01	; 1
    287c:	91 05       	cpc	r25, r1
    287e:	39 f0       	breq	.+14     	; 0x288e <path+0x122>
    2880:	80 91 2a 03 	lds	r24, 0x032A
    2884:	90 91 2b 03 	lds	r25, 0x032B
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	89 f4       	brne	.+34     	; 0x28b0 <path+0x144>
			{
				a=turn(r);
    288e:	80 91 28 03 	lds	r24, 0x0328
    2892:	90 91 29 03 	lds	r25, 0x0329
    2896:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    289a:	90 93 03 02 	sts	0x0203, r25
    289e:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    28a2:	80 91 02 02 	lds	r24, 0x0202
    28a6:	90 91 03 02 	lds	r25, 0x0203
    28aa:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
    28ae:	13 c0       	rjmp	.+38     	; 0x28d6 <path+0x16a>
			}
			else if(f==1)
    28b0:	80 91 00 02 	lds	r24, 0x0200
    28b4:	90 91 01 02 	lds	r25, 0x0201
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	91 05       	cpc	r25, r1
    28bc:	61 f4       	brne	.+24     	; 0x28d6 <path+0x16a>
			{
				a=turn_180();
    28be:	0e 94 0d 11 	call	0x221a	; 0x221a <turn_180>
    28c2:	90 93 03 02 	sts	0x0203, r25
    28c6:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    28ca:	80 91 02 02 	lds	r24, 0x0202
    28ce:	90 91 03 02 	lds	r25, 0x0203
    28d2:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
			}
			
			// Move straight for y-ry nodes
			straight(y-ry);
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	2f 81       	ldd	r18, Y+7	; 0x07
    28dc:	38 85       	ldd	r19, Y+8	; 0x08
    28de:	82 1b       	sub	r24, r18
    28e0:	93 0b       	sbc	r25, r19
    28e2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <straight>
    28e6:	95 c0       	rjmp	.+298    	; 0x2a12 <path+0x2a6>
		}
	}
	else if(rx>x) // If destination x-coordinate is greater than source
    28e8:	2d 81       	ldd	r18, Y+5	; 0x05
    28ea:	3e 81       	ldd	r19, Y+6	; 0x06
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	82 17       	cp	r24, r18
    28f2:	93 07       	cpc	r25, r19
    28f4:	0c f0       	brlt	.+2      	; 0x28f8 <path+0x18c>
    28f6:	47 c0       	rjmp	.+142    	; 0x2986 <path+0x21a>
	{
		/* Turn the robot along x direction */
		if(r==0 && l==0)
    28f8:	80 91 28 03 	lds	r24, 0x0328
    28fc:	90 91 29 03 	lds	r25, 0x0329
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	b9 f4       	brne	.+46     	; 0x2932 <path+0x1c6>
    2904:	80 91 2a 03 	lds	r24, 0x032A
    2908:	90 91 2b 03 	lds	r25, 0x032B
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	89 f4       	brne	.+34     	; 0x2932 <path+0x1c6>
		{
			a=turn(f);
    2910:	80 91 00 02 	lds	r24, 0x0200
    2914:	90 91 01 02 	lds	r25, 0x0201
    2918:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    291c:	90 93 03 02 	sts	0x0203, r25
    2920:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    2924:	80 91 02 02 	lds	r24, 0x0202
    2928:	90 91 03 02 	lds	r25, 0x0203
    292c:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
    2930:	13 c0       	rjmp	.+38     	; 0x2958 <path+0x1ec>
		}
		else if(l==1)
    2932:	80 91 2a 03 	lds	r24, 0x032A
    2936:	90 91 2b 03 	lds	r25, 0x032B
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	91 05       	cpc	r25, r1
    293e:	61 f4       	brne	.+24     	; 0x2958 <path+0x1ec>
		{
			a=turn_180();
    2940:	0e 94 0d 11 	call	0x221a	; 0x221a <turn_180>
    2944:	90 93 03 02 	sts	0x0203, r25
    2948:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    294c:	80 91 02 02 	lds	r24, 0x0202
    2950:	90 91 03 02 	lds	r25, 0x0203
    2954:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
		}
		
		// Move straight for rx-x nodes
		straight(rx-x);
    2958:	2d 81       	ldd	r18, Y+5	; 0x05
    295a:	3e 81       	ldd	r19, Y+6	; 0x06
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	a9 01       	movw	r20, r18
    2962:	48 1b       	sub	r20, r24
    2964:	59 0b       	sbc	r21, r25
    2966:	ca 01       	movw	r24, r20
    2968:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <straight>
		// Recursively call the path function
		path(rx,y,rx,ry);
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	2b 81       	ldd	r18, Y+3	; 0x03
    2972:	3c 81       	ldd	r19, Y+4	; 0x04
    2974:	4d 81       	ldd	r20, Y+5	; 0x05
    2976:	5e 81       	ldd	r21, Y+6	; 0x06
    2978:	ef 81       	ldd	r30, Y+7	; 0x07
    297a:	f8 85       	ldd	r31, Y+8	; 0x08
    297c:	b9 01       	movw	r22, r18
    297e:	9f 01       	movw	r18, r30
    2980:	0e 94 b6 13 	call	0x276c	; 0x276c <path>
    2984:	46 c0       	rjmp	.+140    	; 0x2a12 <path+0x2a6>
	}
	else // If destination x-coordinate is lesser than source
	{
		/* Turn the robot along x direction */
		if(r==0 && l==0)
    2986:	80 91 28 03 	lds	r24, 0x0328
    298a:	90 91 29 03 	lds	r25, 0x0329
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	b9 f4       	brne	.+46     	; 0x29c0 <path+0x254>
    2992:	80 91 2a 03 	lds	r24, 0x032A
    2996:	90 91 2b 03 	lds	r25, 0x032B
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	89 f4       	brne	.+34     	; 0x29c0 <path+0x254>
		{
			a=turn(b);
    299e:	80 91 26 03 	lds	r24, 0x0326
    29a2:	90 91 27 03 	lds	r25, 0x0327
    29a6:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    29aa:	90 93 03 02 	sts	0x0203, r25
    29ae:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    29b2:	80 91 02 02 	lds	r24, 0x0202
    29b6:	90 91 03 02 	lds	r25, 0x0203
    29ba:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
    29be:	13 c0       	rjmp	.+38     	; 0x29e6 <path+0x27a>
		}
		else if(r==1)
    29c0:	80 91 28 03 	lds	r24, 0x0328
    29c4:	90 91 29 03 	lds	r25, 0x0329
    29c8:	81 30       	cpi	r24, 0x01	; 1
    29ca:	91 05       	cpc	r25, r1
    29cc:	61 f4       	brne	.+24     	; 0x29e6 <path+0x27a>
		{
			a=turn_180();
    29ce:	0e 94 0d 11 	call	0x221a	; 0x221a <turn_180>
    29d2:	90 93 03 02 	sts	0x0203, r25
    29d6:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    29da:	80 91 02 02 	lds	r24, 0x0202
    29de:	90 91 03 02 	lds	r25, 0x0203
    29e2:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
		}
		
		// Move straight for x-rx nodes
		straight(x-rx);
    29e6:	29 81       	ldd	r18, Y+1	; 0x01
    29e8:	3a 81       	ldd	r19, Y+2	; 0x02
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	a9 01       	movw	r20, r18
    29f0:	48 1b       	sub	r20, r24
    29f2:	59 0b       	sbc	r21, r25
    29f4:	ca 01       	movw	r24, r20
    29f6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <straight>
		// Recursively call the path function
		path(rx,y,rx,ry);
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2a00:	3c 81       	ldd	r19, Y+4	; 0x04
    2a02:	4d 81       	ldd	r20, Y+5	; 0x05
    2a04:	5e 81       	ldd	r21, Y+6	; 0x06
    2a06:	ef 81       	ldd	r30, Y+7	; 0x07
    2a08:	f8 85       	ldd	r31, Y+8	; 0x08
    2a0a:	b9 01       	movw	r22, r18
    2a0c:	9f 01       	movw	r18, r30
    2a0e:	0e 94 b6 13 	call	0x276c	; 0x276c <path>
	}
	return;
}
    2a12:	28 96       	adiw	r28, 0x08	; 8
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <habidrop>:


/* Function to place the animals at their respective habitats */
void habidrop(int n,int x,int y)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	2c 97       	sbiw	r28, 0x0c	; 12
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	98 87       	std	Y+8, r25	; 0x08
    2a3a:	8f 83       	std	Y+7, r24	; 0x07
    2a3c:	7a 87       	std	Y+10, r23	; 0x0a
    2a3e:	69 87       	std	Y+9, r22	; 0x09
    2a40:	5c 87       	std	Y+12, r21	; 0x0c
    2a42:	4b 87       	std	Y+11, r20	; 0x0b
	/*
	Function Name: Habidrop
	Input: n,x,y
	Output: None
	*/
	int x11=n%5;
    2a44:	8f 81       	ldd	r24, Y+7	; 0x07
    2a46:	98 85       	ldd	r25, Y+8	; 0x08
    2a48:	25 e0       	ldi	r18, 0x05	; 5
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	b9 01       	movw	r22, r18
    2a4e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
	int y11=n/5;
    2a56:	8f 81       	ldd	r24, Y+7	; 0x07
    2a58:	98 85       	ldd	r25, Y+8	; 0x08
    2a5a:	25 e0       	ldi	r18, 0x05	; 5
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	b9 01       	movw	r22, r18
    2a60:	0e 94 54 33 	call	0x66a8	; 0x66a8 <__divmodhi4>
    2a64:	cb 01       	movw	r24, r22
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
	int node=0;
    2a6a:	1a 82       	std	Y+2, r1	; 0x02
    2a6c:	19 82       	std	Y+1, r1	; 0x01
	if(x==x11)
    2a6e:	29 85       	ldd	r18, Y+9	; 0x09
    2a70:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	28 17       	cp	r18, r24
    2a78:	39 07       	cpc	r19, r25
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <habidrop+0x5a>
    2a7c:	7b c0       	rjmp	.+246    	; 0x2b74 <habidrop+0x150>
	{
		if(y==y11) // Nearest node is bottom left corner of habitat
    2a7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a80:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	28 17       	cp	r18, r24
    2a88:	39 07       	cpc	r19, r25
    2a8a:	d1 f5       	brne	.+116    	; 0x2b00 <habidrop+0xdc>
		{
			node=1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
			
			/* Turn the robot towards the habitat */
			if(f==1)
    2a94:	80 91 00 02 	lds	r24, 0x0200
    2a98:	90 91 01 02 	lds	r25, 0x0201
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	39 f4       	brne	.+14     	; 0x2ab0 <habidrop+0x8c>
				semiturn(f);
    2aa2:	80 91 00 02 	lds	r24, 0x0200
    2aa6:	90 91 01 02 	lds	r25, 0x0201
    2aaa:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2aae:	dc c0       	rjmp	.+440    	; 0x2c68 <habidrop+0x244>
			else if(r==1)
    2ab0:	80 91 28 03 	lds	r24, 0x0328
    2ab4:	90 91 29 03 	lds	r25, 0x0329
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	91 05       	cpc	r25, r1
    2abc:	39 f4       	brne	.+14     	; 0x2acc <habidrop+0xa8>
				semiturn(l);
    2abe:	80 91 2a 03 	lds	r24, 0x032A
    2ac2:	90 91 2b 03 	lds	r25, 0x032B
    2ac6:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2aca:	ce c0       	rjmp	.+412    	; 0x2c68 <habidrop+0x244>
			else
			{
				a=turn(l);
    2acc:	80 91 2a 03 	lds	r24, 0x032A
    2ad0:	90 91 2b 03 	lds	r25, 0x032B
    2ad4:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    2ad8:	90 93 03 02 	sts	0x0203, r25
    2adc:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2ae0:	80 91 02 02 	lds	r24, 0x0202
    2ae4:	90 91 03 02 	lds	r25, 0x0203
    2ae8:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
				habidrop(n,x,y);
    2aec:	8f 81       	ldd	r24, Y+7	; 0x07
    2aee:	98 85       	ldd	r25, Y+8	; 0x08
    2af0:	29 85       	ldd	r18, Y+9	; 0x09
    2af2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2af4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2af6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2af8:	b9 01       	movw	r22, r18
    2afa:	0e 94 12 15 	call	0x2a24	; 0x2a24 <habidrop>
    2afe:	b4 c0       	rjmp	.+360    	; 0x2c68 <habidrop+0x244>
			}
		}
		else // Nearest node is top-left corner of habitat
		{
			node=4;
    2b00:	84 e0       	ldi	r24, 0x04	; 4
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
			
			/* Turn the robot towards the habitat */
			if(b==1)
    2b08:	80 91 26 03 	lds	r24, 0x0326
    2b0c:	90 91 27 03 	lds	r25, 0x0327
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	91 05       	cpc	r25, r1
    2b14:	39 f4       	brne	.+14     	; 0x2b24 <habidrop+0x100>
				semiturn(f);
    2b16:	80 91 00 02 	lds	r24, 0x0200
    2b1a:	90 91 01 02 	lds	r25, 0x0201
    2b1e:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2b22:	a2 c0       	rjmp	.+324    	; 0x2c68 <habidrop+0x244>
			else if(r==1)
    2b24:	80 91 28 03 	lds	r24, 0x0328
    2b28:	90 91 29 03 	lds	r25, 0x0329
    2b2c:	81 30       	cpi	r24, 0x01	; 1
    2b2e:	91 05       	cpc	r25, r1
    2b30:	39 f4       	brne	.+14     	; 0x2b40 <habidrop+0x11c>
				semiturn(r);
    2b32:	80 91 28 03 	lds	r24, 0x0328
    2b36:	90 91 29 03 	lds	r25, 0x0329
    2b3a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2b3e:	94 c0       	rjmp	.+296    	; 0x2c68 <habidrop+0x244>
			else
			{
				a=turn(r);
    2b40:	80 91 28 03 	lds	r24, 0x0328
    2b44:	90 91 29 03 	lds	r25, 0x0329
    2b48:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    2b4c:	90 93 03 02 	sts	0x0203, r25
    2b50:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2b54:	80 91 02 02 	lds	r24, 0x0202
    2b58:	90 91 03 02 	lds	r25, 0x0203
    2b5c:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
				habidrop(n,x,y);
    2b60:	8f 81       	ldd	r24, Y+7	; 0x07
    2b62:	98 85       	ldd	r25, Y+8	; 0x08
    2b64:	29 85       	ldd	r18, Y+9	; 0x09
    2b66:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b68:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <habidrop>
    2b72:	7a c0       	rjmp	.+244    	; 0x2c68 <habidrop+0x244>
			}
		}
	}
	else
	{
		if(y==y11) // Nearest node is at bottom-right corner of habitat
    2b74:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b76:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	28 17       	cp	r18, r24
    2b7e:	39 07       	cpc	r19, r25
    2b80:	d1 f5       	brne	.+116    	; 0x2bf6 <habidrop+0x1d2>
		{
			node=2;
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
			
			/* Turn the robot towards the habitat */
			if(l==1)
    2b8a:	80 91 2a 03 	lds	r24, 0x032A
    2b8e:	90 91 2b 03 	lds	r25, 0x032B
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	39 f4       	brne	.+14     	; 0x2ba6 <habidrop+0x182>
				semiturn(l);
    2b98:	80 91 2a 03 	lds	r24, 0x032A
    2b9c:	90 91 2b 03 	lds	r25, 0x032B
    2ba0:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2ba4:	61 c0       	rjmp	.+194    	; 0x2c68 <habidrop+0x244>
			else if(f==1)
    2ba6:	80 91 00 02 	lds	r24, 0x0200
    2baa:	90 91 01 02 	lds	r25, 0x0201
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	39 f4       	brne	.+14     	; 0x2bc2 <habidrop+0x19e>
				semiturn(b);
    2bb4:	80 91 26 03 	lds	r24, 0x0326
    2bb8:	90 91 27 03 	lds	r25, 0x0327
    2bbc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2bc0:	53 c0       	rjmp	.+166    	; 0x2c68 <habidrop+0x244>
			else
			{
				a=turn(b);
    2bc2:	80 91 26 03 	lds	r24, 0x0326
    2bc6:	90 91 27 03 	lds	r25, 0x0327
    2bca:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    2bce:	90 93 03 02 	sts	0x0203, r25
    2bd2:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2bd6:	80 91 02 02 	lds	r24, 0x0202
    2bda:	90 91 03 02 	lds	r25, 0x0203
    2bde:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
				habidrop(n,x,y);
    2be2:	8f 81       	ldd	r24, Y+7	; 0x07
    2be4:	98 85       	ldd	r25, Y+8	; 0x08
    2be6:	29 85       	ldd	r18, Y+9	; 0x09
    2be8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bea:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bec:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bee:	b9 01       	movw	r22, r18
    2bf0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <habidrop>
    2bf4:	39 c0       	rjmp	.+114    	; 0x2c68 <habidrop+0x244>
			}
		}
		else // Nearest node is at top-right corner of habitat
		{
			node=3;
    2bf6:	83 e0       	ldi	r24, 0x03	; 3
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	89 83       	std	Y+1, r24	; 0x01
			
			/* Turn the robot towards the habitat */
			if(b==1)
    2bfe:	80 91 26 03 	lds	r24, 0x0326
    2c02:	90 91 27 03 	lds	r25, 0x0327
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	91 05       	cpc	r25, r1
    2c0a:	39 f4       	brne	.+14     	; 0x2c1a <habidrop+0x1f6>
				semiturn(b);
    2c0c:	80 91 26 03 	lds	r24, 0x0326
    2c10:	90 91 27 03 	lds	r25, 0x0327
    2c14:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2c18:	27 c0       	rjmp	.+78     	; 0x2c68 <habidrop+0x244>
			else if(l==1)
    2c1a:	80 91 2a 03 	lds	r24, 0x032A
    2c1e:	90 91 2b 03 	lds	r25, 0x032B
    2c22:	81 30       	cpi	r24, 0x01	; 1
    2c24:	91 05       	cpc	r25, r1
    2c26:	39 f4       	brne	.+14     	; 0x2c36 <habidrop+0x212>
				semiturn(r);
    2c28:	80 91 28 03 	lds	r24, 0x0328
    2c2c:	90 91 29 03 	lds	r25, 0x0329
    2c30:	0e 94 a3 1a 	call	0x3546	; 0x3546 <semiturn>
    2c34:	19 c0       	rjmp	.+50     	; 0x2c68 <habidrop+0x244>
			else
			{
				a=turn(b);
    2c36:	80 91 26 03 	lds	r24, 0x0326
    2c3a:	90 91 27 03 	lds	r25, 0x0327
    2c3e:	0e 94 c8 11 	call	0x2390	; 0x2390 <turn>
    2c42:	90 93 03 02 	sts	0x0203, r25
    2c46:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2c4a:	80 91 02 02 	lds	r24, 0x0202
    2c4e:	90 91 03 02 	lds	r25, 0x0203
    2c52:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
				habidrop(n,x,y);
    2c56:	8f 81       	ldd	r24, Y+7	; 0x07
    2c58:	98 85       	ldd	r25, Y+8	; 0x08
    2c5a:	29 85       	ldd	r18, Y+9	; 0x09
    2c5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c60:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c62:	b9 01       	movw	r22, r18
    2c64:	0e 94 12 15 	call	0x2a24	; 0x2a24 <habidrop>
			}
		}
	}
	return;
}
    2c68:	2c 96       	adiw	r28, 0x0c	; 12
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <turnsoft>:

/* Function to perform soft turns(keeping one wheel stationary and other wheel backward) */
int turnsoft(int f)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	6e 97       	sbiw	r28, 0x1e	; 30
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c90:	8d 8f       	std	Y+29, r24	; 0x1d
	/*
	Function Name: turnsoft
	Input: f
	Output: a
	*/
	init_devices();
    2c92:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	forward_mm(140);
    2c96:	8c e8       	ldi	r24, 0x8C	; 140
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
	stop();
    2c9e:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	a8 ec       	ldi	r26, 0xC8	; 200
    2ca8:	b2 e4       	ldi	r27, 0x42	; 66
    2caa:	89 8f       	std	Y+25, r24	; 0x19
    2cac:	9a 8f       	std	Y+26, r25	; 0x1a
    2cae:	ab 8f       	std	Y+27, r26	; 0x1b
    2cb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cba:	26 e6       	ldi	r18, 0x66	; 102
    2cbc:	36 e6       	ldi	r19, 0x66	; 102
    2cbe:	46 e6       	ldi	r20, 0x66	; 102
    2cc0:	55 e4       	ldi	r21, 0x45	; 69
    2cc2:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8d 8b       	std	Y+21, r24	; 0x15
    2ccc:	9e 8b       	std	Y+22, r25	; 0x16
    2cce:	af 8b       	std	Y+23, r26	; 0x17
    2cd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e8       	ldi	r20, 0x80	; 128
    2ce0:	5f e3       	ldi	r21, 0x3F	; 63
    2ce2:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    2ce6:	88 23       	and	r24, r24
    2ce8:	2c f4       	brge	.+10     	; 0x2cf4 <turnsoft+0x7a>
		__ticks = 1;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
    2cf2:	3f c0       	rjmp	.+126    	; 0x2d72 <turnsoft+0xf8>
	else if (__tmp > 65535)
    2cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	3f ef       	ldi	r19, 0xFF	; 255
    2d00:	4f e7       	ldi	r20, 0x7F	; 127
    2d02:	57 e4       	ldi	r21, 0x47	; 71
    2d04:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    2d08:	18 16       	cp	r1, r24
    2d0a:	4c f5       	brge	.+82     	; 0x2d5e <turnsoft+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e2       	ldi	r20, 0x20	; 32
    2d1a:	51 e4       	ldi	r21, 0x41	; 65
    2d1c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
    2d34:	0f c0       	rjmp	.+30     	; 0x2d54 <turnsoft+0xda>
    2d36:	80 e7       	ldi	r24, 0x70	; 112
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	9a 8b       	std	Y+18, r25	; 0x12
    2d3c:	89 8b       	std	Y+17, r24	; 0x11
    2d3e:	89 89       	ldd	r24, Y+17	; 0x11
    2d40:	9a 89       	ldd	r25, Y+18	; 0x12
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <turnsoft+0xc8>
    2d46:	9a 8b       	std	Y+18, r25	; 0x12
    2d48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	9c 8b       	std	Y+20, r25	; 0x14
    2d52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	69 f7       	brne	.-38     	; 0x2d36 <turnsoft+0xbc>
    2d5c:	14 c0       	rjmp	.+40     	; 0x2d86 <turnsoft+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d60:	7e 89       	ldd	r23, Y+22	; 0x16
    2d62:	8f 89       	ldd	r24, Y+23	; 0x17
    2d64:	98 8d       	ldd	r25, Y+24	; 0x18
    2d66:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9c 8b       	std	Y+20, r25	; 0x14
    2d70:	8b 8b       	std	Y+19, r24	; 0x13
    2d72:	8b 89       	ldd	r24, Y+19	; 0x13
    2d74:	9c 89       	ldd	r25, Y+20	; 0x14
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    2d78:	8f 87       	std	Y+15, r24	; 0x0f
    2d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d7c:	98 89       	ldd	r25, Y+16	; 0x10
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <turnsoft+0x104>
    2d82:	98 8b       	std	Y+16, r25	; 0x10
    2d84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	if(f==1) // Soft right
    2d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d8a:	81 30       	cpi	r24, 0x01	; 1
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	e1 f4       	brne	.+56     	; 0x2dc8 <turnsoft+0x14e>
	{
		soft_right_2_degrees(65);
    2d90:	81 e4       	ldi	r24, 0x41	; 65
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <soft_right_2_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    2d98:	82 e0       	ldi	r24, 0x02	; 2
    2d9a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    2d9e:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x0a)
    2da2:	80 91 18 03 	lds	r24, 0x0318
    2da6:	8a 30       	cpi	r24, 0x0A	; 10
    2da8:	28 f4       	brcc	.+10     	; 0x2db4 <turnsoft+0x13a>
				soft_right_2_degrees(3);
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <soft_right_2_degrees>
    2db2:	f2 cf       	rjmp	.-28     	; 0x2d98 <turnsoft+0x11e>
			else
				break;
		}
		a++;
    2db4:	80 91 02 02 	lds	r24, 0x0202
    2db8:	90 91 03 02 	lds	r25, 0x0203
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	90 93 03 02 	sts	0x0203, r25
    2dc2:	80 93 02 02 	sts	0x0202, r24
    2dc6:	1b c0       	rjmp	.+54     	; 0x2dfe <turnsoft+0x184>
	}
	else // Soft left
	{
		soft_left_2_degrees(65);
    2dc8:	81 e4       	ldi	r24, 0x41	; 65
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <soft_left_2_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    2dd6:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x0a)
    2dda:	80 91 18 03 	lds	r24, 0x0318
    2dde:	8a 30       	cpi	r24, 0x0A	; 10
    2de0:	28 f4       	brcc	.+10     	; 0x2dec <turnsoft+0x172>
				soft_left_2_degrees(3);
    2de2:	83 e0       	ldi	r24, 0x03	; 3
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <soft_left_2_degrees>
    2dea:	f2 cf       	rjmp	.-28     	; 0x2dd0 <turnsoft+0x156>
			else
				break;
		}
		a--;
    2dec:	80 91 02 02 	lds	r24, 0x0202
    2df0:	90 91 03 02 	lds	r25, 0x0203
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	90 93 03 02 	sts	0x0203, r25
    2dfa:	80 93 02 02 	sts	0x0202, r24
	}
	stop();
    2dfe:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a8 ec       	ldi	r26, 0xC8	; 200
    2e08:	b2 e4       	ldi	r27, 0x42	; 66
    2e0a:	8b 87       	std	Y+11, r24	; 0x0b
    2e0c:	9c 87       	std	Y+12, r25	; 0x0c
    2e0e:	ad 87       	std	Y+13, r26	; 0x0d
    2e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1a:	26 e6       	ldi	r18, 0x66	; 102
    2e1c:	36 e6       	ldi	r19, 0x66	; 102
    2e1e:	46 e6       	ldi	r20, 0x66	; 102
    2e20:	55 e4       	ldi	r21, 0x45	; 69
    2e22:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8f 83       	std	Y+7, r24	; 0x07
    2e2c:	98 87       	std	Y+8, r25	; 0x08
    2e2e:	a9 87       	std	Y+9, r26	; 0x09
    2e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <turnsoft+0x1da>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <turnsoft+0x258>
	else if (__tmp > 65535)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <turnsoft+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <turnsoft+0x23a>
    2e96:	80 e7       	ldi	r24, 0x70	; 112
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8b 83       	std	Y+3, r24	; 0x03
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <turnsoft+0x228>
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <turnsoft+0x21c>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <turnsoft+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <turnsoft+0x264>
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	
	// Update the direction reference and return it
	if(a==8||a==0)
    2ee6:	80 91 02 02 	lds	r24, 0x0202
    2eea:	90 91 03 02 	lds	r25, 0x0203
    2eee:	88 30       	cpi	r24, 0x08	; 8
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	31 f0       	breq	.+12     	; 0x2f00 <turnsoft+0x286>
    2ef4:	80 91 02 02 	lds	r24, 0x0202
    2ef8:	90 91 03 02 	lds	r25, 0x0203
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	31 f4       	brne	.+12     	; 0x2f0c <turnsoft+0x292>
		a=4;
    2f00:	84 e0       	ldi	r24, 0x04	; 4
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	90 93 03 02 	sts	0x0203, r25
    2f08:	80 93 02 02 	sts	0x0202, r24
	return a;
    2f0c:	80 91 02 02 	lds	r24, 0x0202
    2f10:	90 91 03 02 	lds	r25, 0x0203
}
    2f14:	6e 96       	adiw	r28, 0x1e	; 30
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <anipick>:

/* Function to pick the animals at given location (pos) */
void anipick(char* pos)
{   
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	ea 97       	sbiw	r28, 0x3a	; 58
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	9a af       	std	Y+58, r25	; 0x3a
    2f3c:	89 af       	std	Y+57, r24	; 0x39
	/*
	Function Name: anipick
	Input: pos
	Output: None
	*/
	if(pos[0]=='A') // If animal is at left side of arena
    2f3e:	e9 ad       	ldd	r30, Y+57	; 0x39
    2f40:	fa ad       	ldd	r31, Y+58	; 0x3a
    2f42:	80 81       	ld	r24, Z
    2f44:	81 34       	cpi	r24, 0x41	; 65
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <anipick+0x24>
    2f48:	3f c1       	rjmp	.+638    	; 0x31c8 <anipick+0x2a2>
	{
		if(b==1 || f==1)
    2f4a:	80 91 26 03 	lds	r24, 0x0326
    2f4e:	90 91 27 03 	lds	r25, 0x0327
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	91 05       	cpc	r25, r1
    2f56:	41 f0       	breq	.+16     	; 0x2f68 <anipick+0x42>
    2f58:	80 91 00 02 	lds	r24, 0x0200
    2f5c:	90 91 01 02 	lds	r25, 0x0201
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	91 05       	cpc	r25, r1
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <anipick+0x42>
    2f66:	2d c1       	rjmp	.+602    	; 0x31c2 <anipick+0x29c>
		{
			a=turnsoft(b);
    2f68:	80 91 26 03 	lds	r24, 0x0326
    2f6c:	90 91 27 03 	lds	r25, 0x0327
    2f70:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <turnsoft>
    2f74:	90 93 03 02 	sts	0x0203, r25
    2f78:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    2f7c:	80 91 02 02 	lds	r24, 0x0202
    2f80:	90 91 03 02 	lds	r25, 0x0203
    2f84:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
			/* Handling corner cases */
			if(pos[1]=='6')
    2f88:	89 ad       	ldd	r24, Y+57	; 0x39
    2f8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	31 96       	adiw	r30, 0x01	; 1
    2f90:	80 81       	ld	r24, Z
    2f92:	86 33       	cpi	r24, 0x36	; 54
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <anipick+0x72>
    2f96:	83 c0       	rjmp	.+262    	; 0x309e <anipick+0x178>
			{
				soft_right_2_degrees(15);
    2f98:	8f e0       	ldi	r24, 0x0F	; 15
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <soft_right_2_degrees>
				forward_mm(50);
    2fa0:	82 e3       	ldi	r24, 0x32	; 50
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
				pick();
    2fa8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
				back_mm(35);
    2fac:	83 e2       	ldi	r24, 0x23	; 35
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <back_mm>
				stop();
    2fb4:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a8 ec       	ldi	r26, 0xC8	; 200
    2fbe:	b2 e4       	ldi	r27, 0x42	; 66
    2fc0:	8d ab       	std	Y+53, r24	; 0x35
    2fc2:	9e ab       	std	Y+54, r25	; 0x36
    2fc4:	af ab       	std	Y+55, r26	; 0x37
    2fc6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	6d a9       	ldd	r22, Y+53	; 0x35
    2fca:	7e a9       	ldd	r23, Y+54	; 0x36
    2fcc:	8f a9       	ldd	r24, Y+55	; 0x37
    2fce:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd0:	26 e6       	ldi	r18, 0x66	; 102
    2fd2:	36 e6       	ldi	r19, 0x66	; 102
    2fd4:	46 e6       	ldi	r20, 0x66	; 102
    2fd6:	55 e4       	ldi	r21, 0x45	; 69
    2fd8:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	89 ab       	std	Y+49, r24	; 0x31
    2fe2:	9a ab       	std	Y+50, r25	; 0x32
    2fe4:	ab ab       	std	Y+51, r26	; 0x33
    2fe6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fe8:	69 a9       	ldd	r22, Y+49	; 0x31
    2fea:	7a a9       	ldd	r23, Y+50	; 0x32
    2fec:	8b a9       	ldd	r24, Y+51	; 0x33
    2fee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	2c f4       	brge	.+10     	; 0x300a <anipick+0xe4>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	98 ab       	std	Y+48, r25	; 0x30
    3006:	8f a7       	std	Y+47, r24	; 0x2f
    3008:	3f c0       	rjmp	.+126    	; 0x3088 <anipick+0x162>
	else if (__tmp > 65535)
    300a:	69 a9       	ldd	r22, Y+49	; 0x31
    300c:	7a a9       	ldd	r23, Y+50	; 0x32
    300e:	8b a9       	ldd	r24, Y+51	; 0x33
    3010:	9c a9       	ldd	r25, Y+52	; 0x34
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	4c f5       	brge	.+82     	; 0x3074 <anipick+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	6d a9       	ldd	r22, Y+53	; 0x35
    3024:	7e a9       	ldd	r23, Y+54	; 0x36
    3026:	8f a9       	ldd	r24, Y+55	; 0x37
    3028:	98 ad       	ldd	r25, Y+56	; 0x38
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	98 ab       	std	Y+48, r25	; 0x30
    3048:	8f a7       	std	Y+47, r24	; 0x2f
    304a:	0f c0       	rjmp	.+30     	; 0x306a <anipick+0x144>
    304c:	80 e7       	ldi	r24, 0x70	; 112
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	9e a7       	std	Y+46, r25	; 0x2e
    3052:	8d a7       	std	Y+45, r24	; 0x2d
    3054:	8d a5       	ldd	r24, Y+45	; 0x2d
    3056:	9e a5       	ldd	r25, Y+46	; 0x2e
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <anipick+0x132>
    305c:	9e a7       	std	Y+46, r25	; 0x2e
    305e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3060:	8f a5       	ldd	r24, Y+47	; 0x2f
    3062:	98 a9       	ldd	r25, Y+48	; 0x30
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	98 ab       	std	Y+48, r25	; 0x30
    3068:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	8f a5       	ldd	r24, Y+47	; 0x2f
    306c:	98 a9       	ldd	r25, Y+48	; 0x30
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	69 f7       	brne	.-38     	; 0x304c <anipick+0x126>
    3072:	60 c2       	rjmp	.+1216   	; 0x3534 <anipick+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	69 a9       	ldd	r22, Y+49	; 0x31
    3076:	7a a9       	ldd	r23, Y+50	; 0x32
    3078:	8b a9       	ldd	r24, Y+51	; 0x33
    307a:	9c a9       	ldd	r25, Y+52	; 0x34
    307c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	98 ab       	std	Y+48, r25	; 0x30
    3086:	8f a7       	std	Y+47, r24	; 0x2f
    3088:	8f a5       	ldd	r24, Y+47	; 0x2f
    308a:	98 a9       	ldd	r25, Y+48	; 0x30
    308c:	9c a7       	std	Y+44, r25	; 0x2c
    308e:	8b a7       	std	Y+43, r24	; 0x2b
    3090:	8b a5       	ldd	r24, Y+43	; 0x2b
    3092:	9c a5       	ldd	r25, Y+44	; 0x2c
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <anipick+0x16e>
    3098:	9c a7       	std	Y+44, r25	; 0x2c
    309a:	8b a7       	std	Y+43, r24	; 0x2b
    309c:	4b c2       	rjmp	.+1174   	; 0x3534 <anipick+0x60e>
				_delay_ms(100);
			}
			else if(pos[1]=='1')
    309e:	89 ad       	ldd	r24, Y+57	; 0x39
    30a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    30a2:	fc 01       	movw	r30, r24
    30a4:	31 96       	adiw	r30, 0x01	; 1
    30a6:	80 81       	ld	r24, Z
    30a8:	81 33       	cpi	r24, 0x31	; 49
    30aa:	09 f0       	breq	.+2      	; 0x30ae <anipick+0x188>
    30ac:	83 c0       	rjmp	.+262    	; 0x31b4 <anipick+0x28e>
			{
				soft_left_2_degrees(15);
    30ae:	8f e0       	ldi	r24, 0x0F	; 15
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <soft_left_2_degrees>
				forward_mm(50);
    30b6:	82 e3       	ldi	r24, 0x32	; 50
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
				pick();
    30be:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
				back_mm(35);
    30c2:	83 e2       	ldi	r24, 0x23	; 35
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <back_mm>
				stop();
    30ca:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a8 ec       	ldi	r26, 0xC8	; 200
    30d4:	b2 e4       	ldi	r27, 0x42	; 66
    30d6:	8f a3       	std	Y+39, r24	; 0x27
    30d8:	98 a7       	std	Y+40, r25	; 0x28
    30da:	a9 a7       	std	Y+41, r26	; 0x29
    30dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30de:	6f a1       	ldd	r22, Y+39	; 0x27
    30e0:	78 a5       	ldd	r23, Y+40	; 0x28
    30e2:	89 a5       	ldd	r24, Y+41	; 0x29
    30e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e6:	26 e6       	ldi	r18, 0x66	; 102
    30e8:	36 e6       	ldi	r19, 0x66	; 102
    30ea:	46 e6       	ldi	r20, 0x66	; 102
    30ec:	55 e4       	ldi	r21, 0x45	; 69
    30ee:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	8b a3       	std	Y+35, r24	; 0x23
    30f8:	9c a3       	std	Y+36, r25	; 0x24
    30fa:	ad a3       	std	Y+37, r26	; 0x25
    30fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3100:	7c a1       	ldd	r23, Y+36	; 0x24
    3102:	8d a1       	ldd	r24, Y+37	; 0x25
    3104:	9e a1       	ldd	r25, Y+38	; 0x26
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e8       	ldi	r20, 0x80	; 128
    310c:	5f e3       	ldi	r21, 0x3F	; 63
    310e:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    3112:	88 23       	and	r24, r24
    3114:	2c f4       	brge	.+10     	; 0x3120 <anipick+0x1fa>
		__ticks = 1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	9a a3       	std	Y+34, r25	; 0x22
    311c:	89 a3       	std	Y+33, r24	; 0x21
    311e:	3f c0       	rjmp	.+126    	; 0x319e <anipick+0x278>
	else if (__tmp > 65535)
    3120:	6b a1       	ldd	r22, Y+35	; 0x23
    3122:	7c a1       	ldd	r23, Y+36	; 0x24
    3124:	8d a1       	ldd	r24, Y+37	; 0x25
    3126:	9e a1       	ldd	r25, Y+38	; 0x26
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	3f ef       	ldi	r19, 0xFF	; 255
    312c:	4f e7       	ldi	r20, 0x7F	; 127
    312e:	57 e4       	ldi	r21, 0x47	; 71
    3130:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    3134:	18 16       	cp	r1, r24
    3136:	4c f5       	brge	.+82     	; 0x318a <anipick+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3138:	6f a1       	ldd	r22, Y+39	; 0x27
    313a:	78 a5       	ldd	r23, Y+40	; 0x28
    313c:	89 a5       	ldd	r24, Y+41	; 0x29
    313e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e2       	ldi	r20, 0x20	; 32
    3146:	51 e4       	ldi	r21, 0x41	; 65
    3148:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9a a3       	std	Y+34, r25	; 0x22
    315e:	89 a3       	std	Y+33, r24	; 0x21
    3160:	0f c0       	rjmp	.+30     	; 0x3180 <anipick+0x25a>
    3162:	80 e7       	ldi	r24, 0x70	; 112
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	98 a3       	std	Y+32, r25	; 0x20
    3168:	8f 8f       	std	Y+31, r24	; 0x1f
    316a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    316c:	98 a1       	ldd	r25, Y+32	; 0x20
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	f1 f7       	brne	.-4      	; 0x316e <anipick+0x248>
    3172:	98 a3       	std	Y+32, r25	; 0x20
    3174:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3176:	89 a1       	ldd	r24, Y+33	; 0x21
    3178:	9a a1       	ldd	r25, Y+34	; 0x22
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	9a a3       	std	Y+34, r25	; 0x22
    317e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3180:	89 a1       	ldd	r24, Y+33	; 0x21
    3182:	9a a1       	ldd	r25, Y+34	; 0x22
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	69 f7       	brne	.-38     	; 0x3162 <anipick+0x23c>
    3188:	d5 c1       	rjmp	.+938    	; 0x3534 <anipick+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318a:	6b a1       	ldd	r22, Y+35	; 0x23
    318c:	7c a1       	ldd	r23, Y+36	; 0x24
    318e:	8d a1       	ldd	r24, Y+37	; 0x25
    3190:	9e a1       	ldd	r25, Y+38	; 0x26
    3192:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	9a a3       	std	Y+34, r25	; 0x22
    319c:	89 a3       	std	Y+33, r24	; 0x21
    319e:	89 a1       	ldd	r24, Y+33	; 0x21
    31a0:	9a a1       	ldd	r25, Y+34	; 0x22
    31a2:	9e 8f       	std	Y+30, r25	; 0x1e
    31a4:	8d 8f       	std	Y+29, r24	; 0x1d
    31a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <anipick+0x284>
    31ae:	9e 8f       	std	Y+30, r25	; 0x1e
    31b0:	8d 8f       	std	Y+29, r24	; 0x1d
    31b2:	c0 c1       	rjmp	.+896    	; 0x3534 <anipick+0x60e>
			}
			
			// Normal cases
			else
			{
				forward_mm(25);
    31b4:	89 e1       	ldi	r24, 0x19	; 25
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
				pick();
    31bc:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    31c0:	b9 c1       	rjmp	.+882    	; 0x3534 <anipick+0x60e>
			}
		}
		
		// If robot is already at the animal's location
		else 
			pick();
    31c2:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    31c6:	b6 c1       	rjmp	.+876    	; 0x3534 <anipick+0x60e>
	}
	
	else if(pos[0]=='F') // If animal is at right side of the arena
    31c8:	e9 ad       	ldd	r30, Y+57	; 0x39
    31ca:	fa ad       	ldd	r31, Y+58	; 0x3a
    31cc:	80 81       	ld	r24, Z
    31ce:	86 34       	cpi	r24, 0x46	; 70
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <anipick+0x2ae>
    31d2:	3f c1       	rjmp	.+638    	; 0x3452 <anipick+0x52c>
	{
		if(f==1 || b==1)
    31d4:	80 91 00 02 	lds	r24, 0x0200
    31d8:	90 91 01 02 	lds	r25, 0x0201
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	91 05       	cpc	r25, r1
    31e0:	41 f0       	breq	.+16     	; 0x31f2 <anipick+0x2cc>
    31e2:	80 91 26 03 	lds	r24, 0x0326
    31e6:	90 91 27 03 	lds	r25, 0x0327
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	91 05       	cpc	r25, r1
    31ee:	09 f0       	breq	.+2      	; 0x31f2 <anipick+0x2cc>
    31f0:	2d c1       	rjmp	.+602    	; 0x344c <anipick+0x526>
		{
			a=turnsoft(f);
    31f2:	80 91 00 02 	lds	r24, 0x0200
    31f6:	90 91 01 02 	lds	r25, 0x0201
    31fa:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <turnsoft>
    31fe:	90 93 03 02 	sts	0x0203, r25
    3202:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    3206:	80 91 02 02 	lds	r24, 0x0202
    320a:	90 91 03 02 	lds	r25, 0x0203
    320e:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
			/* Handling corner cases */
			if(pos[1]=='6')
    3212:	89 ad       	ldd	r24, Y+57	; 0x39
    3214:	9a ad       	ldd	r25, Y+58	; 0x3a
    3216:	fc 01       	movw	r30, r24
    3218:	31 96       	adiw	r30, 0x01	; 1
    321a:	80 81       	ld	r24, Z
    321c:	86 33       	cpi	r24, 0x36	; 54
    321e:	09 f0       	breq	.+2      	; 0x3222 <anipick+0x2fc>
    3220:	83 c0       	rjmp	.+262    	; 0x3328 <anipick+0x402>
			{
				soft_left_2_degrees(15);
    3222:	8f e0       	ldi	r24, 0x0F	; 15
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <soft_left_2_degrees>
				forward_mm(50);
    322a:	82 e3       	ldi	r24, 0x32	; 50
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
				pick();
    3232:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
				back_mm(35);
    3236:	83 e2       	ldi	r24, 0x23	; 35
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <back_mm>
				stop();
    323e:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a8 ec       	ldi	r26, 0xC8	; 200
    3248:	b2 e4       	ldi	r27, 0x42	; 66
    324a:	89 8f       	std	Y+25, r24	; 0x19
    324c:	9a 8f       	std	Y+26, r25	; 0x1a
    324e:	ab 8f       	std	Y+27, r26	; 0x1b
    3250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	26 e6       	ldi	r18, 0x66	; 102
    325c:	36 e6       	ldi	r19, 0x66	; 102
    325e:	46 e6       	ldi	r20, 0x66	; 102
    3260:	55 e4       	ldi	r21, 0x45	; 69
    3262:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8d 8b       	std	Y+21, r24	; 0x15
    326c:	9e 8b       	std	Y+22, r25	; 0x16
    326e:	af 8b       	std	Y+23, r26	; 0x17
    3270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3272:	6d 89       	ldd	r22, Y+21	; 0x15
    3274:	7e 89       	ldd	r23, Y+22	; 0x16
    3276:	8f 89       	ldd	r24, Y+23	; 0x17
    3278:	98 8d       	ldd	r25, Y+24	; 0x18
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <anipick+0x36e>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <anipick+0x3ec>
	else if (__tmp > 65535)
    3294:	6d 89       	ldd	r22, Y+21	; 0x15
    3296:	7e 89       	ldd	r23, Y+22	; 0x16
    3298:	8f 89       	ldd	r24, Y+23	; 0x17
    329a:	98 8d       	ldd	r25, Y+24	; 0x18
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <anipick+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	69 8d       	ldd	r22, Y+25	; 0x19
    32ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <anipick+0x3ce>
    32d6:	80 e7       	ldi	r24, 0x70	; 112
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
    32de:	89 89       	ldd	r24, Y+17	; 0x11
    32e0:	9a 89       	ldd	r25, Y+18	; 0x12
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <anipick+0x3bc>
    32e6:	9a 8b       	std	Y+18, r25	; 0x12
    32e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8b 89       	ldd	r24, Y+19	; 0x13
    32ec:	9c 89       	ldd	r25, Y+20	; 0x14
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <anipick+0x3b0>
    32fc:	1b c1       	rjmp	.+566    	; 0x3534 <anipick+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3300:	7e 89       	ldd	r23, Y+22	; 0x16
    3302:	8f 89       	ldd	r24, Y+23	; 0x17
    3304:	98 8d       	ldd	r25, Y+24	; 0x18
    3306:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9c 8b       	std	Y+20, r25	; 0x14
    3310:	8b 8b       	std	Y+19, r24	; 0x13
    3312:	8b 89       	ldd	r24, Y+19	; 0x13
    3314:	9c 89       	ldd	r25, Y+20	; 0x14
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
    331a:	8f 85       	ldd	r24, Y+15	; 0x0f
    331c:	98 89       	ldd	r25, Y+16	; 0x10
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <anipick+0x3f8>
    3322:	98 8b       	std	Y+16, r25	; 0x10
    3324:	8f 87       	std	Y+15, r24	; 0x0f
    3326:	06 c1       	rjmp	.+524    	; 0x3534 <anipick+0x60e>
				_delay_ms(100);
			}
			else if(pos[1]=='1')
    3328:	89 ad       	ldd	r24, Y+57	; 0x39
    332a:	9a ad       	ldd	r25, Y+58	; 0x3a
    332c:	fc 01       	movw	r30, r24
    332e:	31 96       	adiw	r30, 0x01	; 1
    3330:	80 81       	ld	r24, Z
    3332:	81 33       	cpi	r24, 0x31	; 49
    3334:	09 f0       	breq	.+2      	; 0x3338 <anipick+0x412>
    3336:	83 c0       	rjmp	.+262    	; 0x343e <anipick+0x518>
			{
				soft_right_2_degrees(15);
    3338:	8f e0       	ldi	r24, 0x0F	; 15
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <soft_right_2_degrees>
				forward_mm(50);
    3340:	82 e3       	ldi	r24, 0x32	; 50
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
				pick();
    3348:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
				back_mm(35);
    334c:	83 e2       	ldi	r24, 0x23	; 35
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <back_mm>
				stop();
    3354:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	a8 ec       	ldi	r26, 0xC8	; 200
    335e:	b2 e4       	ldi	r27, 0x42	; 66
    3360:	8b 87       	std	Y+11, r24	; 0x0b
    3362:	9c 87       	std	Y+12, r25	; 0x0c
    3364:	ad 87       	std	Y+13, r26	; 0x0d
    3366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3368:	6b 85       	ldd	r22, Y+11	; 0x0b
    336a:	7c 85       	ldd	r23, Y+12	; 0x0c
    336c:	8d 85       	ldd	r24, Y+13	; 0x0d
    336e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3370:	26 e6       	ldi	r18, 0x66	; 102
    3372:	36 e6       	ldi	r19, 0x66	; 102
    3374:	46 e6       	ldi	r20, 0x66	; 102
    3376:	55 e4       	ldi	r21, 0x45	; 69
    3378:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	8f 83       	std	Y+7, r24	; 0x07
    3382:	98 87       	std	Y+8, r25	; 0x08
    3384:	a9 87       	std	Y+9, r26	; 0x09
    3386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e8       	ldi	r20, 0x80	; 128
    3396:	5f e3       	ldi	r21, 0x3F	; 63
    3398:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    339c:	88 23       	and	r24, r24
    339e:	2c f4       	brge	.+10     	; 0x33aa <anipick+0x484>
		__ticks = 1;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
    33a8:	3f c0       	rjmp	.+126    	; 0x3428 <anipick+0x502>
	else if (__tmp > 65535)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	3f ef       	ldi	r19, 0xFF	; 255
    33b6:	4f e7       	ldi	r20, 0x7F	; 127
    33b8:	57 e4       	ldi	r21, 0x47	; 71
    33ba:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    33be:	18 16       	cp	r1, r24
    33c0:	4c f5       	brge	.+82     	; 0x3414 <anipick+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e2       	ldi	r20, 0x20	; 32
    33d0:	51 e4       	ldi	r21, 0x41	; 65
    33d2:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	bc 01       	movw	r22, r24
    33dc:	cd 01       	movw	r24, r26
    33de:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	9e 83       	std	Y+6, r25	; 0x06
    33e8:	8d 83       	std	Y+5, r24	; 0x05
    33ea:	0f c0       	rjmp	.+30     	; 0x340a <anipick+0x4e4>
    33ec:	80 e7       	ldi	r24, 0x70	; 112
    33ee:	91 e0       	ldi	r25, 0x01	; 1
    33f0:	9c 83       	std	Y+4, r25	; 0x04
    33f2:	8b 83       	std	Y+3, r24	; 0x03
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	9c 81       	ldd	r25, Y+4	; 0x04
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <anipick+0x4d2>
    33fc:	9c 83       	std	Y+4, r25	; 0x04
    33fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	69 f7       	brne	.-38     	; 0x33ec <anipick+0x4c6>
    3412:	90 c0       	rjmp	.+288    	; 0x3534 <anipick+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	9e 83       	std	Y+6, r25	; 0x06
    3426:	8d 83       	std	Y+5, r24	; 0x05
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <anipick+0x50e>
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	7b c0       	rjmp	.+246    	; 0x3534 <anipick+0x60e>
			}
			
			// Normal cases
			else
			{
				forward_mm(25);
    343e:	89 e1       	ldi	r24, 0x19	; 25
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
				pick();
    3446:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    344a:	74 c0       	rjmp	.+232    	; 0x3534 <anipick+0x60e>
			}
		}
		// If robot is already at the animal's location
		else
			pick();
    344c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    3450:	71 c0       	rjmp	.+226    	; 0x3534 <anipick+0x60e>
	}
	
	else if(pos[1]=='1' && pos[0]!='A' && pos[0]!='F') // If animal is at the bottom part of the arena
    3452:	89 ad       	ldd	r24, Y+57	; 0x39
    3454:	9a ad       	ldd	r25, Y+58	; 0x3a
    3456:	fc 01       	movw	r30, r24
    3458:	31 96       	adiw	r30, 0x01	; 1
    345a:	80 81       	ld	r24, Z
    345c:	81 33       	cpi	r24, 0x31	; 49
    345e:	91 f5       	brne	.+100    	; 0x34c4 <anipick+0x59e>
    3460:	e9 ad       	ldd	r30, Y+57	; 0x39
    3462:	fa ad       	ldd	r31, Y+58	; 0x3a
    3464:	80 81       	ld	r24, Z
    3466:	81 34       	cpi	r24, 0x41	; 65
    3468:	69 f1       	breq	.+90     	; 0x34c4 <anipick+0x59e>
    346a:	e9 ad       	ldd	r30, Y+57	; 0x39
    346c:	fa ad       	ldd	r31, Y+58	; 0x3a
    346e:	80 81       	ld	r24, Z
    3470:	86 34       	cpi	r24, 0x46	; 70
    3472:	41 f1       	breq	.+80     	; 0x34c4 <anipick+0x59e>
	{
		if(r==1 || l==1)
    3474:	80 91 28 03 	lds	r24, 0x0328
    3478:	90 91 29 03 	lds	r25, 0x0329
    347c:	81 30       	cpi	r24, 0x01	; 1
    347e:	91 05       	cpc	r25, r1
    3480:	39 f0       	breq	.+14     	; 0x3490 <anipick+0x56a>
    3482:	80 91 2a 03 	lds	r24, 0x032A
    3486:	90 91 2b 03 	lds	r25, 0x032B
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	91 05       	cpc	r25, r1
    348e:	b9 f4       	brne	.+46     	; 0x34be <anipick+0x598>
		{
			a=turnsoft(r);
    3490:	80 91 28 03 	lds	r24, 0x0328
    3494:	90 91 29 03 	lds	r25, 0x0329
    3498:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <turnsoft>
    349c:	90 93 03 02 	sts	0x0203, r25
    34a0:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    34a4:	80 91 02 02 	lds	r24, 0x0202
    34a8:	90 91 03 02 	lds	r25, 0x0203
    34ac:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
			forward_mm(25);
    34b0:	89 e1       	ldi	r24, 0x19	; 25
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
			pick();
    34b8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    34bc:	3b c0       	rjmp	.+118    	; 0x3534 <anipick+0x60e>
		}
		// If robot is already at the animal's location
		else
			pick();
    34be:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    34c2:	38 c0       	rjmp	.+112    	; 0x3534 <anipick+0x60e>
	}
	else if(pos[1]=='6' && pos[0]!='A' && pos[0]!='F') // If animal is at top part of the arena
    34c4:	89 ad       	ldd	r24, Y+57	; 0x39
    34c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    34c8:	fc 01       	movw	r30, r24
    34ca:	31 96       	adiw	r30, 0x01	; 1
    34cc:	80 81       	ld	r24, Z
    34ce:	86 33       	cpi	r24, 0x36	; 54
    34d0:	89 f5       	brne	.+98     	; 0x3534 <anipick+0x60e>
    34d2:	e9 ad       	ldd	r30, Y+57	; 0x39
    34d4:	fa ad       	ldd	r31, Y+58	; 0x3a
    34d6:	80 81       	ld	r24, Z
    34d8:	81 34       	cpi	r24, 0x41	; 65
    34da:	61 f1       	breq	.+88     	; 0x3534 <anipick+0x60e>
    34dc:	e9 ad       	ldd	r30, Y+57	; 0x39
    34de:	fa ad       	ldd	r31, Y+58	; 0x3a
    34e0:	80 81       	ld	r24, Z
    34e2:	86 34       	cpi	r24, 0x46	; 70
    34e4:	39 f1       	breq	.+78     	; 0x3534 <anipick+0x60e>
	{
		if(l==1 || r==1)
    34e6:	80 91 2a 03 	lds	r24, 0x032A
    34ea:	90 91 2b 03 	lds	r25, 0x032B
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	91 05       	cpc	r25, r1
    34f2:	39 f0       	breq	.+14     	; 0x3502 <anipick+0x5dc>
    34f4:	80 91 28 03 	lds	r24, 0x0328
    34f8:	90 91 29 03 	lds	r25, 0x0329
    34fc:	81 30       	cpi	r24, 0x01	; 1
    34fe:	91 05       	cpc	r25, r1
    3500:	b9 f4       	brne	.+46     	; 0x3530 <anipick+0x60a>
		{
			a=turnsoft(l);
    3502:	80 91 2a 03 	lds	r24, 0x032A
    3506:	90 91 2b 03 	lds	r25, 0x032B
    350a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <turnsoft>
    350e:	90 93 03 02 	sts	0x0203, r25
    3512:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    3516:	80 91 02 02 	lds	r24, 0x0202
    351a:	90 91 03 02 	lds	r25, 0x0203
    351e:	0e 94 1e 13 	call	0x263c	; 0x263c <facing>
			forward_mm(25);
    3522:	89 e1       	ldi	r24, 0x19	; 25
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
			pick();
    352a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <anipick+0x60e>
		}
		// If robot is already at the animal's location
		else
			pick();
    3530:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <pick>
	}
	return;
}
    3534:	ea 96       	adiw	r28, 0x3a	; 58
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	08 95       	ret

00003546 <semiturn>:

/* Function to turn the robot towards its habitat */
void semiturn(int s)
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	ea 97       	sbiw	r28, 0x3a	; 58
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	9a af       	std	Y+58, r25	; 0x3a
    355c:	89 af       	std	Y+57, r24	; 0x39
	/*
	Function Name: semiturn
	Input: s
	Output: None
	*/
	init_devices();
    355e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	if(s==1)
    3562:	89 ad       	ldd	r24, Y+57	; 0x39
    3564:	9a ad       	ldd	r25, Y+58	; 0x3a
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	91 05       	cpc	r25, r1
    356a:	29 f4       	brne	.+10     	; 0x3576 <semiturn+0x30>
		right_degrees(40);
    356c:	88 e2       	ldi	r24, 0x28	; 40
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <right_degrees>
    3574:	04 c0       	rjmp	.+8      	; 0x357e <semiturn+0x38>
	else
		left_degrees(40);
    3576:	88 e2       	ldi	r24, 0x28	; 40
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <left_degrees>
	
	/* Move inside the habitat, drop the animal and come back */	
	stop();
    357e:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	a8 ec       	ldi	r26, 0xC8	; 200
    3588:	b2 e4       	ldi	r27, 0x42	; 66
    358a:	8d ab       	std	Y+53, r24	; 0x35
    358c:	9e ab       	std	Y+54, r25	; 0x36
    358e:	af ab       	std	Y+55, r26	; 0x37
    3590:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3592:	6d a9       	ldd	r22, Y+53	; 0x35
    3594:	7e a9       	ldd	r23, Y+54	; 0x36
    3596:	8f a9       	ldd	r24, Y+55	; 0x37
    3598:	98 ad       	ldd	r25, Y+56	; 0x38
    359a:	26 e6       	ldi	r18, 0x66	; 102
    359c:	36 e6       	ldi	r19, 0x66	; 102
    359e:	46 e6       	ldi	r20, 0x66	; 102
    35a0:	55 e4       	ldi	r21, 0x45	; 69
    35a2:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	89 ab       	std	Y+49, r24	; 0x31
    35ac:	9a ab       	std	Y+50, r25	; 0x32
    35ae:	ab ab       	std	Y+51, r26	; 0x33
    35b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35b2:	69 a9       	ldd	r22, Y+49	; 0x31
    35b4:	7a a9       	ldd	r23, Y+50	; 0x32
    35b6:	8b a9       	ldd	r24, Y+51	; 0x33
    35b8:	9c a9       	ldd	r25, Y+52	; 0x34
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e8       	ldi	r20, 0x80	; 128
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    35c6:	88 23       	and	r24, r24
    35c8:	2c f4       	brge	.+10     	; 0x35d4 <semiturn+0x8e>
		__ticks = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	98 ab       	std	Y+48, r25	; 0x30
    35d0:	8f a7       	std	Y+47, r24	; 0x2f
    35d2:	3f c0       	rjmp	.+126    	; 0x3652 <semiturn+0x10c>
	else if (__tmp > 65535)
    35d4:	69 a9       	ldd	r22, Y+49	; 0x31
    35d6:	7a a9       	ldd	r23, Y+50	; 0x32
    35d8:	8b a9       	ldd	r24, Y+51	; 0x33
    35da:	9c a9       	ldd	r25, Y+52	; 0x34
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	3f ef       	ldi	r19, 0xFF	; 255
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	57 e4       	ldi	r21, 0x47	; 71
    35e4:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	4c f5       	brge	.+82     	; 0x363e <semiturn+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ec:	6d a9       	ldd	r22, Y+53	; 0x35
    35ee:	7e a9       	ldd	r23, Y+54	; 0x36
    35f0:	8f a9       	ldd	r24, Y+55	; 0x37
    35f2:	98 ad       	ldd	r25, Y+56	; 0x38
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e2       	ldi	r20, 0x20	; 32
    35fa:	51 e4       	ldi	r21, 0x41	; 65
    35fc:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	98 ab       	std	Y+48, r25	; 0x30
    3612:	8f a7       	std	Y+47, r24	; 0x2f
    3614:	0f c0       	rjmp	.+30     	; 0x3634 <semiturn+0xee>
    3616:	80 e7       	ldi	r24, 0x70	; 112
    3618:	91 e0       	ldi	r25, 0x01	; 1
    361a:	9e a7       	std	Y+46, r25	; 0x2e
    361c:	8d a7       	std	Y+45, r24	; 0x2d
    361e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3620:	9e a5       	ldd	r25, Y+46	; 0x2e
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <semiturn+0xdc>
    3626:	9e a7       	std	Y+46, r25	; 0x2e
    3628:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	8f a5       	ldd	r24, Y+47	; 0x2f
    362c:	98 a9       	ldd	r25, Y+48	; 0x30
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	98 ab       	std	Y+48, r25	; 0x30
    3632:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3634:	8f a5       	ldd	r24, Y+47	; 0x2f
    3636:	98 a9       	ldd	r25, Y+48	; 0x30
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	69 f7       	brne	.-38     	; 0x3616 <semiturn+0xd0>
    363c:	14 c0       	rjmp	.+40     	; 0x3666 <semiturn+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363e:	69 a9       	ldd	r22, Y+49	; 0x31
    3640:	7a a9       	ldd	r23, Y+50	; 0x32
    3642:	8b a9       	ldd	r24, Y+51	; 0x33
    3644:	9c a9       	ldd	r25, Y+52	; 0x34
    3646:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	98 ab       	std	Y+48, r25	; 0x30
    3650:	8f a7       	std	Y+47, r24	; 0x2f
    3652:	8f a5       	ldd	r24, Y+47	; 0x2f
    3654:	98 a9       	ldd	r25, Y+48	; 0x30
    3656:	9c a7       	std	Y+44, r25	; 0x2c
    3658:	8b a7       	std	Y+43, r24	; 0x2b
    365a:	8b a5       	ldd	r24, Y+43	; 0x2b
    365c:	9c a5       	ldd	r25, Y+44	; 0x2c
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <semiturn+0x118>
    3662:	9c a7       	std	Y+44, r25	; 0x2c
    3664:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	forward_mm(70);
    3666:	86 e4       	ldi	r24, 0x46	; 70
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <forward_mm>
	stop();
    366e:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a8 ec       	ldi	r26, 0xC8	; 200
    3678:	b2 e4       	ldi	r27, 0x42	; 66
    367a:	8f a3       	std	Y+39, r24	; 0x27
    367c:	98 a7       	std	Y+40, r25	; 0x28
    367e:	a9 a7       	std	Y+41, r26	; 0x29
    3680:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3682:	6f a1       	ldd	r22, Y+39	; 0x27
    3684:	78 a5       	ldd	r23, Y+40	; 0x28
    3686:	89 a5       	ldd	r24, Y+41	; 0x29
    3688:	9a a5       	ldd	r25, Y+42	; 0x2a
    368a:	26 e6       	ldi	r18, 0x66	; 102
    368c:	36 e6       	ldi	r19, 0x66	; 102
    368e:	46 e6       	ldi	r20, 0x66	; 102
    3690:	55 e4       	ldi	r21, 0x45	; 69
    3692:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	8b a3       	std	Y+35, r24	; 0x23
    369c:	9c a3       	std	Y+36, r25	; 0x24
    369e:	ad a3       	std	Y+37, r26	; 0x25
    36a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36a2:	6b a1       	ldd	r22, Y+35	; 0x23
    36a4:	7c a1       	ldd	r23, Y+36	; 0x24
    36a6:	8d a1       	ldd	r24, Y+37	; 0x25
    36a8:	9e a1       	ldd	r25, Y+38	; 0x26
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <semiturn+0x17e>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9a a3       	std	Y+34, r25	; 0x22
    36c0:	89 a3       	std	Y+33, r24	; 0x21
    36c2:	3f c0       	rjmp	.+126    	; 0x3742 <semiturn+0x1fc>
	else if (__tmp > 65535)
    36c4:	6b a1       	ldd	r22, Y+35	; 0x23
    36c6:	7c a1       	ldd	r23, Y+36	; 0x24
    36c8:	8d a1       	ldd	r24, Y+37	; 0x25
    36ca:	9e a1       	ldd	r25, Y+38	; 0x26
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	4c f5       	brge	.+82     	; 0x372e <semiturn+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	6f a1       	ldd	r22, Y+39	; 0x27
    36de:	78 a5       	ldd	r23, Y+40	; 0x28
    36e0:	89 a5       	ldd	r24, Y+41	; 0x29
    36e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e2       	ldi	r20, 0x20	; 32
    36ea:	51 e4       	ldi	r21, 0x41	; 65
    36ec:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9a a3       	std	Y+34, r25	; 0x22
    3702:	89 a3       	std	Y+33, r24	; 0x21
    3704:	0f c0       	rjmp	.+30     	; 0x3724 <semiturn+0x1de>
    3706:	80 e7       	ldi	r24, 0x70	; 112
    3708:	91 e0       	ldi	r25, 0x01	; 1
    370a:	98 a3       	std	Y+32, r25	; 0x20
    370c:	8f 8f       	std	Y+31, r24	; 0x1f
    370e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3710:	98 a1       	ldd	r25, Y+32	; 0x20
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <semiturn+0x1cc>
    3716:	98 a3       	std	Y+32, r25	; 0x20
    3718:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	89 a1       	ldd	r24, Y+33	; 0x21
    371c:	9a a1       	ldd	r25, Y+34	; 0x22
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	9a a3       	std	Y+34, r25	; 0x22
    3722:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	89 a1       	ldd	r24, Y+33	; 0x21
    3726:	9a a1       	ldd	r25, Y+34	; 0x22
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	69 f7       	brne	.-38     	; 0x3706 <semiturn+0x1c0>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <semiturn+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	6b a1       	ldd	r22, Y+35	; 0x23
    3730:	7c a1       	ldd	r23, Y+36	; 0x24
    3732:	8d a1       	ldd	r24, Y+37	; 0x25
    3734:	9e a1       	ldd	r25, Y+38	; 0x26
    3736:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9a a3       	std	Y+34, r25	; 0x22
    3740:	89 a3       	std	Y+33, r24	; 0x21
    3742:	89 a1       	ldd	r24, Y+33	; 0x21
    3744:	9a a1       	ldd	r25, Y+34	; 0x22
    3746:	9e 8f       	std	Y+30, r25	; 0x1e
    3748:	8d 8f       	std	Y+29, r24	; 0x1d
    374a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    374c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <semiturn+0x208>
    3752:	9e 8f       	std	Y+30, r25	; 0x1e
    3754:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	drop();
    3756:	0e 94 89 22 	call	0x4512	; 0x4512 <drop>
	back_mm(70);
    375a:	86 e4       	ldi	r24, 0x46	; 70
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <back_mm>
	stop();
    3762:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	a8 ec       	ldi	r26, 0xC8	; 200
    376c:	b2 e4       	ldi	r27, 0x42	; 66
    376e:	89 8f       	std	Y+25, r24	; 0x19
    3770:	9a 8f       	std	Y+26, r25	; 0x1a
    3772:	ab 8f       	std	Y+27, r26	; 0x1b
    3774:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3776:	69 8d       	ldd	r22, Y+25	; 0x19
    3778:	7a 8d       	ldd	r23, Y+26	; 0x1a
    377a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    377e:	26 e6       	ldi	r18, 0x66	; 102
    3780:	36 e6       	ldi	r19, 0x66	; 102
    3782:	46 e6       	ldi	r20, 0x66	; 102
    3784:	55 e4       	ldi	r21, 0x45	; 69
    3786:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	8d 8b       	std	Y+21, r24	; 0x15
    3790:	9e 8b       	std	Y+22, r25	; 0x16
    3792:	af 8b       	std	Y+23, r26	; 0x17
    3794:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3796:	6d 89       	ldd	r22, Y+21	; 0x15
    3798:	7e 89       	ldd	r23, Y+22	; 0x16
    379a:	8f 89       	ldd	r24, Y+23	; 0x17
    379c:	98 8d       	ldd	r25, Y+24	; 0x18
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e8       	ldi	r20, 0x80	; 128
    37a4:	5f e3       	ldi	r21, 0x3F	; 63
    37a6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    37aa:	88 23       	and	r24, r24
    37ac:	2c f4       	brge	.+10     	; 0x37b8 <semiturn+0x272>
		__ticks = 1;
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	9c 8b       	std	Y+20, r25	; 0x14
    37b4:	8b 8b       	std	Y+19, r24	; 0x13
    37b6:	3f c0       	rjmp	.+126    	; 0x3836 <semiturn+0x2f0>
	else if (__tmp > 65535)
    37b8:	6d 89       	ldd	r22, Y+21	; 0x15
    37ba:	7e 89       	ldd	r23, Y+22	; 0x16
    37bc:	8f 89       	ldd	r24, Y+23	; 0x17
    37be:	98 8d       	ldd	r25, Y+24	; 0x18
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	3f ef       	ldi	r19, 0xFF	; 255
    37c4:	4f e7       	ldi	r20, 0x7F	; 127
    37c6:	57 e4       	ldi	r21, 0x47	; 71
    37c8:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    37cc:	18 16       	cp	r1, r24
    37ce:	4c f5       	brge	.+82     	; 0x3822 <semiturn+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d0:	69 8d       	ldd	r22, Y+25	; 0x19
    37d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	40 e2       	ldi	r20, 0x20	; 32
    37de:	51 e4       	ldi	r21, 0x41	; 65
    37e0:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	bc 01       	movw	r22, r24
    37ea:	cd 01       	movw	r24, r26
    37ec:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	9c 8b       	std	Y+20, r25	; 0x14
    37f6:	8b 8b       	std	Y+19, r24	; 0x13
    37f8:	0f c0       	rjmp	.+30     	; 0x3818 <semiturn+0x2d2>
    37fa:	80 e7       	ldi	r24, 0x70	; 112
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	9a 8b       	std	Y+18, r25	; 0x12
    3800:	89 8b       	std	Y+17, r24	; 0x11
    3802:	89 89       	ldd	r24, Y+17	; 0x11
    3804:	9a 89       	ldd	r25, Y+18	; 0x12
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <semiturn+0x2c0>
    380a:	9a 8b       	std	Y+18, r25	; 0x12
    380c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380e:	8b 89       	ldd	r24, Y+19	; 0x13
    3810:	9c 89       	ldd	r25, Y+20	; 0x14
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	9c 8b       	std	Y+20, r25	; 0x14
    3816:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3818:	8b 89       	ldd	r24, Y+19	; 0x13
    381a:	9c 89       	ldd	r25, Y+20	; 0x14
    381c:	00 97       	sbiw	r24, 0x00	; 0
    381e:	69 f7       	brne	.-38     	; 0x37fa <semiturn+0x2b4>
    3820:	14 c0       	rjmp	.+40     	; 0x384a <semiturn+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3822:	6d 89       	ldd	r22, Y+21	; 0x15
    3824:	7e 89       	ldd	r23, Y+22	; 0x16
    3826:	8f 89       	ldd	r24, Y+23	; 0x17
    3828:	98 8d       	ldd	r25, Y+24	; 0x18
    382a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	9c 8b       	std	Y+20, r25	; 0x14
    3834:	8b 8b       	std	Y+19, r24	; 0x13
    3836:	8b 89       	ldd	r24, Y+19	; 0x13
    3838:	9c 89       	ldd	r25, Y+20	; 0x14
    383a:	98 8b       	std	Y+16, r25	; 0x10
    383c:	8f 87       	std	Y+15, r24	; 0x0f
    383e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3840:	98 89       	ldd	r25, Y+16	; 0x10
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	f1 f7       	brne	.-4      	; 0x3842 <semiturn+0x2fc>
    3846:	98 8b       	std	Y+16, r25	; 0x10
    3848:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	if(s==1)
    384a:	89 ad       	ldd	r24, Y+57	; 0x39
    384c:	9a ad       	ldd	r25, Y+58	; 0x3a
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	91 05       	cpc	r25, r1
    3852:	29 f4       	brne	.+10     	; 0x385e <semiturn+0x318>
		left_degrees(40);
    3854:	88 e2       	ldi	r24, 0x28	; 40
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <left_degrees>
    385c:	04 c0       	rjmp	.+8      	; 0x3866 <semiturn+0x320>
	else
		right_degrees(40);
    385e:	88 e2       	ldi	r24, 0x28	; 40
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <right_degrees>
	stop();
    3866:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a8 ec       	ldi	r26, 0xC8	; 200
    3870:	b2 e4       	ldi	r27, 0x42	; 66
    3872:	8b 87       	std	Y+11, r24	; 0x0b
    3874:	9c 87       	std	Y+12, r25	; 0x0c
    3876:	ad 87       	std	Y+13, r26	; 0x0d
    3878:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    387a:	6b 85       	ldd	r22, Y+11	; 0x0b
    387c:	7c 85       	ldd	r23, Y+12	; 0x0c
    387e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3880:	9e 85       	ldd	r25, Y+14	; 0x0e
    3882:	26 e6       	ldi	r18, 0x66	; 102
    3884:	36 e6       	ldi	r19, 0x66	; 102
    3886:	46 e6       	ldi	r20, 0x66	; 102
    3888:	55 e4       	ldi	r21, 0x45	; 69
    388a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	8f 83       	std	Y+7, r24	; 0x07
    3894:	98 87       	std	Y+8, r25	; 0x08
    3896:	a9 87       	std	Y+9, r26	; 0x09
    3898:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    389a:	6f 81       	ldd	r22, Y+7	; 0x07
    389c:	78 85       	ldd	r23, Y+8	; 0x08
    389e:	89 85       	ldd	r24, Y+9	; 0x09
    38a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e8       	ldi	r20, 0x80	; 128
    38a8:	5f e3       	ldi	r21, 0x3F	; 63
    38aa:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    38ae:	88 23       	and	r24, r24
    38b0:	2c f4       	brge	.+10     	; 0x38bc <semiturn+0x376>
		__ticks = 1;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9e 83       	std	Y+6, r25	; 0x06
    38b8:	8d 83       	std	Y+5, r24	; 0x05
    38ba:	3f c0       	rjmp	.+126    	; 0x393a <semiturn+0x3f4>
	else if (__tmp > 65535)
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	3f ef       	ldi	r19, 0xFF	; 255
    38c8:	4f e7       	ldi	r20, 0x7F	; 127
    38ca:	57 e4       	ldi	r21, 0x47	; 71
    38cc:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    38d0:	18 16       	cp	r1, r24
    38d2:	4c f5       	brge	.+82     	; 0x3926 <semiturn+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38da:	9e 85       	ldd	r25, Y+14	; 0x0e
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e2       	ldi	r20, 0x20	; 32
    38e2:	51 e4       	ldi	r21, 0x41	; 65
    38e4:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	bc 01       	movw	r22, r24
    38ee:	cd 01       	movw	r24, r26
    38f0:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
    38fc:	0f c0       	rjmp	.+30     	; 0x391c <semiturn+0x3d6>
    38fe:	80 e7       	ldi	r24, 0x70	; 112
    3900:	91 e0       	ldi	r25, 0x01	; 1
    3902:	9c 83       	std	Y+4, r25	; 0x04
    3904:	8b 83       	std	Y+3, r24	; 0x03
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <semiturn+0x3c4>
    390e:	9c 83       	std	Y+4, r25	; 0x04
    3910:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	9e 83       	std	Y+6, r25	; 0x06
    391a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391c:	8d 81       	ldd	r24, Y+5	; 0x05
    391e:	9e 81       	ldd	r25, Y+6	; 0x06
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	69 f7       	brne	.-38     	; 0x38fe <semiturn+0x3b8>
    3924:	14 c0       	rjmp	.+40     	; 0x394e <semiturn+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3926:	6f 81       	ldd	r22, Y+7	; 0x07
    3928:	78 85       	ldd	r23, Y+8	; 0x08
    392a:	89 85       	ldd	r24, Y+9	; 0x09
    392c:	9a 85       	ldd	r25, Y+10	; 0x0a
    392e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9e 83       	std	Y+6, r25	; 0x06
    3938:	8d 83       	std	Y+5, r24	; 0x05
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
    393c:	9e 81       	ldd	r25, Y+6	; 0x06
    393e:	9a 83       	std	Y+2, r25	; 0x02
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <semiturn+0x400>
    394a:	9a 83       	std	Y+2, r25	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	return;
}
    394e:	ea 96       	adiw	r28, 0x3a	; 58
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <nodetraverse>:

/* Function to read the white line sensors' values and follow the black line for given number of nodes (nodes) */
void nodetraverse(int nodes)	
{   
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	28 97       	sbiw	r28, 0x08	; 8
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	98 87       	std	Y+8, r25	; 0x08
    3976:	8f 83       	std	Y+7, r24	; 0x07
	/*
	Function Name: nodetraverse
	Input: nodes
	Output: None
	*/
	int node_cnt=0,q=0,cond_flag=0;
    3978:	1e 82       	std	Y+6, r1	; 0x06
    397a:	1d 82       	std	Y+5, r1	; 0x05
    397c:	1c 82       	std	Y+4, r1	; 0x04
    397e:	1b 82       	std	Y+3, r1	; 0x03
    3980:	1a 82       	std	Y+2, r1	; 0x02
    3982:	19 82       	std	Y+1, r1	; 0x01
	init_devices();
    3984:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
    while(1)
    {
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    3988:	83 e0       	ldi	r24, 0x03	; 3
    398a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    398e:	80 93 17 03 	sts	0x0317, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    3992:	82 e0       	ldi	r24, 0x02	; 2
    3994:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    3998:	80 93 18 03 	sts	0x0318, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    39a2:	80 93 19 03 	sts	0x0319, r24
        cond_flag=0;
    39a6:	1a 82       	std	Y+2, r1	; 0x02
    39a8:	19 82       	std	Y+1, r1	; 0x01
		//print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		//print_sensor(1,9,1);	//Prints Value of White Line Sensor3


		// If center white line sensor is on black line
		if((Center_white_line>=0x0a) && (Center_white_line<0x78) && (Left_white_line<=0x0a) && (Right_white_line<=0x0a))
    39aa:	80 91 18 03 	lds	r24, 0x0318
    39ae:	8a 30       	cpi	r24, 0x0A	; 10
    39b0:	d8 f0       	brcs	.+54     	; 0x39e8 <nodetraverse+0x88>
    39b2:	80 91 18 03 	lds	r24, 0x0318
    39b6:	88 37       	cpi	r24, 0x78	; 120
    39b8:	b8 f4       	brcc	.+46     	; 0x39e8 <nodetraverse+0x88>
    39ba:	80 91 17 03 	lds	r24, 0x0317
    39be:	8b 30       	cpi	r24, 0x0B	; 11
    39c0:	98 f4       	brcc	.+38     	; 0x39e8 <nodetraverse+0x88>
    39c2:	80 91 19 03 	lds	r24, 0x0319
    39c6:	8b 30       	cpi	r24, 0x0B	; 11
    39c8:	78 f4       	brcc	.+30     	; 0x39e8 <nodetraverse+0x88>
		{
		    cond_flag=1;
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	9a 83       	std	Y+2, r25	; 0x02
    39d0:	89 83       	std	Y+1, r24	; 0x01
			forward();
    39d2:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
			velocity(150,150);
    39d6:	86 e9       	ldi	r24, 0x96	; 150
    39d8:	66 e9       	ldi	r22, 0x96	; 150
    39da:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
			q++;
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	9c 81       	ldd	r25, Y+4	; 0x04
    39e2:	01 96       	adiw	r24, 0x01	; 1
    39e4:	9c 83       	std	Y+4, r25	; 0x04
    39e6:	8b 83       	std	Y+3, r24	; 0x03
		}
		
		// If robot misses the black line completely
        if((Center_white_line<=0x0a) && (Left_white_line<=0x0a) && (Right_white_line<=0x0a))
    39e8:	80 91 18 03 	lds	r24, 0x0318
    39ec:	8b 30       	cpi	r24, 0x0B	; 11
    39ee:	b8 f4       	brcc	.+46     	; 0x3a1e <nodetraverse+0xbe>
    39f0:	80 91 17 03 	lds	r24, 0x0317
    39f4:	8b 30       	cpi	r24, 0x0B	; 11
    39f6:	98 f4       	brcc	.+38     	; 0x3a1e <nodetraverse+0xbe>
    39f8:	80 91 19 03 	lds	r24, 0x0319
    39fc:	8b 30       	cpi	r24, 0x0B	; 11
    39fe:	78 f4       	brcc	.+30     	; 0x3a1e <nodetraverse+0xbe>
		{  
			cond_flag=1;
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
			forward();
    3a08:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
			velocity(150,150);
    3a0c:	86 e9       	ldi	r24, 0x96	; 150
    3a0e:	66 e9       	ldi	r22, 0x96	; 150
    3a10:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
			q++;
    3a14:	8b 81       	ldd	r24, Y+3	; 0x03
    3a16:	9c 81       	ldd	r25, Y+4	; 0x04
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	9c 83       	std	Y+4, r25	; 0x04
    3a1c:	8b 83       	std	Y+3, r24	; 0x03
		}
		// If robot has deviated towards right
		if( cond_flag==0 && (Left_white_line>0x0a) && (Right_white_line<=0x0a)&&(Center_white_line<=0x0a))
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	00 97       	sbiw	r24, 0x00	; 0
    3a24:	a1 f4       	brne	.+40     	; 0x3a4e <nodetraverse+0xee>
    3a26:	80 91 17 03 	lds	r24, 0x0317
    3a2a:	8b 30       	cpi	r24, 0x0B	; 11
    3a2c:	80 f0       	brcs	.+32     	; 0x3a4e <nodetraverse+0xee>
    3a2e:	80 91 19 03 	lds	r24, 0x0319
    3a32:	8b 30       	cpi	r24, 0x0B	; 11
    3a34:	60 f4       	brcc	.+24     	; 0x3a4e <nodetraverse+0xee>
    3a36:	80 91 18 03 	lds	r24, 0x0318
    3a3a:	8b 30       	cpi	r24, 0x0B	; 11
    3a3c:	40 f4       	brcc	.+16     	; 0x3a4e <nodetraverse+0xee>
		{  
			cond_flag=1;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9a 83       	std	Y+2, r25	; 0x02
    3a44:	89 83       	std	Y+1, r24	; 0x01
			soft_left_degrees(3);
    3a46:	83 e0       	ldi	r24, 0x03	; 3
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <soft_left_degrees>
		}
		
		// If robot has deviated towards left
		if(cond_flag==0 && (Right_white_line>0x0a) && (Left_white_line<=0x0a) && (Center_white_line<=0x0a))
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	00 97       	sbiw	r24, 0x00	; 0
    3a54:	a1 f4       	brne	.+40     	; 0x3a7e <nodetraverse+0x11e>
    3a56:	80 91 19 03 	lds	r24, 0x0319
    3a5a:	8b 30       	cpi	r24, 0x0B	; 11
    3a5c:	80 f0       	brcs	.+32     	; 0x3a7e <nodetraverse+0x11e>
    3a5e:	80 91 17 03 	lds	r24, 0x0317
    3a62:	8b 30       	cpi	r24, 0x0B	; 11
    3a64:	60 f4       	brcc	.+24     	; 0x3a7e <nodetraverse+0x11e>
    3a66:	80 91 18 03 	lds	r24, 0x0318
    3a6a:	8b 30       	cpi	r24, 0x0B	; 11
    3a6c:	40 f4       	brcc	.+16     	; 0x3a7e <nodetraverse+0x11e>
		{   
			cond_flag=1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
		    soft_right_degrees(3);
    3a76:	83 e0       	ldi	r24, 0x03	; 3
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <soft_right_degrees>
		}   
		
		// If robot passes through a node
		if(cond_flag==0 && (Center_white_line>=0x78 || Right_white_line>=0x82 || Left_white_line>=0x82))
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	9a 81       	ldd	r25, Y+2	; 0x02
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <nodetraverse+0x128>
    3a86:	80 cf       	rjmp	.-256    	; 0x3988 <nodetraverse+0x28>
    3a88:	80 91 18 03 	lds	r24, 0x0318
    3a8c:	88 37       	cpi	r24, 0x78	; 120
    3a8e:	48 f4       	brcc	.+18     	; 0x3aa2 <nodetraverse+0x142>
    3a90:	80 91 19 03 	lds	r24, 0x0319
    3a94:	82 38       	cpi	r24, 0x82	; 130
    3a96:	28 f4       	brcc	.+10     	; 0x3aa2 <nodetraverse+0x142>
    3a98:	80 91 17 03 	lds	r24, 0x0317
    3a9c:	82 38       	cpi	r24, 0x82	; 130
    3a9e:	08 f4       	brcc	.+2      	; 0x3aa2 <nodetraverse+0x142>
    3aa0:	73 cf       	rjmp	.-282    	; 0x3988 <nodetraverse+0x28>
		{   
		    cond_flag=1;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	9a 83       	std	Y+2, r25	; 0x02
    3aa8:	89 83       	std	Y+1, r24	; 0x01
		    if(node_cnt<nodes)
    3aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    3aac:	3e 81       	ldd	r19, Y+6	; 0x06
    3aae:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab0:	98 85       	ldd	r25, Y+8	; 0x08
    3ab2:	28 17       	cp	r18, r24
    3ab4:	39 07       	cpc	r19, r25
    3ab6:	34 f4       	brge	.+12     	; 0x3ac4 <nodetraverse+0x164>
			{
		       forward();
    3ab8:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
		       velocity(150,150);
    3abc:	86 e9       	ldi	r24, 0x96	; 150
    3abe:	66 e9       	ldi	r22, 0x96	; 150
    3ac0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
			}
			if(q>=5)
    3ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac8:	85 30       	cpi	r24, 0x05	; 5
    3aca:	91 05       	cpc	r25, r1
    3acc:	0c f4       	brge	.+2      	; 0x3ad0 <nodetraverse+0x170>
    3ace:	5c cf       	rjmp	.-328    	; 0x3988 <nodetraverse+0x28>
			{			
			    node_cnt++;
    3ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad4:	01 96       	adiw	r24, 0x01	; 1
    3ad6:	9e 83       	std	Y+6, r25	; 0x06
    3ad8:	8d 83       	std	Y+5, r24	; 0x05
				q=0;
    3ada:	1c 82       	std	Y+4, r1	; 0x04
    3adc:	1b 82       	std	Y+3, r1	; 0x03
				if(node_cnt==nodes) // If the robot successfully traversed given number of nodes
    3ade:	2d 81       	ldd	r18, Y+5	; 0x05
    3ae0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ae4:	98 85       	ldd	r25, Y+8	; 0x08
    3ae6:	28 17       	cp	r18, r24
    3ae8:	39 07       	cpc	r19, r25
    3aea:	09 f0       	breq	.+2      	; 0x3aee <nodetraverse+0x18e>
    3aec:	4d cf       	rjmp	.-358    	; 0x3988 <nodetraverse+0x28>
					break;	
			}							
		}
	}
	stop();
    3aee:	0e 94 96 0c 	call	0x192c	; 0x192c <stop>
	forward();
    3af2:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
	velocity(0,0);
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
	return;
}
    3afe:	28 96       	adiw	r28, 0x08	; 8
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <pick>:

/* Function to pick the animal using arm */
void pick()
{
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	c1 57       	subi	r28, 0x71	; 113
    3b1e:	d0 40       	sbci	r29, 0x00	; 0
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: pick
	Input: None
	Output: None
	*/
	init_devices();
    3b2a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	unsigned char i = 0;
    3b2e:	fe 01       	movw	r30, r28
    3b30:	ef 58       	subi	r30, 0x8F	; 143
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	10 82       	st	Z, r1
	
	// Open the grip
	for(i=0;i<10;i++)
    3b36:	fe 01       	movw	r30, r28
    3b38:	ef 58       	subi	r30, 0x8F	; 143
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	10 82       	st	Z, r1
    3b3e:	c2 c0       	rjmp	.+388    	; 0x3cc4 <pick+0x1b4>
	{
		servo_1(i);
    3b40:	fe 01       	movw	r30, r28
    3b42:	ef 58       	subi	r30, 0x8F	; 143
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <servo_1>
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	e3 59       	subi	r30, 0x93	; 147
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	a0 e8       	ldi	r26, 0x80	; 128
    3b58:	bf e3       	ldi	r27, 0x3F	; 63
    3b5a:	80 83       	st	Z, r24
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	a2 83       	std	Z+2, r26	; 0x02
    3b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b62:	8e 01       	movw	r16, r28
    3b64:	07 59       	subi	r16, 0x97	; 151
    3b66:	1f 4f       	sbci	r17, 0xFF	; 255
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e3 59       	subi	r30, 0x93	; 147
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	60 81       	ld	r22, Z
    3b70:	71 81       	ldd	r23, Z+1	; 0x01
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	93 81       	ldd	r25, Z+3	; 0x03
    3b76:	26 e6       	ldi	r18, 0x66	; 102
    3b78:	36 e6       	ldi	r19, 0x66	; 102
    3b7a:	46 e6       	ldi	r20, 0x66	; 102
    3b7c:	55 e4       	ldi	r21, 0x45	; 69
    3b7e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	f8 01       	movw	r30, r16
    3b88:	80 83       	st	Z, r24
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	a2 83       	std	Z+2, r26	; 0x02
    3b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b90:	fe 01       	movw	r30, r28
    3b92:	e7 59       	subi	r30, 0x97	; 151
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	5f e3       	ldi	r21, 0x3F	; 63
    3ba6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    3baa:	88 23       	and	r24, r24
    3bac:	44 f4       	brge	.+16     	; 0x3bbe <pick+0xae>
		__ticks = 1;
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e9 59       	subi	r30, 0x99	; 153
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    3bbc:	64 c0       	rjmp	.+200    	; 0x3c86 <pick+0x176>
	else if (__tmp > 65535)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e7 59       	subi	r30, 0x97	; 151
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	60 81       	ld	r22, Z
    3bc6:	71 81       	ldd	r23, Z+1	; 0x01
    3bc8:	82 81       	ldd	r24, Z+2	; 0x02
    3bca:	93 81       	ldd	r25, Z+3	; 0x03
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	3f ef       	ldi	r19, 0xFF	; 255
    3bd0:	4f e7       	ldi	r20, 0x7F	; 127
    3bd2:	57 e4       	ldi	r21, 0x47	; 71
    3bd4:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    3bd8:	18 16       	cp	r1, r24
    3bda:	0c f0       	brlt	.+2      	; 0x3bde <pick+0xce>
    3bdc:	43 c0       	rjmp	.+134    	; 0x3c64 <pick+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bde:	fe 01       	movw	r30, r28
    3be0:	e3 59       	subi	r30, 0x93	; 147
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e2       	ldi	r20, 0x20	; 32
    3bf2:	51 e4       	ldi	r21, 0x41	; 65
    3bf4:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	8e 01       	movw	r16, r28
    3bfe:	09 59       	subi	r16, 0x99	; 153
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	f8 01       	movw	r30, r16
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	80 83       	st	Z, r24
    3c14:	1f c0       	rjmp	.+62     	; 0x3c54 <pick+0x144>
    3c16:	fe 01       	movw	r30, r28
    3c18:	eb 59       	subi	r30, 0x9B	; 155
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 e7       	ldi	r24, 0x70	; 112
    3c1e:	91 e0       	ldi	r25, 0x01	; 1
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	80 83       	st	Z, r24
    3c24:	fe 01       	movw	r30, r28
    3c26:	eb 59       	subi	r30, 0x9B	; 155
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <pick+0x11e>
    3c32:	fe 01       	movw	r30, r28
    3c34:	eb 59       	subi	r30, 0x9B	; 155
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3c:	de 01       	movw	r26, r28
    3c3e:	a9 59       	subi	r26, 0x99	; 153
    3c40:	bf 4f       	sbci	r27, 0xFF	; 255
    3c42:	fe 01       	movw	r30, r28
    3c44:	e9 59       	subi	r30, 0x99	; 153
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	11 96       	adiw	r26, 0x01	; 1
    3c50:	9c 93       	st	X, r25
    3c52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c54:	fe 01       	movw	r30, r28
    3c56:	e9 59       	subi	r30, 0x99	; 153
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	00 97       	sbiw	r24, 0x00	; 0
    3c60:	d1 f6       	brne	.-76     	; 0x3c16 <pick+0x106>
    3c62:	27 c0       	rjmp	.+78     	; 0x3cb2 <pick+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c64:	8e 01       	movw	r16, r28
    3c66:	09 59       	subi	r16, 0x99	; 153
    3c68:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e7 59       	subi	r30, 0x97	; 151
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	60 81       	ld	r22, Z
    3c72:	71 81       	ldd	r23, Z+1	; 0x01
    3c74:	82 81       	ldd	r24, Z+2	; 0x02
    3c76:	93 81       	ldd	r25, Z+3	; 0x03
    3c78:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	f8 01       	movw	r30, r16
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
    3c86:	de 01       	movw	r26, r28
    3c88:	ad 59       	subi	r26, 0x9D	; 157
    3c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e9 59       	subi	r30, 0x99	; 153
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	8d 93       	st	X+, r24
    3c98:	9c 93       	st	X, r25
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	ed 59       	subi	r30, 0x9D	; 157
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	80 81       	ld	r24, Z
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <pick+0x194>
    3ca8:	fe 01       	movw	r30, r28
    3caa:	ed 59       	subi	r30, 0x9D	; 157
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	91 83       	std	Z+1, r25	; 0x01
    3cb0:	80 83       	st	Z, r24
	*/
	init_devices();
	unsigned char i = 0;
	
	// Open the grip
	for(i=0;i<10;i++)
    3cb2:	de 01       	movw	r26, r28
    3cb4:	af 58       	subi	r26, 0x8F	; 143
    3cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb8:	fe 01       	movw	r30, r28
    3cba:	ef 58       	subi	r30, 0x8F	; 143
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 81       	ld	r24, Z
    3cc0:	8f 5f       	subi	r24, 0xFF	; 255
    3cc2:	8c 93       	st	X, r24
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ef 58       	subi	r30, 0x8F	; 143
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	8a 30       	cpi	r24, 0x0A	; 10
    3cce:	08 f4       	brcc	.+2      	; 0x3cd2 <pick+0x1c2>
    3cd0:	37 cf       	rjmp	.-402    	; 0x3b40 <pick+0x30>
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e1 5a       	subi	r30, 0xA1	; 161
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	af e2       	ldi	r26, 0x2F	; 47
    3cde:	b4 e4       	ldi	r27, 0x44	; 68
    3ce0:	80 83       	st	Z, r24
    3ce2:	91 83       	std	Z+1, r25	; 0x01
    3ce4:	a2 83       	std	Z+2, r26	; 0x02
    3ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce8:	8e 01       	movw	r16, r28
    3cea:	05 5a       	subi	r16, 0xA5	; 165
    3cec:	1f 4f       	sbci	r17, 0xFF	; 255
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e1 5a       	subi	r30, 0xA1	; 161
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	60 81       	ld	r22, Z
    3cf6:	71 81       	ldd	r23, Z+1	; 0x01
    3cf8:	82 81       	ldd	r24, Z+2	; 0x02
    3cfa:	93 81       	ldd	r25, Z+3	; 0x03
    3cfc:	26 e6       	ldi	r18, 0x66	; 102
    3cfe:	36 e6       	ldi	r19, 0x66	; 102
    3d00:	46 e6       	ldi	r20, 0x66	; 102
    3d02:	55 e4       	ldi	r21, 0x45	; 69
    3d04:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	f8 01       	movw	r30, r16
    3d0e:	80 83       	st	Z, r24
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	a2 83       	std	Z+2, r26	; 0x02
    3d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d16:	fe 01       	movw	r30, r28
    3d18:	e5 5a       	subi	r30, 0xA5	; 165
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	60 81       	ld	r22, Z
    3d1e:	71 81       	ldd	r23, Z+1	; 0x01
    3d20:	82 81       	ldd	r24, Z+2	; 0x02
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e8       	ldi	r20, 0x80	; 128
    3d2a:	5f e3       	ldi	r21, 0x3F	; 63
    3d2c:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    3d30:	88 23       	and	r24, r24
    3d32:	44 f4       	brge	.+16     	; 0x3d44 <pick+0x234>
		__ticks = 1;
    3d34:	fe 01       	movw	r30, r28
    3d36:	e7 5a       	subi	r30, 0xA7	; 167
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
    3d42:	64 c0       	rjmp	.+200    	; 0x3e0c <pick+0x2fc>
	else if (__tmp > 65535)
    3d44:	fe 01       	movw	r30, r28
    3d46:	e5 5a       	subi	r30, 0xA5	; 165
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	3f ef       	ldi	r19, 0xFF	; 255
    3d56:	4f e7       	ldi	r20, 0x7F	; 127
    3d58:	57 e4       	ldi	r21, 0x47	; 71
    3d5a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    3d5e:	18 16       	cp	r1, r24
    3d60:	0c f0       	brlt	.+2      	; 0x3d64 <pick+0x254>
    3d62:	43 c0       	rjmp	.+134    	; 0x3dea <pick+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d64:	fe 01       	movw	r30, r28
    3d66:	e1 5a       	subi	r30, 0xA1	; 161
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e2       	ldi	r20, 0x20	; 32
    3d78:	51 e4       	ldi	r21, 0x41	; 65
    3d7a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	8e 01       	movw	r16, r28
    3d84:	07 5a       	subi	r16, 0xA7	; 167
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	f8 01       	movw	r30, r16
    3d96:	91 83       	std	Z+1, r25	; 0x01
    3d98:	80 83       	st	Z, r24
    3d9a:	1f c0       	rjmp	.+62     	; 0x3dda <pick+0x2ca>
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e9 5a       	subi	r30, 0xA9	; 169
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	80 e7       	ldi	r24, 0x70	; 112
    3da4:	91 e0       	ldi	r25, 0x01	; 1
    3da6:	91 83       	std	Z+1, r25	; 0x01
    3da8:	80 83       	st	Z, r24
    3daa:	fe 01       	movw	r30, r28
    3dac:	e9 5a       	subi	r30, 0xA9	; 169
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	f1 f7       	brne	.-4      	; 0x3db4 <pick+0x2a4>
    3db8:	fe 01       	movw	r30, r28
    3dba:	e9 5a       	subi	r30, 0xA9	; 169
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc2:	de 01       	movw	r26, r28
    3dc4:	a7 5a       	subi	r26, 0xA7	; 167
    3dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e7 5a       	subi	r30, 0xA7	; 167
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	11 96       	adiw	r26, 0x01	; 1
    3dd6:	9c 93       	st	X, r25
    3dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dda:	fe 01       	movw	r30, r28
    3ddc:	e7 5a       	subi	r30, 0xA7	; 167
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	80 81       	ld	r24, Z
    3de2:	91 81       	ldd	r25, Z+1	; 0x01
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	d1 f6       	brne	.-76     	; 0x3d9c <pick+0x28c>
    3de8:	27 c0       	rjmp	.+78     	; 0x3e38 <pick+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dea:	8e 01       	movw	r16, r28
    3dec:	07 5a       	subi	r16, 0xA7	; 167
    3dee:	1f 4f       	sbci	r17, 0xFF	; 255
    3df0:	fe 01       	movw	r30, r28
    3df2:	e5 5a       	subi	r30, 0xA5	; 165
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	60 81       	ld	r22, Z
    3df8:	71 81       	ldd	r23, Z+1	; 0x01
    3dfa:	82 81       	ldd	r24, Z+2	; 0x02
    3dfc:	93 81       	ldd	r25, Z+3	; 0x03
    3dfe:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	f8 01       	movw	r30, r16
    3e08:	91 83       	std	Z+1, r25	; 0x01
    3e0a:	80 83       	st	Z, r24
    3e0c:	de 01       	movw	r26, r28
    3e0e:	ab 5a       	subi	r26, 0xAB	; 171
    3e10:	bf 4f       	sbci	r27, 0xFF	; 255
    3e12:	fe 01       	movw	r30, r28
    3e14:	e7 5a       	subi	r30, 0xA7	; 167
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	8d 93       	st	X+, r24
    3e1e:	9c 93       	st	X, r25
    3e20:	fe 01       	movw	r30, r28
    3e22:	eb 5a       	subi	r30, 0xAB	; 171
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <pick+0x31a>
    3e2e:	fe 01       	movw	r30, r28
    3e30:	eb 5a       	subi	r30, 0xAB	; 171
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	80 83       	st	Z, r24
		servo_1(i);
		_delay_ms(1);
	}
	
	_delay_ms(700);
	servo_1_free();
    3e38:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    3e3c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	
	// Bend the arm down towards the animal
	for (i = 0; i < 45; i++)
    3e40:	fe 01       	movw	r30, r28
    3e42:	ef 58       	subi	r30, 0x8F	; 143
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	10 82       	st	Z, r1
    3e48:	c2 c0       	rjmp	.+388    	; 0x3fce <pick+0x4be>
	{
		servo_2(i);
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	ef 58       	subi	r30, 0x8F	; 143
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 81       	ld	r24, Z
    3e52:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <servo_2>
    3e56:	fe 01       	movw	r30, r28
    3e58:	ef 5a       	subi	r30, 0xAF	; 175
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	a0 ef       	ldi	r26, 0xF0	; 240
    3e62:	b1 e4       	ldi	r27, 0x41	; 65
    3e64:	80 83       	st	Z, r24
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	a2 83       	std	Z+2, r26	; 0x02
    3e6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6c:	8e 01       	movw	r16, r28
    3e6e:	03 5b       	subi	r16, 0xB3	; 179
    3e70:	1f 4f       	sbci	r17, 0xFF	; 255
    3e72:	fe 01       	movw	r30, r28
    3e74:	ef 5a       	subi	r30, 0xAF	; 175
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	60 81       	ld	r22, Z
    3e7a:	71 81       	ldd	r23, Z+1	; 0x01
    3e7c:	82 81       	ldd	r24, Z+2	; 0x02
    3e7e:	93 81       	ldd	r25, Z+3	; 0x03
    3e80:	26 e6       	ldi	r18, 0x66	; 102
    3e82:	36 e6       	ldi	r19, 0x66	; 102
    3e84:	46 e6       	ldi	r20, 0x66	; 102
    3e86:	55 e4       	ldi	r21, 0x45	; 69
    3e88:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3e8c:	dc 01       	movw	r26, r24
    3e8e:	cb 01       	movw	r24, r22
    3e90:	f8 01       	movw	r30, r16
    3e92:	80 83       	st	Z, r24
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	a2 83       	std	Z+2, r26	; 0x02
    3e98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e3 5b       	subi	r30, 0xB3	; 179
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	93 81       	ldd	r25, Z+3	; 0x03
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	40 e8       	ldi	r20, 0x80	; 128
    3eae:	5f e3       	ldi	r21, 0x3F	; 63
    3eb0:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    3eb4:	88 23       	and	r24, r24
    3eb6:	44 f4       	brge	.+16     	; 0x3ec8 <pick+0x3b8>
		__ticks = 1;
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e5 5b       	subi	r30, 0xB5	; 181
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	91 83       	std	Z+1, r25	; 0x01
    3ec4:	80 83       	st	Z, r24
    3ec6:	64 c0       	rjmp	.+200    	; 0x3f90 <pick+0x480>
	else if (__tmp > 65535)
    3ec8:	fe 01       	movw	r30, r28
    3eca:	e3 5b       	subi	r30, 0xB3	; 179
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	60 81       	ld	r22, Z
    3ed0:	71 81       	ldd	r23, Z+1	; 0x01
    3ed2:	82 81       	ldd	r24, Z+2	; 0x02
    3ed4:	93 81       	ldd	r25, Z+3	; 0x03
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	3f ef       	ldi	r19, 0xFF	; 255
    3eda:	4f e7       	ldi	r20, 0x7F	; 127
    3edc:	57 e4       	ldi	r21, 0x47	; 71
    3ede:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    3ee2:	18 16       	cp	r1, r24
    3ee4:	0c f0       	brlt	.+2      	; 0x3ee8 <pick+0x3d8>
    3ee6:	43 c0       	rjmp	.+134    	; 0x3f6e <pick+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee8:	fe 01       	movw	r30, r28
    3eea:	ef 5a       	subi	r30, 0xAF	; 175
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e2       	ldi	r20, 0x20	; 32
    3efc:	51 e4       	ldi	r21, 0x41	; 65
    3efe:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	8e 01       	movw	r16, r28
    3f08:	05 5b       	subi	r16, 0xB5	; 181
    3f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0c:	bc 01       	movw	r22, r24
    3f0e:	cd 01       	movw	r24, r26
    3f10:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	f8 01       	movw	r30, r16
    3f1a:	91 83       	std	Z+1, r25	; 0x01
    3f1c:	80 83       	st	Z, r24
    3f1e:	1f c0       	rjmp	.+62     	; 0x3f5e <pick+0x44e>
    3f20:	fe 01       	movw	r30, r28
    3f22:	e7 5b       	subi	r30, 0xB7	; 183
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	80 e7       	ldi	r24, 0x70	; 112
    3f28:	91 e0       	ldi	r25, 0x01	; 1
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	80 83       	st	Z, r24
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e7 5b       	subi	r30, 0xB7	; 183
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	f1 f7       	brne	.-4      	; 0x3f38 <pick+0x428>
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	e7 5b       	subi	r30, 0xB7	; 183
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f46:	de 01       	movw	r26, r28
    3f48:	a5 5b       	subi	r26, 0xB5	; 181
    3f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e5 5b       	subi	r30, 0xB5	; 181
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	80 81       	ld	r24, Z
    3f54:	91 81       	ldd	r25, Z+1	; 0x01
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	11 96       	adiw	r26, 0x01	; 1
    3f5a:	9c 93       	st	X, r25
    3f5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e5 5b       	subi	r30, 0xB5	; 181
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 81       	ld	r24, Z
    3f66:	91 81       	ldd	r25, Z+1	; 0x01
    3f68:	00 97       	sbiw	r24, 0x00	; 0
    3f6a:	d1 f6       	brne	.-76     	; 0x3f20 <pick+0x410>
    3f6c:	27 c0       	rjmp	.+78     	; 0x3fbc <pick+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6e:	8e 01       	movw	r16, r28
    3f70:	05 5b       	subi	r16, 0xB5	; 181
    3f72:	1f 4f       	sbci	r17, 0xFF	; 255
    3f74:	fe 01       	movw	r30, r28
    3f76:	e3 5b       	subi	r30, 0xB3	; 179
    3f78:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7a:	60 81       	ld	r22, Z
    3f7c:	71 81       	ldd	r23, Z+1	; 0x01
    3f7e:	82 81       	ldd	r24, Z+2	; 0x02
    3f80:	93 81       	ldd	r25, Z+3	; 0x03
    3f82:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	f8 01       	movw	r30, r16
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	80 83       	st	Z, r24
    3f90:	de 01       	movw	r26, r28
    3f92:	a9 5b       	subi	r26, 0xB9	; 185
    3f94:	bf 4f       	sbci	r27, 0xFF	; 255
    3f96:	fe 01       	movw	r30, r28
    3f98:	e5 5b       	subi	r30, 0xB5	; 181
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	8d 93       	st	X+, r24
    3fa2:	9c 93       	st	X, r25
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e9 5b       	subi	r30, 0xB9	; 185
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <pick+0x49e>
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e9 5b       	subi	r30, 0xB9	; 185
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	80 83       	st	Z, r24
	_delay_ms(700);
	servo_1_free();
	servo_2_free();
	
	// Bend the arm down towards the animal
	for (i = 0; i < 45; i++)
    3fbc:	de 01       	movw	r26, r28
    3fbe:	af 58       	subi	r26, 0x8F	; 143
    3fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ef 58       	subi	r30, 0x8F	; 143
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	8f 5f       	subi	r24, 0xFF	; 255
    3fcc:	8c 93       	st	X, r24
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ef 58       	subi	r30, 0x8F	; 143
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	8d 32       	cpi	r24, 0x2D	; 45
    3fd8:	08 f4       	brcc	.+2      	; 0x3fdc <pick+0x4cc>
    3fda:	37 cf       	rjmp	.-402    	; 0x3e4a <pick+0x33a>
    3fdc:	fe 01       	movw	r30, r28
    3fde:	ed 5b       	subi	r30, 0xBD	; 189
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	af e2       	ldi	r26, 0x2F	; 47
    3fe8:	b4 e4       	ldi	r27, 0x44	; 68
    3fea:	80 83       	st	Z, r24
    3fec:	91 83       	std	Z+1, r25	; 0x01
    3fee:	a2 83       	std	Z+2, r26	; 0x02
    3ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff2:	8e 01       	movw	r16, r28
    3ff4:	01 5c       	subi	r16, 0xC1	; 193
    3ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	ed 5b       	subi	r30, 0xBD	; 189
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	60 81       	ld	r22, Z
    4000:	71 81       	ldd	r23, Z+1	; 0x01
    4002:	82 81       	ldd	r24, Z+2	; 0x02
    4004:	93 81       	ldd	r25, Z+3	; 0x03
    4006:	26 e6       	ldi	r18, 0x66	; 102
    4008:	36 e6       	ldi	r19, 0x66	; 102
    400a:	46 e6       	ldi	r20, 0x66	; 102
    400c:	55 e4       	ldi	r21, 0x45	; 69
    400e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	f8 01       	movw	r30, r16
    4018:	80 83       	st	Z, r24
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	a2 83       	std	Z+2, r26	; 0x02
    401e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4020:	fe 01       	movw	r30, r28
    4022:	ff 96       	adiw	r30, 0x3f	; 63
    4024:	60 81       	ld	r22, Z
    4026:	71 81       	ldd	r23, Z+1	; 0x01
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	93 81       	ldd	r25, Z+3	; 0x03
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	40 e8       	ldi	r20, 0x80	; 128
    4032:	5f e3       	ldi	r21, 0x3F	; 63
    4034:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4038:	88 23       	and	r24, r24
    403a:	2c f4       	brge	.+10     	; 0x4046 <pick+0x536>
		__ticks = 1;
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	9e af       	std	Y+62, r25	; 0x3e
    4042:	8d af       	std	Y+61, r24	; 0x3d
    4044:	46 c0       	rjmp	.+140    	; 0x40d2 <pick+0x5c2>
	else if (__tmp > 65535)
    4046:	fe 01       	movw	r30, r28
    4048:	ff 96       	adiw	r30, 0x3f	; 63
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	3f ef       	ldi	r19, 0xFF	; 255
    4056:	4f e7       	ldi	r20, 0x7F	; 127
    4058:	57 e4       	ldi	r21, 0x47	; 71
    405a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    405e:	18 16       	cp	r1, r24
    4060:	64 f5       	brge	.+88     	; 0x40ba <pick+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4062:	fe 01       	movw	r30, r28
    4064:	ed 5b       	subi	r30, 0xBD	; 189
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e2       	ldi	r20, 0x20	; 32
    4076:	51 e4       	ldi	r21, 0x41	; 65
    4078:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	bc 01       	movw	r22, r24
    4082:	cd 01       	movw	r24, r26
    4084:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	9e af       	std	Y+62, r25	; 0x3e
    408e:	8d af       	std	Y+61, r24	; 0x3d
    4090:	0f c0       	rjmp	.+30     	; 0x40b0 <pick+0x5a0>
    4092:	80 e7       	ldi	r24, 0x70	; 112
    4094:	91 e0       	ldi	r25, 0x01	; 1
    4096:	9c af       	std	Y+60, r25	; 0x3c
    4098:	8b af       	std	Y+59, r24	; 0x3b
    409a:	8b ad       	ldd	r24, Y+59	; 0x3b
    409c:	9c ad       	ldd	r25, Y+60	; 0x3c
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	f1 f7       	brne	.-4      	; 0x409e <pick+0x58e>
    40a2:	9c af       	std	Y+60, r25	; 0x3c
    40a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    40a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	9e af       	std	Y+62, r25	; 0x3e
    40ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    40b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    40b4:	00 97       	sbiw	r24, 0x00	; 0
    40b6:	69 f7       	brne	.-38     	; 0x4092 <pick+0x582>
    40b8:	16 c0       	rjmp	.+44     	; 0x40e6 <pick+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ba:	fe 01       	movw	r30, r28
    40bc:	ff 96       	adiw	r30, 0x3f	; 63
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	9e af       	std	Y+62, r25	; 0x3e
    40d0:	8d af       	std	Y+61, r24	; 0x3d
    40d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    40d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    40d6:	9a af       	std	Y+58, r25	; 0x3a
    40d8:	89 af       	std	Y+57, r24	; 0x39
    40da:	89 ad       	ldd	r24, Y+57	; 0x39
    40dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <pick+0x5ce>
    40e2:	9a af       	std	Y+58, r25	; 0x3a
    40e4:	89 af       	std	Y+57, r24	; 0x39
		servo_2(i);
		_delay_ms(30);
	}
	
	_delay_ms(700);
	servo_1_free();
    40e6:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    40ea:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	
	// Pick up the animal by closing the grip
	for (i = 0; i < 20; i++)
    40ee:	fe 01       	movw	r30, r28
    40f0:	ef 58       	subi	r30, 0x8F	; 143
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	10 82       	st	Z, r1
    40f6:	81 c0       	rjmp	.+258    	; 0x41fa <pick+0x6ea>
	{
		servo_1(i);
    40f8:	fe 01       	movw	r30, r28
    40fa:	ef 58       	subi	r30, 0x8F	; 143
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	80 81       	ld	r24, Z
    4100:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <servo_1>
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	a0 e7       	ldi	r26, 0x70	; 112
    410a:	b1 e4       	ldi	r27, 0x41	; 65
    410c:	8d ab       	std	Y+53, r24	; 0x35
    410e:	9e ab       	std	Y+54, r25	; 0x36
    4110:	af ab       	std	Y+55, r26	; 0x37
    4112:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4114:	6d a9       	ldd	r22, Y+53	; 0x35
    4116:	7e a9       	ldd	r23, Y+54	; 0x36
    4118:	8f a9       	ldd	r24, Y+55	; 0x37
    411a:	98 ad       	ldd	r25, Y+56	; 0x38
    411c:	26 e6       	ldi	r18, 0x66	; 102
    411e:	36 e6       	ldi	r19, 0x66	; 102
    4120:	46 e6       	ldi	r20, 0x66	; 102
    4122:	55 e4       	ldi	r21, 0x45	; 69
    4124:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	89 ab       	std	Y+49, r24	; 0x31
    412e:	9a ab       	std	Y+50, r25	; 0x32
    4130:	ab ab       	std	Y+51, r26	; 0x33
    4132:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4134:	69 a9       	ldd	r22, Y+49	; 0x31
    4136:	7a a9       	ldd	r23, Y+50	; 0x32
    4138:	8b a9       	ldd	r24, Y+51	; 0x33
    413a:	9c a9       	ldd	r25, Y+52	; 0x34
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e8       	ldi	r20, 0x80	; 128
    4142:	5f e3       	ldi	r21, 0x3F	; 63
    4144:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4148:	88 23       	and	r24, r24
    414a:	2c f4       	brge	.+10     	; 0x4156 <pick+0x646>
		__ticks = 1;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	98 ab       	std	Y+48, r25	; 0x30
    4152:	8f a7       	std	Y+47, r24	; 0x2f
    4154:	3f c0       	rjmp	.+126    	; 0x41d4 <pick+0x6c4>
	else if (__tmp > 65535)
    4156:	69 a9       	ldd	r22, Y+49	; 0x31
    4158:	7a a9       	ldd	r23, Y+50	; 0x32
    415a:	8b a9       	ldd	r24, Y+51	; 0x33
    415c:	9c a9       	ldd	r25, Y+52	; 0x34
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	3f ef       	ldi	r19, 0xFF	; 255
    4162:	4f e7       	ldi	r20, 0x7F	; 127
    4164:	57 e4       	ldi	r21, 0x47	; 71
    4166:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    416a:	18 16       	cp	r1, r24
    416c:	4c f5       	brge	.+82     	; 0x41c0 <pick+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416e:	6d a9       	ldd	r22, Y+53	; 0x35
    4170:	7e a9       	ldd	r23, Y+54	; 0x36
    4172:	8f a9       	ldd	r24, Y+55	; 0x37
    4174:	98 ad       	ldd	r25, Y+56	; 0x38
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e2       	ldi	r20, 0x20	; 32
    417c:	51 e4       	ldi	r21, 0x41	; 65
    417e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	98 ab       	std	Y+48, r25	; 0x30
    4194:	8f a7       	std	Y+47, r24	; 0x2f
    4196:	0f c0       	rjmp	.+30     	; 0x41b6 <pick+0x6a6>
    4198:	80 e7       	ldi	r24, 0x70	; 112
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	9e a7       	std	Y+46, r25	; 0x2e
    419e:	8d a7       	std	Y+45, r24	; 0x2d
    41a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    41a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <pick+0x694>
    41a8:	9e a7       	std	Y+46, r25	; 0x2e
    41aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ae:	98 a9       	ldd	r25, Y+48	; 0x30
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	98 ab       	std	Y+48, r25	; 0x30
    41b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41b8:	98 a9       	ldd	r25, Y+48	; 0x30
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	69 f7       	brne	.-38     	; 0x4198 <pick+0x688>
    41be:	14 c0       	rjmp	.+40     	; 0x41e8 <pick+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c0:	69 a9       	ldd	r22, Y+49	; 0x31
    41c2:	7a a9       	ldd	r23, Y+50	; 0x32
    41c4:	8b a9       	ldd	r24, Y+51	; 0x33
    41c6:	9c a9       	ldd	r25, Y+52	; 0x34
    41c8:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	98 ab       	std	Y+48, r25	; 0x30
    41d2:	8f a7       	std	Y+47, r24	; 0x2f
    41d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    41d6:	98 a9       	ldd	r25, Y+48	; 0x30
    41d8:	9c a7       	std	Y+44, r25	; 0x2c
    41da:	8b a7       	std	Y+43, r24	; 0x2b
    41dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    41de:	9c a5       	ldd	r25, Y+44	; 0x2c
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <pick+0x6d0>
    41e4:	9c a7       	std	Y+44, r25	; 0x2c
    41e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(700);
	servo_1_free();
	servo_2_free();
	
	// Pick up the animal by closing the grip
	for (i = 0; i < 20; i++)
    41e8:	de 01       	movw	r26, r28
    41ea:	af 58       	subi	r26, 0x8F	; 143
    41ec:	bf 4f       	sbci	r27, 0xFF	; 255
    41ee:	fe 01       	movw	r30, r28
    41f0:	ef 58       	subi	r30, 0x8F	; 143
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	80 81       	ld	r24, Z
    41f6:	8f 5f       	subi	r24, 0xFF	; 255
    41f8:	8c 93       	st	X, r24
    41fa:	fe 01       	movw	r30, r28
    41fc:	ef 58       	subi	r30, 0x8F	; 143
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	80 81       	ld	r24, Z
    4202:	84 31       	cpi	r24, 0x14	; 20
    4204:	08 f4       	brcc	.+2      	; 0x4208 <pick+0x6f8>
    4206:	78 cf       	rjmp	.-272    	; 0x40f8 <pick+0x5e8>
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	af e2       	ldi	r26, 0x2F	; 47
    420e:	b4 e4       	ldi	r27, 0x44	; 68
    4210:	8f a3       	std	Y+39, r24	; 0x27
    4212:	98 a7       	std	Y+40, r25	; 0x28
    4214:	a9 a7       	std	Y+41, r26	; 0x29
    4216:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4218:	6f a1       	ldd	r22, Y+39	; 0x27
    421a:	78 a5       	ldd	r23, Y+40	; 0x28
    421c:	89 a5       	ldd	r24, Y+41	; 0x29
    421e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4220:	26 e6       	ldi	r18, 0x66	; 102
    4222:	36 e6       	ldi	r19, 0x66	; 102
    4224:	46 e6       	ldi	r20, 0x66	; 102
    4226:	55 e4       	ldi	r21, 0x45	; 69
    4228:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	8b a3       	std	Y+35, r24	; 0x23
    4232:	9c a3       	std	Y+36, r25	; 0x24
    4234:	ad a3       	std	Y+37, r26	; 0x25
    4236:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4238:	6b a1       	ldd	r22, Y+35	; 0x23
    423a:	7c a1       	ldd	r23, Y+36	; 0x24
    423c:	8d a1       	ldd	r24, Y+37	; 0x25
    423e:	9e a1       	ldd	r25, Y+38	; 0x26
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	40 e8       	ldi	r20, 0x80	; 128
    4246:	5f e3       	ldi	r21, 0x3F	; 63
    4248:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    424c:	88 23       	and	r24, r24
    424e:	2c f4       	brge	.+10     	; 0x425a <pick+0x74a>
		__ticks = 1;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	9a a3       	std	Y+34, r25	; 0x22
    4256:	89 a3       	std	Y+33, r24	; 0x21
    4258:	3f c0       	rjmp	.+126    	; 0x42d8 <pick+0x7c8>
	else if (__tmp > 65535)
    425a:	6b a1       	ldd	r22, Y+35	; 0x23
    425c:	7c a1       	ldd	r23, Y+36	; 0x24
    425e:	8d a1       	ldd	r24, Y+37	; 0x25
    4260:	9e a1       	ldd	r25, Y+38	; 0x26
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	3f ef       	ldi	r19, 0xFF	; 255
    4266:	4f e7       	ldi	r20, 0x7F	; 127
    4268:	57 e4       	ldi	r21, 0x47	; 71
    426a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    426e:	18 16       	cp	r1, r24
    4270:	4c f5       	brge	.+82     	; 0x42c4 <pick+0x7b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4272:	6f a1       	ldd	r22, Y+39	; 0x27
    4274:	78 a5       	ldd	r23, Y+40	; 0x28
    4276:	89 a5       	ldd	r24, Y+41	; 0x29
    4278:	9a a5       	ldd	r25, Y+42	; 0x2a
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e2       	ldi	r20, 0x20	; 32
    4280:	51 e4       	ldi	r21, 0x41	; 65
    4282:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	bc 01       	movw	r22, r24
    428c:	cd 01       	movw	r24, r26
    428e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	9a a3       	std	Y+34, r25	; 0x22
    4298:	89 a3       	std	Y+33, r24	; 0x21
    429a:	0f c0       	rjmp	.+30     	; 0x42ba <pick+0x7aa>
    429c:	80 e7       	ldi	r24, 0x70	; 112
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	98 a3       	std	Y+32, r25	; 0x20
    42a2:	8f 8f       	std	Y+31, r24	; 0x1f
    42a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42a6:	98 a1       	ldd	r25, Y+32	; 0x20
    42a8:	01 97       	sbiw	r24, 0x01	; 1
    42aa:	f1 f7       	brne	.-4      	; 0x42a8 <pick+0x798>
    42ac:	98 a3       	std	Y+32, r25	; 0x20
    42ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b0:	89 a1       	ldd	r24, Y+33	; 0x21
    42b2:	9a a1       	ldd	r25, Y+34	; 0x22
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	9a a3       	std	Y+34, r25	; 0x22
    42b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ba:	89 a1       	ldd	r24, Y+33	; 0x21
    42bc:	9a a1       	ldd	r25, Y+34	; 0x22
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	69 f7       	brne	.-38     	; 0x429c <pick+0x78c>
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <pick+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c4:	6b a1       	ldd	r22, Y+35	; 0x23
    42c6:	7c a1       	ldd	r23, Y+36	; 0x24
    42c8:	8d a1       	ldd	r24, Y+37	; 0x25
    42ca:	9e a1       	ldd	r25, Y+38	; 0x26
    42cc:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	9a a3       	std	Y+34, r25	; 0x22
    42d6:	89 a3       	std	Y+33, r24	; 0x21
    42d8:	89 a1       	ldd	r24, Y+33	; 0x21
    42da:	9a a1       	ldd	r25, Y+34	; 0x22
    42dc:	9e 8f       	std	Y+30, r25	; 0x1e
    42de:	8d 8f       	std	Y+29, r24	; 0x1d
    42e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <pick+0x7d4>
    42e8:	9e 8f       	std	Y+30, r25	; 0x1e
    42ea:	8d 8f       	std	Y+29, r24	; 0x1d
		servo_1(i);
		_delay_ms(15);
	}

	_delay_ms(700);
	servo_1_free();
    42ec:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    42f0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	
	// Lift the animal by rotating the arm upwards
	for(i=0;i<5;i++)
    42f4:	fe 01       	movw	r30, r28
    42f6:	ef 58       	subi	r30, 0x8F	; 143
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	10 82       	st	Z, r1
    42fc:	81 c0       	rjmp	.+258    	; 0x4400 <pick+0x8f0>
	{
		servo_2(i);
    42fe:	fe 01       	movw	r30, r28
    4300:	ef 58       	subi	r30, 0x8F	; 143
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <servo_2>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	ac e0       	ldi	r26, 0x0C	; 12
    4310:	b2 e4       	ldi	r27, 0x42	; 66
    4312:	89 8f       	std	Y+25, r24	; 0x19
    4314:	9a 8f       	std	Y+26, r25	; 0x1a
    4316:	ab 8f       	std	Y+27, r26	; 0x1b
    4318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431a:	69 8d       	ldd	r22, Y+25	; 0x19
    431c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    431e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4322:	26 e6       	ldi	r18, 0x66	; 102
    4324:	36 e6       	ldi	r19, 0x66	; 102
    4326:	46 e6       	ldi	r20, 0x66	; 102
    4328:	55 e4       	ldi	r21, 0x45	; 69
    432a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	8d 8b       	std	Y+21, r24	; 0x15
    4334:	9e 8b       	std	Y+22, r25	; 0x16
    4336:	af 8b       	std	Y+23, r26	; 0x17
    4338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    433a:	6d 89       	ldd	r22, Y+21	; 0x15
    433c:	7e 89       	ldd	r23, Y+22	; 0x16
    433e:	8f 89       	ldd	r24, Y+23	; 0x17
    4340:	98 8d       	ldd	r25, Y+24	; 0x18
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	2c f4       	brge	.+10     	; 0x435c <pick+0x84c>
		__ticks = 1;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	9c 8b       	std	Y+20, r25	; 0x14
    4358:	8b 8b       	std	Y+19, r24	; 0x13
    435a:	3f c0       	rjmp	.+126    	; 0x43da <pick+0x8ca>
	else if (__tmp > 65535)
    435c:	6d 89       	ldd	r22, Y+21	; 0x15
    435e:	7e 89       	ldd	r23, Y+22	; 0x16
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	98 8d       	ldd	r25, Y+24	; 0x18
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	4c f5       	brge	.+82     	; 0x43c6 <pick+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	69 8d       	ldd	r22, Y+25	; 0x19
    4376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	9c 8b       	std	Y+20, r25	; 0x14
    439a:	8b 8b       	std	Y+19, r24	; 0x13
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <pick+0x8ac>
    439e:	80 e7       	ldi	r24, 0x70	; 112
    43a0:	91 e0       	ldi	r25, 0x01	; 1
    43a2:	9a 8b       	std	Y+18, r25	; 0x12
    43a4:	89 8b       	std	Y+17, r24	; 0x11
    43a6:	89 89       	ldd	r24, Y+17	; 0x11
    43a8:	9a 89       	ldd	r25, Y+18	; 0x12
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <pick+0x89a>
    43ae:	9a 8b       	std	Y+18, r25	; 0x12
    43b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b2:	8b 89       	ldd	r24, Y+19	; 0x13
    43b4:	9c 89       	ldd	r25, Y+20	; 0x14
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	9c 8b       	std	Y+20, r25	; 0x14
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43bc:	8b 89       	ldd	r24, Y+19	; 0x13
    43be:	9c 89       	ldd	r25, Y+20	; 0x14
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f7       	brne	.-38     	; 0x439e <pick+0x88e>
    43c4:	14 c0       	rjmp	.+40     	; 0x43ee <pick+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c6:	6d 89       	ldd	r22, Y+21	; 0x15
    43c8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ca:	8f 89       	ldd	r24, Y+23	; 0x17
    43cc:	98 8d       	ldd	r25, Y+24	; 0x18
    43ce:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	8b 89       	ldd	r24, Y+19	; 0x13
    43dc:	9c 89       	ldd	r25, Y+20	; 0x14
    43de:	98 8b       	std	Y+16, r25	; 0x10
    43e0:	8f 87       	std	Y+15, r24	; 0x0f
    43e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e4:	98 89       	ldd	r25, Y+16	; 0x10
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <pick+0x8d6>
    43ea:	98 8b       	std	Y+16, r25	; 0x10
    43ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(700);
	servo_1_free();
	servo_2_free();
	
	// Lift the animal by rotating the arm upwards
	for(i=0;i<5;i++)
    43ee:	de 01       	movw	r26, r28
    43f0:	af 58       	subi	r26, 0x8F	; 143
    43f2:	bf 4f       	sbci	r27, 0xFF	; 255
    43f4:	fe 01       	movw	r30, r28
    43f6:	ef 58       	subi	r30, 0x8F	; 143
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	80 81       	ld	r24, Z
    43fc:	8f 5f       	subi	r24, 0xFF	; 255
    43fe:	8c 93       	st	X, r24
    4400:	fe 01       	movw	r30, r28
    4402:	ef 58       	subi	r30, 0x8F	; 143
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	80 81       	ld	r24, Z
    4408:	85 30       	cpi	r24, 0x05	; 5
    440a:	08 f4       	brcc	.+2      	; 0x440e <pick+0x8fe>
    440c:	78 cf       	rjmp	.-272    	; 0x42fe <pick+0x7ee>
    440e:	80 e0       	ldi	r24, 0x00	; 0
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	af e2       	ldi	r26, 0x2F	; 47
    4414:	b4 e4       	ldi	r27, 0x44	; 68
    4416:	8b 87       	std	Y+11, r24	; 0x0b
    4418:	9c 87       	std	Y+12, r25	; 0x0c
    441a:	ad 87       	std	Y+13, r26	; 0x0d
    441c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4420:	7c 85       	ldd	r23, Y+12	; 0x0c
    4422:	8d 85       	ldd	r24, Y+13	; 0x0d
    4424:	9e 85       	ldd	r25, Y+14	; 0x0e
    4426:	26 e6       	ldi	r18, 0x66	; 102
    4428:	36 e6       	ldi	r19, 0x66	; 102
    442a:	46 e6       	ldi	r20, 0x66	; 102
    442c:	55 e4       	ldi	r21, 0x45	; 69
    442e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	8f 83       	std	Y+7, r24	; 0x07
    4438:	98 87       	std	Y+8, r25	; 0x08
    443a:	a9 87       	std	Y+9, r26	; 0x09
    443c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    443e:	6f 81       	ldd	r22, Y+7	; 0x07
    4440:	78 85       	ldd	r23, Y+8	; 0x08
    4442:	89 85       	ldd	r24, Y+9	; 0x09
    4444:	9a 85       	ldd	r25, Y+10	; 0x0a
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e8       	ldi	r20, 0x80	; 128
    444c:	5f e3       	ldi	r21, 0x3F	; 63
    444e:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4452:	88 23       	and	r24, r24
    4454:	2c f4       	brge	.+10     	; 0x4460 <pick+0x950>
		__ticks = 1;
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	9e 83       	std	Y+6, r25	; 0x06
    445c:	8d 83       	std	Y+5, r24	; 0x05
    445e:	3f c0       	rjmp	.+126    	; 0x44de <pick+0x9ce>
	else if (__tmp > 65535)
    4460:	6f 81       	ldd	r22, Y+7	; 0x07
    4462:	78 85       	ldd	r23, Y+8	; 0x08
    4464:	89 85       	ldd	r24, Y+9	; 0x09
    4466:	9a 85       	ldd	r25, Y+10	; 0x0a
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	3f ef       	ldi	r19, 0xFF	; 255
    446c:	4f e7       	ldi	r20, 0x7F	; 127
    446e:	57 e4       	ldi	r21, 0x47	; 71
    4470:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4474:	18 16       	cp	r1, r24
    4476:	4c f5       	brge	.+82     	; 0x44ca <pick+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4478:	6b 85       	ldd	r22, Y+11	; 0x0b
    447a:	7c 85       	ldd	r23, Y+12	; 0x0c
    447c:	8d 85       	ldd	r24, Y+13	; 0x0d
    447e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	40 e2       	ldi	r20, 0x20	; 32
    4486:	51 e4       	ldi	r21, 0x41	; 65
    4488:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	9e 83       	std	Y+6, r25	; 0x06
    449e:	8d 83       	std	Y+5, r24	; 0x05
    44a0:	0f c0       	rjmp	.+30     	; 0x44c0 <pick+0x9b0>
    44a2:	80 e7       	ldi	r24, 0x70	; 112
    44a4:	91 e0       	ldi	r25, 0x01	; 1
    44a6:	9c 83       	std	Y+4, r25	; 0x04
    44a8:	8b 83       	std	Y+3, r24	; 0x03
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
    44ac:	9c 81       	ldd	r25, Y+4	; 0x04
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	f1 f7       	brne	.-4      	; 0x44ae <pick+0x99e>
    44b2:	9c 83       	std	Y+4, r25	; 0x04
    44b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b6:	8d 81       	ldd	r24, Y+5	; 0x05
    44b8:	9e 81       	ldd	r25, Y+6	; 0x06
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	9e 83       	std	Y+6, r25	; 0x06
    44be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c0:	8d 81       	ldd	r24, Y+5	; 0x05
    44c2:	9e 81       	ldd	r25, Y+6	; 0x06
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	69 f7       	brne	.-38     	; 0x44a2 <pick+0x992>
    44c8:	14 c0       	rjmp	.+40     	; 0x44f2 <pick+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ca:	6f 81       	ldd	r22, Y+7	; 0x07
    44cc:	78 85       	ldd	r23, Y+8	; 0x08
    44ce:	89 85       	ldd	r24, Y+9	; 0x09
    44d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d2:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	8d 83       	std	Y+5, r24	; 0x05
    44de:	8d 81       	ldd	r24, Y+5	; 0x05
    44e0:	9e 81       	ldd	r25, Y+6	; 0x06
    44e2:	9a 83       	std	Y+2, r25	; 0x02
    44e4:	89 83       	std	Y+1, r24	; 0x01
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
    44e8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ea:	01 97       	sbiw	r24, 0x01	; 1
    44ec:	f1 f7       	brne	.-4      	; 0x44ea <pick+0x9da>
    44ee:	9a 83       	std	Y+2, r25	; 0x02
    44f0:	89 83       	std	Y+1, r24	; 0x01
	{
		servo_2(i);
		_delay_ms(35);
	}
	_delay_ms(700);
	servo_1_free();
    44f2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    44f6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	
	return;
}
    44fa:	cf 58       	subi	r28, 0x8F	; 143
    44fc:	df 4f       	sbci	r29, 0xFF	; 255
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	f8 94       	cli
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	cd bf       	out	0x3d, r28	; 61
    4508:	cf 91       	pop	r28
    450a:	df 91       	pop	r29
    450c:	1f 91       	pop	r17
    450e:	0f 91       	pop	r16
    4510:	08 95       	ret

00004512 <drop>:

/* Function to drop the animal at the habitat using arm */
void drop()
{
    4512:	0f 93       	push	r16
    4514:	1f 93       	push	r17
    4516:	df 93       	push	r29
    4518:	cf 93       	push	r28
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	c1 57       	subi	r28, 0x71	; 113
    4520:	d0 40       	sbci	r29, 0x00	; 0
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: drop
	Input: None
	Output: None
	*/
	init_devices();
    452c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	unsigned char i = 0;
    4530:	fe 01       	movw	r30, r28
    4532:	ef 58       	subi	r30, 0x8F	; 143
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	10 82       	st	Z, r1
	// Bend the arm towards the habitat
	for (i = 0; i < 45; i++)
    4538:	fe 01       	movw	r30, r28
    453a:	ef 58       	subi	r30, 0x8F	; 143
    453c:	ff 4f       	sbci	r31, 0xFF	; 255
    453e:	10 82       	st	Z, r1
    4540:	c2 c0       	rjmp	.+388    	; 0x46c6 <drop+0x1b4>
	{
		servo_2(i);
    4542:	fe 01       	movw	r30, r28
    4544:	ef 58       	subi	r30, 0x8F	; 143
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	80 81       	ld	r24, Z
    454a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <servo_2>
    454e:	fe 01       	movw	r30, r28
    4550:	e3 59       	subi	r30, 0x93	; 147
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	a0 ef       	ldi	r26, 0xF0	; 240
    455a:	b1 e4       	ldi	r27, 0x41	; 65
    455c:	80 83       	st	Z, r24
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	a2 83       	std	Z+2, r26	; 0x02
    4562:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4564:	8e 01       	movw	r16, r28
    4566:	07 59       	subi	r16, 0x97	; 151
    4568:	1f 4f       	sbci	r17, 0xFF	; 255
    456a:	fe 01       	movw	r30, r28
    456c:	e3 59       	subi	r30, 0x93	; 147
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	60 81       	ld	r22, Z
    4572:	71 81       	ldd	r23, Z+1	; 0x01
    4574:	82 81       	ldd	r24, Z+2	; 0x02
    4576:	93 81       	ldd	r25, Z+3	; 0x03
    4578:	26 e6       	ldi	r18, 0x66	; 102
    457a:	36 e6       	ldi	r19, 0x66	; 102
    457c:	46 e6       	ldi	r20, 0x66	; 102
    457e:	55 e4       	ldi	r21, 0x45	; 69
    4580:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	f8 01       	movw	r30, r16
    458a:	80 83       	st	Z, r24
    458c:	91 83       	std	Z+1, r25	; 0x01
    458e:	a2 83       	std	Z+2, r26	; 0x02
    4590:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4592:	fe 01       	movw	r30, r28
    4594:	e7 59       	subi	r30, 0x97	; 151
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	60 81       	ld	r22, Z
    459a:	71 81       	ldd	r23, Z+1	; 0x01
    459c:	82 81       	ldd	r24, Z+2	; 0x02
    459e:	93 81       	ldd	r25, Z+3	; 0x03
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	40 e8       	ldi	r20, 0x80	; 128
    45a6:	5f e3       	ldi	r21, 0x3F	; 63
    45a8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    45ac:	88 23       	and	r24, r24
    45ae:	44 f4       	brge	.+16     	; 0x45c0 <drop+0xae>
		__ticks = 1;
    45b0:	fe 01       	movw	r30, r28
    45b2:	e9 59       	subi	r30, 0x99	; 153
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	91 83       	std	Z+1, r25	; 0x01
    45bc:	80 83       	st	Z, r24
    45be:	64 c0       	rjmp	.+200    	; 0x4688 <drop+0x176>
	else if (__tmp > 65535)
    45c0:	fe 01       	movw	r30, r28
    45c2:	e7 59       	subi	r30, 0x97	; 151
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	60 81       	ld	r22, Z
    45c8:	71 81       	ldd	r23, Z+1	; 0x01
    45ca:	82 81       	ldd	r24, Z+2	; 0x02
    45cc:	93 81       	ldd	r25, Z+3	; 0x03
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	3f ef       	ldi	r19, 0xFF	; 255
    45d2:	4f e7       	ldi	r20, 0x7F	; 127
    45d4:	57 e4       	ldi	r21, 0x47	; 71
    45d6:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    45da:	18 16       	cp	r1, r24
    45dc:	0c f0       	brlt	.+2      	; 0x45e0 <drop+0xce>
    45de:	43 c0       	rjmp	.+134    	; 0x4666 <drop+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e0:	fe 01       	movw	r30, r28
    45e2:	e3 59       	subi	r30, 0x93	; 147
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	60 81       	ld	r22, Z
    45e8:	71 81       	ldd	r23, Z+1	; 0x01
    45ea:	82 81       	ldd	r24, Z+2	; 0x02
    45ec:	93 81       	ldd	r25, Z+3	; 0x03
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	40 e2       	ldi	r20, 0x20	; 32
    45f4:	51 e4       	ldi	r21, 0x41	; 65
    45f6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	8e 01       	movw	r16, r28
    4600:	09 59       	subi	r16, 0x99	; 153
    4602:	1f 4f       	sbci	r17, 0xFF	; 255
    4604:	bc 01       	movw	r22, r24
    4606:	cd 01       	movw	r24, r26
    4608:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	f8 01       	movw	r30, r16
    4612:	91 83       	std	Z+1, r25	; 0x01
    4614:	80 83       	st	Z, r24
    4616:	1f c0       	rjmp	.+62     	; 0x4656 <drop+0x144>
    4618:	fe 01       	movw	r30, r28
    461a:	eb 59       	subi	r30, 0x9B	; 155
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	80 e7       	ldi	r24, 0x70	; 112
    4620:	91 e0       	ldi	r25, 0x01	; 1
    4622:	91 83       	std	Z+1, r25	; 0x01
    4624:	80 83       	st	Z, r24
    4626:	fe 01       	movw	r30, r28
    4628:	eb 59       	subi	r30, 0x9B	; 155
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	80 81       	ld	r24, Z
    462e:	91 81       	ldd	r25, Z+1	; 0x01
    4630:	01 97       	sbiw	r24, 0x01	; 1
    4632:	f1 f7       	brne	.-4      	; 0x4630 <drop+0x11e>
    4634:	fe 01       	movw	r30, r28
    4636:	eb 59       	subi	r30, 0x9B	; 155
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	91 83       	std	Z+1, r25	; 0x01
    463c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    463e:	de 01       	movw	r26, r28
    4640:	a9 59       	subi	r26, 0x99	; 153
    4642:	bf 4f       	sbci	r27, 0xFF	; 255
    4644:	fe 01       	movw	r30, r28
    4646:	e9 59       	subi	r30, 0x99	; 153
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	80 81       	ld	r24, Z
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	11 96       	adiw	r26, 0x01	; 1
    4652:	9c 93       	st	X, r25
    4654:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4656:	fe 01       	movw	r30, r28
    4658:	e9 59       	subi	r30, 0x99	; 153
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	80 81       	ld	r24, Z
    465e:	91 81       	ldd	r25, Z+1	; 0x01
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	d1 f6       	brne	.-76     	; 0x4618 <drop+0x106>
    4664:	27 c0       	rjmp	.+78     	; 0x46b4 <drop+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4666:	8e 01       	movw	r16, r28
    4668:	09 59       	subi	r16, 0x99	; 153
    466a:	1f 4f       	sbci	r17, 0xFF	; 255
    466c:	fe 01       	movw	r30, r28
    466e:	e7 59       	subi	r30, 0x97	; 151
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	82 81       	ldd	r24, Z+2	; 0x02
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	f8 01       	movw	r30, r16
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	80 83       	st	Z, r24
    4688:	de 01       	movw	r26, r28
    468a:	ad 59       	subi	r26, 0x9D	; 157
    468c:	bf 4f       	sbci	r27, 0xFF	; 255
    468e:	fe 01       	movw	r30, r28
    4690:	e9 59       	subi	r30, 0x99	; 153
    4692:	ff 4f       	sbci	r31, 0xFF	; 255
    4694:	80 81       	ld	r24, Z
    4696:	91 81       	ldd	r25, Z+1	; 0x01
    4698:	8d 93       	st	X+, r24
    469a:	9c 93       	st	X, r25
    469c:	fe 01       	movw	r30, r28
    469e:	ed 59       	subi	r30, 0x9D	; 157
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	80 81       	ld	r24, Z
    46a4:	91 81       	ldd	r25, Z+1	; 0x01
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	f1 f7       	brne	.-4      	; 0x46a6 <drop+0x194>
    46aa:	fe 01       	movw	r30, r28
    46ac:	ed 59       	subi	r30, 0x9D	; 157
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	91 83       	std	Z+1, r25	; 0x01
    46b2:	80 83       	st	Z, r24
	Output: None
	*/
	init_devices();
	unsigned char i = 0;
	// Bend the arm towards the habitat
	for (i = 0; i < 45; i++)
    46b4:	de 01       	movw	r26, r28
    46b6:	af 58       	subi	r26, 0x8F	; 143
    46b8:	bf 4f       	sbci	r27, 0xFF	; 255
    46ba:	fe 01       	movw	r30, r28
    46bc:	ef 58       	subi	r30, 0x8F	; 143
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	80 81       	ld	r24, Z
    46c2:	8f 5f       	subi	r24, 0xFF	; 255
    46c4:	8c 93       	st	X, r24
    46c6:	fe 01       	movw	r30, r28
    46c8:	ef 58       	subi	r30, 0x8F	; 143
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	80 81       	ld	r24, Z
    46ce:	8d 32       	cpi	r24, 0x2D	; 45
    46d0:	08 f4       	brcc	.+2      	; 0x46d4 <drop+0x1c2>
    46d2:	37 cf       	rjmp	.-402    	; 0x4542 <drop+0x30>
    46d4:	fe 01       	movw	r30, r28
    46d6:	e1 5a       	subi	r30, 0xA1	; 161
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	af e2       	ldi	r26, 0x2F	; 47
    46e0:	b4 e4       	ldi	r27, 0x44	; 68
    46e2:	80 83       	st	Z, r24
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	a2 83       	std	Z+2, r26	; 0x02
    46e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ea:	8e 01       	movw	r16, r28
    46ec:	05 5a       	subi	r16, 0xA5	; 165
    46ee:	1f 4f       	sbci	r17, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	e1 5a       	subi	r30, 0xA1	; 161
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	26 e6       	ldi	r18, 0x66	; 102
    4700:	36 e6       	ldi	r19, 0x66	; 102
    4702:	46 e6       	ldi	r20, 0x66	; 102
    4704:	55 e4       	ldi	r21, 0x45	; 69
    4706:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	f8 01       	movw	r30, r16
    4710:	80 83       	st	Z, r24
    4712:	91 83       	std	Z+1, r25	; 0x01
    4714:	a2 83       	std	Z+2, r26	; 0x02
    4716:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4718:	fe 01       	movw	r30, r28
    471a:	e5 5a       	subi	r30, 0xA5	; 165
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	40 e8       	ldi	r20, 0x80	; 128
    472c:	5f e3       	ldi	r21, 0x3F	; 63
    472e:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4732:	88 23       	and	r24, r24
    4734:	44 f4       	brge	.+16     	; 0x4746 <drop+0x234>
		__ticks = 1;
    4736:	fe 01       	movw	r30, r28
    4738:	e7 5a       	subi	r30, 0xA7	; 167
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	91 83       	std	Z+1, r25	; 0x01
    4742:	80 83       	st	Z, r24
    4744:	64 c0       	rjmp	.+200    	; 0x480e <drop+0x2fc>
	else if (__tmp > 65535)
    4746:	fe 01       	movw	r30, r28
    4748:	e5 5a       	subi	r30, 0xA5	; 165
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	3f ef       	ldi	r19, 0xFF	; 255
    4758:	4f e7       	ldi	r20, 0x7F	; 127
    475a:	57 e4       	ldi	r21, 0x47	; 71
    475c:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4760:	18 16       	cp	r1, r24
    4762:	0c f0       	brlt	.+2      	; 0x4766 <drop+0x254>
    4764:	43 c0       	rjmp	.+134    	; 0x47ec <drop+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4766:	fe 01       	movw	r30, r28
    4768:	e1 5a       	subi	r30, 0xA1	; 161
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e2       	ldi	r20, 0x20	; 32
    477a:	51 e4       	ldi	r21, 0x41	; 65
    477c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4780:	dc 01       	movw	r26, r24
    4782:	cb 01       	movw	r24, r22
    4784:	8e 01       	movw	r16, r28
    4786:	07 5a       	subi	r16, 0xA7	; 167
    4788:	1f 4f       	sbci	r17, 0xFF	; 255
    478a:	bc 01       	movw	r22, r24
    478c:	cd 01       	movw	r24, r26
    478e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	f8 01       	movw	r30, r16
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	80 83       	st	Z, r24
    479c:	1f c0       	rjmp	.+62     	; 0x47dc <drop+0x2ca>
    479e:	fe 01       	movw	r30, r28
    47a0:	e9 5a       	subi	r30, 0xA9	; 169
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	80 e7       	ldi	r24, 0x70	; 112
    47a6:	91 e0       	ldi	r25, 0x01	; 1
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
    47ac:	fe 01       	movw	r30, r28
    47ae:	e9 5a       	subi	r30, 0xA9	; 169
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	80 81       	ld	r24, Z
    47b4:	91 81       	ldd	r25, Z+1	; 0x01
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	f1 f7       	brne	.-4      	; 0x47b6 <drop+0x2a4>
    47ba:	fe 01       	movw	r30, r28
    47bc:	e9 5a       	subi	r30, 0xA9	; 169
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c4:	de 01       	movw	r26, r28
    47c6:	a7 5a       	subi	r26, 0xA7	; 167
    47c8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ca:	fe 01       	movw	r30, r28
    47cc:	e7 5a       	subi	r30, 0xA7	; 167
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	11 96       	adiw	r26, 0x01	; 1
    47d8:	9c 93       	st	X, r25
    47da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47dc:	fe 01       	movw	r30, r28
    47de:	e7 5a       	subi	r30, 0xA7	; 167
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	80 81       	ld	r24, Z
    47e4:	91 81       	ldd	r25, Z+1	; 0x01
    47e6:	00 97       	sbiw	r24, 0x00	; 0
    47e8:	d1 f6       	brne	.-76     	; 0x479e <drop+0x28c>
    47ea:	27 c0       	rjmp	.+78     	; 0x483a <drop+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ec:	8e 01       	movw	r16, r28
    47ee:	07 5a       	subi	r16, 0xA7	; 167
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e5 5a       	subi	r30, 0xA5	; 165
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	f8 01       	movw	r30, r16
    480a:	91 83       	std	Z+1, r25	; 0x01
    480c:	80 83       	st	Z, r24
    480e:	de 01       	movw	r26, r28
    4810:	ab 5a       	subi	r26, 0xAB	; 171
    4812:	bf 4f       	sbci	r27, 0xFF	; 255
    4814:	fe 01       	movw	r30, r28
    4816:	e7 5a       	subi	r30, 0xA7	; 167
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	80 81       	ld	r24, Z
    481c:	91 81       	ldd	r25, Z+1	; 0x01
    481e:	8d 93       	st	X+, r24
    4820:	9c 93       	st	X, r25
    4822:	fe 01       	movw	r30, r28
    4824:	eb 5a       	subi	r30, 0xAB	; 171
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	80 81       	ld	r24, Z
    482a:	91 81       	ldd	r25, Z+1	; 0x01
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	f1 f7       	brne	.-4      	; 0x482c <drop+0x31a>
    4830:	fe 01       	movw	r30, r28
    4832:	eb 5a       	subi	r30, 0xAB	; 171
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	91 83       	std	Z+1, r25	; 0x01
    4838:	80 83       	st	Z, r24
		servo_2(i);
		_delay_ms(30);
	}
	
	_delay_ms(700);
	servo_1_free();
    483a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    483e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	
	// Open the grip and drop the animal
	for (i = 0; i < 10; i++)
    4842:	fe 01       	movw	r30, r28
    4844:	ef 58       	subi	r30, 0x8F	; 143
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	10 82       	st	Z, r1
    484a:	c2 c0       	rjmp	.+388    	; 0x49d0 <drop+0x4be>
	{
		servo_1(i);
    484c:	fe 01       	movw	r30, r28
    484e:	ef 58       	subi	r30, 0x8F	; 143
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	80 81       	ld	r24, Z
    4854:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <servo_1>
    4858:	fe 01       	movw	r30, r28
    485a:	ef 5a       	subi	r30, 0xAF	; 175
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	a0 ef       	ldi	r26, 0xF0	; 240
    4864:	b1 e4       	ldi	r27, 0x41	; 65
    4866:	80 83       	st	Z, r24
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	a2 83       	std	Z+2, r26	; 0x02
    486c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    486e:	8e 01       	movw	r16, r28
    4870:	03 5b       	subi	r16, 0xB3	; 179
    4872:	1f 4f       	sbci	r17, 0xFF	; 255
    4874:	fe 01       	movw	r30, r28
    4876:	ef 5a       	subi	r30, 0xAF	; 175
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	60 81       	ld	r22, Z
    487c:	71 81       	ldd	r23, Z+1	; 0x01
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	26 e6       	ldi	r18, 0x66	; 102
    4884:	36 e6       	ldi	r19, 0x66	; 102
    4886:	46 e6       	ldi	r20, 0x66	; 102
    4888:	55 e4       	ldi	r21, 0x45	; 69
    488a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	f8 01       	movw	r30, r16
    4894:	80 83       	st	Z, r24
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	a2 83       	std	Z+2, r26	; 0x02
    489a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    489c:	fe 01       	movw	r30, r28
    489e:	e3 5b       	subi	r30, 0xB3	; 179
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	60 81       	ld	r22, Z
    48a4:	71 81       	ldd	r23, Z+1	; 0x01
    48a6:	82 81       	ldd	r24, Z+2	; 0x02
    48a8:	93 81       	ldd	r25, Z+3	; 0x03
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	40 e8       	ldi	r20, 0x80	; 128
    48b0:	5f e3       	ldi	r21, 0x3F	; 63
    48b2:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    48b6:	88 23       	and	r24, r24
    48b8:	44 f4       	brge	.+16     	; 0x48ca <drop+0x3b8>
		__ticks = 1;
    48ba:	fe 01       	movw	r30, r28
    48bc:	e5 5b       	subi	r30, 0xB5	; 181
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	80 83       	st	Z, r24
    48c8:	64 c0       	rjmp	.+200    	; 0x4992 <drop+0x480>
	else if (__tmp > 65535)
    48ca:	fe 01       	movw	r30, r28
    48cc:	e3 5b       	subi	r30, 0xB3	; 179
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	3f ef       	ldi	r19, 0xFF	; 255
    48dc:	4f e7       	ldi	r20, 0x7F	; 127
    48de:	57 e4       	ldi	r21, 0x47	; 71
    48e0:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    48e4:	18 16       	cp	r1, r24
    48e6:	0c f0       	brlt	.+2      	; 0x48ea <drop+0x3d8>
    48e8:	43 c0       	rjmp	.+134    	; 0x4970 <drop+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ea:	fe 01       	movw	r30, r28
    48ec:	ef 5a       	subi	r30, 0xAF	; 175
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	60 81       	ld	r22, Z
    48f2:	71 81       	ldd	r23, Z+1	; 0x01
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	93 81       	ldd	r25, Z+3	; 0x03
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e2       	ldi	r20, 0x20	; 32
    48fe:	51 e4       	ldi	r21, 0x41	; 65
    4900:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	8e 01       	movw	r16, r28
    490a:	05 5b       	subi	r16, 0xB5	; 181
    490c:	1f 4f       	sbci	r17, 0xFF	; 255
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	f8 01       	movw	r30, r16
    491c:	91 83       	std	Z+1, r25	; 0x01
    491e:	80 83       	st	Z, r24
    4920:	1f c0       	rjmp	.+62     	; 0x4960 <drop+0x44e>
    4922:	fe 01       	movw	r30, r28
    4924:	e7 5b       	subi	r30, 0xB7	; 183
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 e7       	ldi	r24, 0x70	; 112
    492a:	91 e0       	ldi	r25, 0x01	; 1
    492c:	91 83       	std	Z+1, r25	; 0x01
    492e:	80 83       	st	Z, r24
    4930:	fe 01       	movw	r30, r28
    4932:	e7 5b       	subi	r30, 0xB7	; 183
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	80 81       	ld	r24, Z
    4938:	91 81       	ldd	r25, Z+1	; 0x01
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	f1 f7       	brne	.-4      	; 0x493a <drop+0x428>
    493e:	fe 01       	movw	r30, r28
    4940:	e7 5b       	subi	r30, 0xB7	; 183
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	91 83       	std	Z+1, r25	; 0x01
    4946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4948:	de 01       	movw	r26, r28
    494a:	a5 5b       	subi	r26, 0xB5	; 181
    494c:	bf 4f       	sbci	r27, 0xFF	; 255
    494e:	fe 01       	movw	r30, r28
    4950:	e5 5b       	subi	r30, 0xB5	; 181
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 81       	ld	r24, Z
    4956:	91 81       	ldd	r25, Z+1	; 0x01
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	11 96       	adiw	r26, 0x01	; 1
    495c:	9c 93       	st	X, r25
    495e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4960:	fe 01       	movw	r30, r28
    4962:	e5 5b       	subi	r30, 0xB5	; 181
    4964:	ff 4f       	sbci	r31, 0xFF	; 255
    4966:	80 81       	ld	r24, Z
    4968:	91 81       	ldd	r25, Z+1	; 0x01
    496a:	00 97       	sbiw	r24, 0x00	; 0
    496c:	d1 f6       	brne	.-76     	; 0x4922 <drop+0x410>
    496e:	27 c0       	rjmp	.+78     	; 0x49be <drop+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4970:	8e 01       	movw	r16, r28
    4972:	05 5b       	subi	r16, 0xB5	; 181
    4974:	1f 4f       	sbci	r17, 0xFF	; 255
    4976:	fe 01       	movw	r30, r28
    4978:	e3 5b       	subi	r30, 0xB3	; 179
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	60 81       	ld	r22, Z
    497e:	71 81       	ldd	r23, Z+1	; 0x01
    4980:	82 81       	ldd	r24, Z+2	; 0x02
    4982:	93 81       	ldd	r25, Z+3	; 0x03
    4984:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	f8 01       	movw	r30, r16
    498e:	91 83       	std	Z+1, r25	; 0x01
    4990:	80 83       	st	Z, r24
    4992:	de 01       	movw	r26, r28
    4994:	a9 5b       	subi	r26, 0xB9	; 185
    4996:	bf 4f       	sbci	r27, 0xFF	; 255
    4998:	fe 01       	movw	r30, r28
    499a:	e5 5b       	subi	r30, 0xB5	; 181
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	80 81       	ld	r24, Z
    49a0:	91 81       	ldd	r25, Z+1	; 0x01
    49a2:	8d 93       	st	X+, r24
    49a4:	9c 93       	st	X, r25
    49a6:	fe 01       	movw	r30, r28
    49a8:	e9 5b       	subi	r30, 0xB9	; 185
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	80 81       	ld	r24, Z
    49ae:	91 81       	ldd	r25, Z+1	; 0x01
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	f1 f7       	brne	.-4      	; 0x49b0 <drop+0x49e>
    49b4:	fe 01       	movw	r30, r28
    49b6:	e9 5b       	subi	r30, 0xB9	; 185
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	91 83       	std	Z+1, r25	; 0x01
    49bc:	80 83       	st	Z, r24
	_delay_ms(700);
	servo_1_free();
	servo_2_free();
	
	// Open the grip and drop the animal
	for (i = 0; i < 10; i++)
    49be:	de 01       	movw	r26, r28
    49c0:	af 58       	subi	r26, 0x8F	; 143
    49c2:	bf 4f       	sbci	r27, 0xFF	; 255
    49c4:	fe 01       	movw	r30, r28
    49c6:	ef 58       	subi	r30, 0x8F	; 143
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	80 81       	ld	r24, Z
    49cc:	8f 5f       	subi	r24, 0xFF	; 255
    49ce:	8c 93       	st	X, r24
    49d0:	fe 01       	movw	r30, r28
    49d2:	ef 58       	subi	r30, 0x8F	; 143
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	80 81       	ld	r24, Z
    49d8:	8a 30       	cpi	r24, 0x0A	; 10
    49da:	08 f4       	brcc	.+2      	; 0x49de <drop+0x4cc>
    49dc:	37 cf       	rjmp	.-402    	; 0x484c <drop+0x33a>
    49de:	fe 01       	movw	r30, r28
    49e0:	ed 5b       	subi	r30, 0xBD	; 189
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	af e2       	ldi	r26, 0x2F	; 47
    49ea:	b4 e4       	ldi	r27, 0x44	; 68
    49ec:	80 83       	st	Z, r24
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	a2 83       	std	Z+2, r26	; 0x02
    49f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f4:	8e 01       	movw	r16, r28
    49f6:	01 5c       	subi	r16, 0xC1	; 193
    49f8:	1f 4f       	sbci	r17, 0xFF	; 255
    49fa:	fe 01       	movw	r30, r28
    49fc:	ed 5b       	subi	r30, 0xBD	; 189
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	60 81       	ld	r22, Z
    4a02:	71 81       	ldd	r23, Z+1	; 0x01
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	26 e6       	ldi	r18, 0x66	; 102
    4a0a:	36 e6       	ldi	r19, 0x66	; 102
    4a0c:	46 e6       	ldi	r20, 0x66	; 102
    4a0e:	55 e4       	ldi	r21, 0x45	; 69
    4a10:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	f8 01       	movw	r30, r16
    4a1a:	80 83       	st	Z, r24
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	a2 83       	std	Z+2, r26	; 0x02
    4a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a22:	fe 01       	movw	r30, r28
    4a24:	ff 96       	adiw	r30, 0x3f	; 63
    4a26:	60 81       	ld	r22, Z
    4a28:	71 81       	ldd	r23, Z+1	; 0x01
    4a2a:	82 81       	ldd	r24, Z+2	; 0x02
    4a2c:	93 81       	ldd	r25, Z+3	; 0x03
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e8       	ldi	r20, 0x80	; 128
    4a34:	5f e3       	ldi	r21, 0x3F	; 63
    4a36:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4a3a:	88 23       	and	r24, r24
    4a3c:	2c f4       	brge	.+10     	; 0x4a48 <drop+0x536>
		__ticks = 1;
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	9e af       	std	Y+62, r25	; 0x3e
    4a44:	8d af       	std	Y+61, r24	; 0x3d
    4a46:	46 c0       	rjmp	.+140    	; 0x4ad4 <drop+0x5c2>
	else if (__tmp > 65535)
    4a48:	fe 01       	movw	r30, r28
    4a4a:	ff 96       	adiw	r30, 0x3f	; 63
    4a4c:	60 81       	ld	r22, Z
    4a4e:	71 81       	ldd	r23, Z+1	; 0x01
    4a50:	82 81       	ldd	r24, Z+2	; 0x02
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	3f ef       	ldi	r19, 0xFF	; 255
    4a58:	4f e7       	ldi	r20, 0x7F	; 127
    4a5a:	57 e4       	ldi	r21, 0x47	; 71
    4a5c:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4a60:	18 16       	cp	r1, r24
    4a62:	64 f5       	brge	.+88     	; 0x4abc <drop+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a64:	fe 01       	movw	r30, r28
    4a66:	ed 5b       	subi	r30, 0xBD	; 189
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	60 81       	ld	r22, Z
    4a6c:	71 81       	ldd	r23, Z+1	; 0x01
    4a6e:	82 81       	ldd	r24, Z+2	; 0x02
    4a70:	93 81       	ldd	r25, Z+3	; 0x03
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	40 e2       	ldi	r20, 0x20	; 32
    4a78:	51 e4       	ldi	r21, 0x41	; 65
    4a7a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	bc 01       	movw	r22, r24
    4a84:	cd 01       	movw	r24, r26
    4a86:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	9e af       	std	Y+62, r25	; 0x3e
    4a90:	8d af       	std	Y+61, r24	; 0x3d
    4a92:	0f c0       	rjmp	.+30     	; 0x4ab2 <drop+0x5a0>
    4a94:	80 e7       	ldi	r24, 0x70	; 112
    4a96:	91 e0       	ldi	r25, 0x01	; 1
    4a98:	9c af       	std	Y+60, r25	; 0x3c
    4a9a:	8b af       	std	Y+59, r24	; 0x3b
    4a9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4aa0:	01 97       	sbiw	r24, 0x01	; 1
    4aa2:	f1 f7       	brne	.-4      	; 0x4aa0 <drop+0x58e>
    4aa4:	9c af       	std	Y+60, r25	; 0x3c
    4aa6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4aaa:	9e ad       	ldd	r25, Y+62	; 0x3e
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	9e af       	std	Y+62, r25	; 0x3e
    4ab0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ab4:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	69 f7       	brne	.-38     	; 0x4a94 <drop+0x582>
    4aba:	16 c0       	rjmp	.+44     	; 0x4ae8 <drop+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4abc:	fe 01       	movw	r30, r28
    4abe:	ff 96       	adiw	r30, 0x3f	; 63
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9e af       	std	Y+62, r25	; 0x3e
    4ad2:	8d af       	std	Y+61, r24	; 0x3d
    4ad4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ad6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ad8:	9a af       	std	Y+58, r25	; 0x3a
    4ada:	89 af       	std	Y+57, r24	; 0x39
    4adc:	89 ad       	ldd	r24, Y+57	; 0x39
    4ade:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <drop+0x5ce>
    4ae4:	9a af       	std	Y+58, r25	; 0x3a
    4ae6:	89 af       	std	Y+57, r24	; 0x39
	}
	
	_delay_ms(700);
	
	// Lift the arm back
	for(i=0;i<5;i++)
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ef 58       	subi	r30, 0x8F	; 143
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	10 82       	st	Z, r1
    4af0:	81 c0       	rjmp	.+258    	; 0x4bf4 <drop+0x6e2>
	{
		servo_2(i);
    4af2:	fe 01       	movw	r30, r28
    4af4:	ef 58       	subi	r30, 0x8F	; 143
    4af6:	ff 4f       	sbci	r31, 0xFF	; 255
    4af8:	80 81       	ld	r24, Z
    4afa:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <servo_2>
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	ac e0       	ldi	r26, 0x0C	; 12
    4b04:	b2 e4       	ldi	r27, 0x42	; 66
    4b06:	8d ab       	std	Y+53, r24	; 0x35
    4b08:	9e ab       	std	Y+54, r25	; 0x36
    4b0a:	af ab       	std	Y+55, r26	; 0x37
    4b0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b0e:	6d a9       	ldd	r22, Y+53	; 0x35
    4b10:	7e a9       	ldd	r23, Y+54	; 0x36
    4b12:	8f a9       	ldd	r24, Y+55	; 0x37
    4b14:	98 ad       	ldd	r25, Y+56	; 0x38
    4b16:	26 e6       	ldi	r18, 0x66	; 102
    4b18:	36 e6       	ldi	r19, 0x66	; 102
    4b1a:	46 e6       	ldi	r20, 0x66	; 102
    4b1c:	55 e4       	ldi	r21, 0x45	; 69
    4b1e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	89 ab       	std	Y+49, r24	; 0x31
    4b28:	9a ab       	std	Y+50, r25	; 0x32
    4b2a:	ab ab       	std	Y+51, r26	; 0x33
    4b2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b2e:	69 a9       	ldd	r22, Y+49	; 0x31
    4b30:	7a a9       	ldd	r23, Y+50	; 0x32
    4b32:	8b a9       	ldd	r24, Y+51	; 0x33
    4b34:	9c a9       	ldd	r25, Y+52	; 0x34
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	40 e8       	ldi	r20, 0x80	; 128
    4b3c:	5f e3       	ldi	r21, 0x3F	; 63
    4b3e:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4b42:	88 23       	and	r24, r24
    4b44:	2c f4       	brge	.+10     	; 0x4b50 <drop+0x63e>
		__ticks = 1;
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	98 ab       	std	Y+48, r25	; 0x30
    4b4c:	8f a7       	std	Y+47, r24	; 0x2f
    4b4e:	3f c0       	rjmp	.+126    	; 0x4bce <drop+0x6bc>
	else if (__tmp > 65535)
    4b50:	69 a9       	ldd	r22, Y+49	; 0x31
    4b52:	7a a9       	ldd	r23, Y+50	; 0x32
    4b54:	8b a9       	ldd	r24, Y+51	; 0x33
    4b56:	9c a9       	ldd	r25, Y+52	; 0x34
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	3f ef       	ldi	r19, 0xFF	; 255
    4b5c:	4f e7       	ldi	r20, 0x7F	; 127
    4b5e:	57 e4       	ldi	r21, 0x47	; 71
    4b60:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4b64:	18 16       	cp	r1, r24
    4b66:	4c f5       	brge	.+82     	; 0x4bba <drop+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b68:	6d a9       	ldd	r22, Y+53	; 0x35
    4b6a:	7e a9       	ldd	r23, Y+54	; 0x36
    4b6c:	8f a9       	ldd	r24, Y+55	; 0x37
    4b6e:	98 ad       	ldd	r25, Y+56	; 0x38
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	40 e2       	ldi	r20, 0x20	; 32
    4b76:	51 e4       	ldi	r21, 0x41	; 65
    4b78:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	cb 01       	movw	r24, r22
    4b80:	bc 01       	movw	r22, r24
    4b82:	cd 01       	movw	r24, r26
    4b84:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	98 ab       	std	Y+48, r25	; 0x30
    4b8e:	8f a7       	std	Y+47, r24	; 0x2f
    4b90:	0f c0       	rjmp	.+30     	; 0x4bb0 <drop+0x69e>
    4b92:	80 e7       	ldi	r24, 0x70	; 112
    4b94:	91 e0       	ldi	r25, 0x01	; 1
    4b96:	9e a7       	std	Y+46, r25	; 0x2e
    4b98:	8d a7       	std	Y+45, r24	; 0x2d
    4b9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b9e:	01 97       	sbiw	r24, 0x01	; 1
    4ba0:	f1 f7       	brne	.-4      	; 0x4b9e <drop+0x68c>
    4ba2:	9e a7       	std	Y+46, r25	; 0x2e
    4ba4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ba8:	98 a9       	ldd	r25, Y+48	; 0x30
    4baa:	01 97       	sbiw	r24, 0x01	; 1
    4bac:	98 ab       	std	Y+48, r25	; 0x30
    4bae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    4bb4:	00 97       	sbiw	r24, 0x00	; 0
    4bb6:	69 f7       	brne	.-38     	; 0x4b92 <drop+0x680>
    4bb8:	14 c0       	rjmp	.+40     	; 0x4be2 <drop+0x6d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bba:	69 a9       	ldd	r22, Y+49	; 0x31
    4bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    4bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    4bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    4bc2:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	98 ab       	std	Y+48, r25	; 0x30
    4bcc:	8f a7       	std	Y+47, r24	; 0x2f
    4bce:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bd0:	98 a9       	ldd	r25, Y+48	; 0x30
    4bd2:	9c a7       	std	Y+44, r25	; 0x2c
    4bd4:	8b a7       	std	Y+43, r24	; 0x2b
    4bd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	f1 f7       	brne	.-4      	; 0x4bda <drop+0x6c8>
    4bde:	9c a7       	std	Y+44, r25	; 0x2c
    4be0:	8b a7       	std	Y+43, r24	; 0x2b
	}
	
	_delay_ms(700);
	
	// Lift the arm back
	for(i=0;i<5;i++)
    4be2:	de 01       	movw	r26, r28
    4be4:	af 58       	subi	r26, 0x8F	; 143
    4be6:	bf 4f       	sbci	r27, 0xFF	; 255
    4be8:	fe 01       	movw	r30, r28
    4bea:	ef 58       	subi	r30, 0x8F	; 143
    4bec:	ff 4f       	sbci	r31, 0xFF	; 255
    4bee:	80 81       	ld	r24, Z
    4bf0:	8f 5f       	subi	r24, 0xFF	; 255
    4bf2:	8c 93       	st	X, r24
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	ef 58       	subi	r30, 0x8F	; 143
    4bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfa:	80 81       	ld	r24, Z
    4bfc:	85 30       	cpi	r24, 0x05	; 5
    4bfe:	08 f4       	brcc	.+2      	; 0x4c02 <drop+0x6f0>
    4c00:	78 cf       	rjmp	.-272    	; 0x4af2 <drop+0x5e0>
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	af e2       	ldi	r26, 0x2F	; 47
    4c08:	b4 e4       	ldi	r27, 0x44	; 68
    4c0a:	8f a3       	std	Y+39, r24	; 0x27
    4c0c:	98 a7       	std	Y+40, r25	; 0x28
    4c0e:	a9 a7       	std	Y+41, r26	; 0x29
    4c10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c12:	6f a1       	ldd	r22, Y+39	; 0x27
    4c14:	78 a5       	ldd	r23, Y+40	; 0x28
    4c16:	89 a5       	ldd	r24, Y+41	; 0x29
    4c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c1a:	26 e6       	ldi	r18, 0x66	; 102
    4c1c:	36 e6       	ldi	r19, 0x66	; 102
    4c1e:	46 e6       	ldi	r20, 0x66	; 102
    4c20:	55 e4       	ldi	r21, 0x45	; 69
    4c22:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4c26:	dc 01       	movw	r26, r24
    4c28:	cb 01       	movw	r24, r22
    4c2a:	8b a3       	std	Y+35, r24	; 0x23
    4c2c:	9c a3       	std	Y+36, r25	; 0x24
    4c2e:	ad a3       	std	Y+37, r26	; 0x25
    4c30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c32:	6b a1       	ldd	r22, Y+35	; 0x23
    4c34:	7c a1       	ldd	r23, Y+36	; 0x24
    4c36:	8d a1       	ldd	r24, Y+37	; 0x25
    4c38:	9e a1       	ldd	r25, Y+38	; 0x26
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	40 e8       	ldi	r20, 0x80	; 128
    4c40:	5f e3       	ldi	r21, 0x3F	; 63
    4c42:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4c46:	88 23       	and	r24, r24
    4c48:	2c f4       	brge	.+10     	; 0x4c54 <drop+0x742>
		__ticks = 1;
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	9a a3       	std	Y+34, r25	; 0x22
    4c50:	89 a3       	std	Y+33, r24	; 0x21
    4c52:	3f c0       	rjmp	.+126    	; 0x4cd2 <drop+0x7c0>
	else if (__tmp > 65535)
    4c54:	6b a1       	ldd	r22, Y+35	; 0x23
    4c56:	7c a1       	ldd	r23, Y+36	; 0x24
    4c58:	8d a1       	ldd	r24, Y+37	; 0x25
    4c5a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	3f ef       	ldi	r19, 0xFF	; 255
    4c60:	4f e7       	ldi	r20, 0x7F	; 127
    4c62:	57 e4       	ldi	r21, 0x47	; 71
    4c64:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4c68:	18 16       	cp	r1, r24
    4c6a:	4c f5       	brge	.+82     	; 0x4cbe <drop+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c6c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c6e:	78 a5       	ldd	r23, Y+40	; 0x28
    4c70:	89 a5       	ldd	r24, Y+41	; 0x29
    4c72:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c74:	20 e0       	ldi	r18, 0x00	; 0
    4c76:	30 e0       	ldi	r19, 0x00	; 0
    4c78:	40 e2       	ldi	r20, 0x20	; 32
    4c7a:	51 e4       	ldi	r21, 0x41	; 65
    4c7c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	bc 01       	movw	r22, r24
    4c86:	cd 01       	movw	r24, r26
    4c88:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4c8c:	dc 01       	movw	r26, r24
    4c8e:	cb 01       	movw	r24, r22
    4c90:	9a a3       	std	Y+34, r25	; 0x22
    4c92:	89 a3       	std	Y+33, r24	; 0x21
    4c94:	0f c0       	rjmp	.+30     	; 0x4cb4 <drop+0x7a2>
    4c96:	80 e7       	ldi	r24, 0x70	; 112
    4c98:	91 e0       	ldi	r25, 0x01	; 1
    4c9a:	98 a3       	std	Y+32, r25	; 0x20
    4c9c:	8f 8f       	std	Y+31, r24	; 0x1f
    4c9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ca0:	98 a1       	ldd	r25, Y+32	; 0x20
    4ca2:	01 97       	sbiw	r24, 0x01	; 1
    4ca4:	f1 f7       	brne	.-4      	; 0x4ca2 <drop+0x790>
    4ca6:	98 a3       	std	Y+32, r25	; 0x20
    4ca8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4caa:	89 a1       	ldd	r24, Y+33	; 0x21
    4cac:	9a a1       	ldd	r25, Y+34	; 0x22
    4cae:	01 97       	sbiw	r24, 0x01	; 1
    4cb0:	9a a3       	std	Y+34, r25	; 0x22
    4cb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb4:	89 a1       	ldd	r24, Y+33	; 0x21
    4cb6:	9a a1       	ldd	r25, Y+34	; 0x22
    4cb8:	00 97       	sbiw	r24, 0x00	; 0
    4cba:	69 f7       	brne	.-38     	; 0x4c96 <drop+0x784>
    4cbc:	14 c0       	rjmp	.+40     	; 0x4ce6 <drop+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cbe:	6b a1       	ldd	r22, Y+35	; 0x23
    4cc0:	7c a1       	ldd	r23, Y+36	; 0x24
    4cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    4cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    4cc6:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	9a a3       	std	Y+34, r25	; 0x22
    4cd0:	89 a3       	std	Y+33, r24	; 0x21
    4cd2:	89 a1       	ldd	r24, Y+33	; 0x21
    4cd4:	9a a1       	ldd	r25, Y+34	; 0x22
    4cd6:	9e 8f       	std	Y+30, r25	; 0x1e
    4cd8:	8d 8f       	std	Y+29, r24	; 0x1d
    4cda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	f1 f7       	brne	.-4      	; 0x4cde <drop+0x7cc>
    4ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ce4:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		servo_2(i);
		_delay_ms(35);
	}
	_delay_ms(700);
	servo_1_free();
    4ce6:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    4cea:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	
	// Close the grip
	for(i=0;i<22;i++)
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ef 58       	subi	r30, 0x8F	; 143
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	10 82       	st	Z, r1
    4cf6:	81 c0       	rjmp	.+258    	; 0x4dfa <drop+0x8e8>
	{
		servo_1(i);
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	ef 58       	subi	r30, 0x8F	; 143
    4cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfe:	80 81       	ld	r24, Z
    4d00:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <servo_1>
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	a0 e8       	ldi	r26, 0x80	; 128
    4d0a:	bf e3       	ldi	r27, 0x3F	; 63
    4d0c:	89 8f       	std	Y+25, r24	; 0x19
    4d0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4d10:	ab 8f       	std	Y+27, r26	; 0x1b
    4d12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d14:	69 8d       	ldd	r22, Y+25	; 0x19
    4d16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d1c:	26 e6       	ldi	r18, 0x66	; 102
    4d1e:	36 e6       	ldi	r19, 0x66	; 102
    4d20:	46 e6       	ldi	r20, 0x66	; 102
    4d22:	55 e4       	ldi	r21, 0x45	; 69
    4d24:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	8d 8b       	std	Y+21, r24	; 0x15
    4d2e:	9e 8b       	std	Y+22, r25	; 0x16
    4d30:	af 8b       	std	Y+23, r26	; 0x17
    4d32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d34:	6d 89       	ldd	r22, Y+21	; 0x15
    4d36:	7e 89       	ldd	r23, Y+22	; 0x16
    4d38:	8f 89       	ldd	r24, Y+23	; 0x17
    4d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	40 e8       	ldi	r20, 0x80	; 128
    4d42:	5f e3       	ldi	r21, 0x3F	; 63
    4d44:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4d48:	88 23       	and	r24, r24
    4d4a:	2c f4       	brge	.+10     	; 0x4d56 <drop+0x844>
		__ticks = 1;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	9c 8b       	std	Y+20, r25	; 0x14
    4d52:	8b 8b       	std	Y+19, r24	; 0x13
    4d54:	3f c0       	rjmp	.+126    	; 0x4dd4 <drop+0x8c2>
	else if (__tmp > 65535)
    4d56:	6d 89       	ldd	r22, Y+21	; 0x15
    4d58:	7e 89       	ldd	r23, Y+22	; 0x16
    4d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	3f ef       	ldi	r19, 0xFF	; 255
    4d62:	4f e7       	ldi	r20, 0x7F	; 127
    4d64:	57 e4       	ldi	r21, 0x47	; 71
    4d66:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4d6a:	18 16       	cp	r1, r24
    4d6c:	4c f5       	brge	.+82     	; 0x4dc0 <drop+0x8ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4d70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	40 e2       	ldi	r20, 0x20	; 32
    4d7c:	51 e4       	ldi	r21, 0x41	; 65
    4d7e:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4d82:	dc 01       	movw	r26, r24
    4d84:	cb 01       	movw	r24, r22
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	9c 8b       	std	Y+20, r25	; 0x14
    4d94:	8b 8b       	std	Y+19, r24	; 0x13
    4d96:	0f c0       	rjmp	.+30     	; 0x4db6 <drop+0x8a4>
    4d98:	80 e7       	ldi	r24, 0x70	; 112
    4d9a:	91 e0       	ldi	r25, 0x01	; 1
    4d9c:	9a 8b       	std	Y+18, r25	; 0x12
    4d9e:	89 8b       	std	Y+17, r24	; 0x11
    4da0:	89 89       	ldd	r24, Y+17	; 0x11
    4da2:	9a 89       	ldd	r25, Y+18	; 0x12
    4da4:	01 97       	sbiw	r24, 0x01	; 1
    4da6:	f1 f7       	brne	.-4      	; 0x4da4 <drop+0x892>
    4da8:	9a 8b       	std	Y+18, r25	; 0x12
    4daa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dac:	8b 89       	ldd	r24, Y+19	; 0x13
    4dae:	9c 89       	ldd	r25, Y+20	; 0x14
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	9c 8b       	std	Y+20, r25	; 0x14
    4db4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db6:	8b 89       	ldd	r24, Y+19	; 0x13
    4db8:	9c 89       	ldd	r25, Y+20	; 0x14
    4dba:	00 97       	sbiw	r24, 0x00	; 0
    4dbc:	69 f7       	brne	.-38     	; 0x4d98 <drop+0x886>
    4dbe:	14 c0       	rjmp	.+40     	; 0x4de8 <drop+0x8d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    4dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    4dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    4dc8:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	9c 8b       	std	Y+20, r25	; 0x14
    4dd2:	8b 8b       	std	Y+19, r24	; 0x13
    4dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    4dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    4dd8:	98 8b       	std	Y+16, r25	; 0x10
    4dda:	8f 87       	std	Y+15, r24	; 0x0f
    4ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dde:	98 89       	ldd	r25, Y+16	; 0x10
    4de0:	01 97       	sbiw	r24, 0x01	; 1
    4de2:	f1 f7       	brne	.-4      	; 0x4de0 <drop+0x8ce>
    4de4:	98 8b       	std	Y+16, r25	; 0x10
    4de6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(700);
	servo_1_free();
	servo_2_free();
	
	// Close the grip
	for(i=0;i<22;i++)
    4de8:	de 01       	movw	r26, r28
    4dea:	af 58       	subi	r26, 0x8F	; 143
    4dec:	bf 4f       	sbci	r27, 0xFF	; 255
    4dee:	fe 01       	movw	r30, r28
    4df0:	ef 58       	subi	r30, 0x8F	; 143
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	80 81       	ld	r24, Z
    4df6:	8f 5f       	subi	r24, 0xFF	; 255
    4df8:	8c 93       	st	X, r24
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	ef 58       	subi	r30, 0x8F	; 143
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	80 81       	ld	r24, Z
    4e02:	86 31       	cpi	r24, 0x16	; 22
    4e04:	08 f4       	brcc	.+2      	; 0x4e08 <drop+0x8f6>
    4e06:	78 cf       	rjmp	.-272    	; 0x4cf8 <drop+0x7e6>
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	af e2       	ldi	r26, 0x2F	; 47
    4e0e:	b4 e4       	ldi	r27, 0x44	; 68
    4e10:	8b 87       	std	Y+11, r24	; 0x0b
    4e12:	9c 87       	std	Y+12, r25	; 0x0c
    4e14:	ad 87       	std	Y+13, r26	; 0x0d
    4e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e20:	26 e6       	ldi	r18, 0x66	; 102
    4e22:	36 e6       	ldi	r19, 0x66	; 102
    4e24:	46 e6       	ldi	r20, 0x66	; 102
    4e26:	55 e4       	ldi	r21, 0x45	; 69
    4e28:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	8f 83       	std	Y+7, r24	; 0x07
    4e32:	98 87       	std	Y+8, r25	; 0x08
    4e34:	a9 87       	std	Y+9, r26	; 0x09
    4e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e38:	6f 81       	ldd	r22, Y+7	; 0x07
    4e3a:	78 85       	ldd	r23, Y+8	; 0x08
    4e3c:	89 85       	ldd	r24, Y+9	; 0x09
    4e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	40 e8       	ldi	r20, 0x80	; 128
    4e46:	5f e3       	ldi	r21, 0x3F	; 63
    4e48:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    4e4c:	88 23       	and	r24, r24
    4e4e:	2c f4       	brge	.+10     	; 0x4e5a <drop+0x948>
		__ticks = 1;
    4e50:	81 e0       	ldi	r24, 0x01	; 1
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	9e 83       	std	Y+6, r25	; 0x06
    4e56:	8d 83       	std	Y+5, r24	; 0x05
    4e58:	3f c0       	rjmp	.+126    	; 0x4ed8 <drop+0x9c6>
	else if (__tmp > 65535)
    4e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e5c:	78 85       	ldd	r23, Y+8	; 0x08
    4e5e:	89 85       	ldd	r24, Y+9	; 0x09
    4e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e62:	20 e0       	ldi	r18, 0x00	; 0
    4e64:	3f ef       	ldi	r19, 0xFF	; 255
    4e66:	4f e7       	ldi	r20, 0x7F	; 127
    4e68:	57 e4       	ldi	r21, 0x47	; 71
    4e6a:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    4e6e:	18 16       	cp	r1, r24
    4e70:	4c f5       	brge	.+82     	; 0x4ec4 <drop+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e7a:	20 e0       	ldi	r18, 0x00	; 0
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	40 e2       	ldi	r20, 0x20	; 32
    4e80:	51 e4       	ldi	r21, 0x41	; 65
    4e82:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	bc 01       	movw	r22, r24
    4e8c:	cd 01       	movw	r24, r26
    4e8e:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	9e 83       	std	Y+6, r25	; 0x06
    4e98:	8d 83       	std	Y+5, r24	; 0x05
    4e9a:	0f c0       	rjmp	.+30     	; 0x4eba <drop+0x9a8>
    4e9c:	80 e7       	ldi	r24, 0x70	; 112
    4e9e:	91 e0       	ldi	r25, 0x01	; 1
    4ea0:	9c 83       	std	Y+4, r25	; 0x04
    4ea2:	8b 83       	std	Y+3, r24	; 0x03
    4ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea8:	01 97       	sbiw	r24, 0x01	; 1
    4eaa:	f1 f7       	brne	.-4      	; 0x4ea8 <drop+0x996>
    4eac:	9c 83       	std	Y+4, r25	; 0x04
    4eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb4:	01 97       	sbiw	r24, 0x01	; 1
    4eb6:	9e 83       	std	Y+6, r25	; 0x06
    4eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eba:	8d 81       	ldd	r24, Y+5	; 0x05
    4ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ebe:	00 97       	sbiw	r24, 0x00	; 0
    4ec0:	69 f7       	brne	.-38     	; 0x4e9c <drop+0x98a>
    4ec2:	14 c0       	rjmp	.+40     	; 0x4eec <drop+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec6:	78 85       	ldd	r23, Y+8	; 0x08
    4ec8:	89 85       	ldd	r24, Y+9	; 0x09
    4eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ecc:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	9e 83       	std	Y+6, r25	; 0x06
    4ed6:	8d 83       	std	Y+5, r24	; 0x05
    4ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eda:	9e 81       	ldd	r25, Y+6	; 0x06
    4edc:	9a 83       	std	Y+2, r25	; 0x02
    4ede:	89 83       	std	Y+1, r24	; 0x01
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	f1 f7       	brne	.-4      	; 0x4ee4 <drop+0x9d2>
    4ee8:	9a 83       	std	Y+2, r25	; 0x02
    4eea:	89 83       	std	Y+1, r24	; 0x01
		servo_1(i);
		_delay_ms(1);
	}
	
	_delay_ms(700);
	servo_1_free();
    4eec:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <servo_1_free>
	servo_2_free();
    4ef0:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <servo_2_free>
	return;
}
    4ef4:	cf 58       	subi	r28, 0x8F	; 143
    4ef6:	df 4f       	sbci	r29, 0xFF	; 255
    4ef8:	0f b6       	in	r0, 0x3f	; 63
    4efa:	f8 94       	cli
    4efc:	de bf       	out	0x3e, r29	; 62
    4efe:	0f be       	out	0x3f, r0	; 63
    4f00:	cd bf       	out	0x3d, r28	; 61
    4f02:	cf 91       	pop	r28
    4f04:	df 91       	pop	r29
    4f06:	1f 91       	pop	r17
    4f08:	0f 91       	pop	r16
    4f0a:	08 95       	ret

00004f0c <main>:

//Main Function
int main()
{
    4f0c:	0f 93       	push	r16
    4f0e:	1f 93       	push	r17
    4f10:	df 93       	push	r29
    4f12:	cf 93       	push	r28
    4f14:	cd b7       	in	r28, 0x3d	; 61
    4f16:	de b7       	in	r29, 0x3e	; 62
    4f18:	c8 54       	subi	r28, 0x48	; 72
    4f1a:	d0 40       	sbci	r29, 0x00	; 0
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: main
	Input: None
	Output: None
	*/
	init_devices();
    4f26:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
	int len=0,h=0,c=0,n,rx,ry,*temp,x1,y1,m=0,x=0,y=0;
    4f2a:	1c ae       	std	Y+60, r1	; 0x3c
    4f2c:	1b ae       	std	Y+59, r1	; 0x3b
    4f2e:	1a ae       	std	Y+58, r1	; 0x3a
    4f30:	19 ae       	std	Y+57, r1	; 0x39
    4f32:	18 ae       	std	Y+56, r1	; 0x38
    4f34:	1f aa       	std	Y+55, r1	; 0x37
    4f36:	1a a6       	std	Y+42, r1	; 0x2a
    4f38:	19 a6       	std	Y+41, r1	; 0x29
    4f3a:	18 a6       	std	Y+40, r1	; 0x28
    4f3c:	1f a2       	std	Y+39, r1	; 0x27
    4f3e:	1e a2       	std	Y+38, r1	; 0x26
    4f40:	1d a2       	std	Y+37, r1	; 0x25
	char* locations, *a;
	char pos[2];
	while(1)
	{
		if((PINE & 0x80) == 0x80) // If boot switch is not pressed
    4f42:	ec e2       	ldi	r30, 0x2C	; 44
    4f44:	f0 e0       	ldi	r31, 0x00	; 0
    4f46:	80 81       	ld	r24, Z
    4f48:	88 23       	and	r24, r24
    4f4a:	dc f7       	brge	.-10     	; 0x4f42 <main+0x36>
		{
			lcd_port_config();
    4f4c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <lcd_port_config>
			lcd_set_4bit();
    4f50:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
			lcd_init();
    4f54:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
			len=strlen(serial_ip);
    4f58:	8c e3       	ldi	r24, 0x3C	; 60
    4f5a:	93 e0       	ldi	r25, 0x03	; 3
    4f5c:	0e 94 fd 32 	call	0x65fa	; 0x65fa <strlen>
    4f60:	9c af       	std	Y+60, r25	; 0x3c
    4f62:	8b af       	std	Y+59, r24	; 0x3b
			if(serial_ip[len-1]=='#') // To check for end of serial input
    4f64:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f66:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f68:	01 97       	sbiw	r24, 0x01	; 1
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	e4 5c       	subi	r30, 0xC4	; 196
    4f6e:	fc 4f       	sbci	r31, 0xFC	; 252
    4f70:	80 81       	ld	r24, Z
    4f72:	83 32       	cpi	r24, 0x23	; 35
    4f74:	31 f7       	brne	.-52     	; 0x4f42 <main+0x36>
			{
				/* Extract animal and habitat locations and store them in "processed_ip" */
				h=0;
    4f76:	1a ae       	std	Y+58, r1	; 0x3a
    4f78:	19 ae       	std	Y+57, r1	; 0x39
				for(i=0;i<strlen(serial_ip);i++)
    4f7a:	10 92 38 03 	sts	0x0338, r1
    4f7e:	10 92 37 03 	sts	0x0337, r1
    4f82:	3a c0       	rjmp	.+116    	; 0x4ff8 <main+0xec>
				{
					if(serial_ip[i]!='\\' && serial_ip[i]!='n' && serial_ip[i]!='#')
    4f84:	80 91 37 03 	lds	r24, 0x0337
    4f88:	90 91 38 03 	lds	r25, 0x0338
    4f8c:	fc 01       	movw	r30, r24
    4f8e:	e4 5c       	subi	r30, 0xC4	; 196
    4f90:	fc 4f       	sbci	r31, 0xFC	; 252
    4f92:	80 81       	ld	r24, Z
    4f94:	8c 35       	cpi	r24, 0x5C	; 92
    4f96:	39 f1       	breq	.+78     	; 0x4fe6 <main+0xda>
    4f98:	80 91 37 03 	lds	r24, 0x0337
    4f9c:	90 91 38 03 	lds	r25, 0x0338
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	e4 5c       	subi	r30, 0xC4	; 196
    4fa4:	fc 4f       	sbci	r31, 0xFC	; 252
    4fa6:	80 81       	ld	r24, Z
    4fa8:	8e 36       	cpi	r24, 0x6E	; 110
    4faa:	e9 f0       	breq	.+58     	; 0x4fe6 <main+0xda>
    4fac:	80 91 37 03 	lds	r24, 0x0337
    4fb0:	90 91 38 03 	lds	r25, 0x0338
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	e4 5c       	subi	r30, 0xC4	; 196
    4fb8:	fc 4f       	sbci	r31, 0xFC	; 252
    4fba:	80 81       	ld	r24, Z
    4fbc:	83 32       	cpi	r24, 0x23	; 35
    4fbe:	99 f0       	breq	.+38     	; 0x4fe6 <main+0xda>
						processed_ip[h++]=serial_ip[i];
    4fc0:	29 ad       	ldd	r18, Y+57	; 0x39
    4fc2:	3a ad       	ldd	r19, Y+58	; 0x3a
    4fc4:	80 91 37 03 	lds	r24, 0x0337
    4fc8:	90 91 38 03 	lds	r25, 0x0338
    4fcc:	fc 01       	movw	r30, r24
    4fce:	e4 5c       	subi	r30, 0xC4	; 196
    4fd0:	fc 4f       	sbci	r31, 0xFC	; 252
    4fd2:	80 81       	ld	r24, Z
    4fd4:	f9 01       	movw	r30, r18
    4fd6:	e0 59       	subi	r30, 0x90	; 144
    4fd8:	fc 4f       	sbci	r31, 0xFC	; 252
    4fda:	80 83       	st	Z, r24
    4fdc:	89 ad       	ldd	r24, Y+57	; 0x39
    4fde:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fe0:	01 96       	adiw	r24, 0x01	; 1
    4fe2:	9a af       	std	Y+58, r25	; 0x3a
    4fe4:	89 af       	std	Y+57, r24	; 0x39
			len=strlen(serial_ip);
			if(serial_ip[len-1]=='#') // To check for end of serial input
			{
				/* Extract animal and habitat locations and store them in "processed_ip" */
				h=0;
				for(i=0;i<strlen(serial_ip);i++)
    4fe6:	80 91 37 03 	lds	r24, 0x0337
    4fea:	90 91 38 03 	lds	r25, 0x0338
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	90 93 38 03 	sts	0x0338, r25
    4ff4:	80 93 37 03 	sts	0x0337, r24
    4ff8:	80 91 37 03 	lds	r24, 0x0337
    4ffc:	90 91 38 03 	lds	r25, 0x0338
    5000:	8c 01       	movw	r16, r24
    5002:	8c e3       	ldi	r24, 0x3C	; 60
    5004:	93 e0       	ldi	r25, 0x03	; 3
    5006:	0e 94 fd 32 	call	0x65fa	; 0x65fa <strlen>
    500a:	08 17       	cp	r16, r24
    500c:	19 07       	cpc	r17, r25
    500e:	08 f4       	brcc	.+2      	; 0x5012 <main+0x106>
    5010:	b9 cf       	rjmp	.-142    	; 0x4f84 <main+0x78>
				{
					if(serial_ip[i]!='\\' && serial_ip[i]!='n' && serial_ip[i]!='#')
						processed_ip[h++]=serial_ip[i];
				}				
				locations=strtok(processed_ip,", ");
    5012:	80 e7       	ldi	r24, 0x70	; 112
    5014:	93 e0       	ldi	r25, 0x03	; 3
    5016:	24 e0       	ldi	r18, 0x04	; 4
    5018:	32 e0       	ldi	r19, 0x02	; 2
    501a:	b9 01       	movw	r22, r18
    501c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strtok>
    5020:	9c a3       	std	Y+36, r25	; 0x24
    5022:	8b a3       	std	Y+35, r24	; 0x23
    5024:	34 c0       	rjmp	.+104    	; 0x508e <main+0x182>
				while(locations!=NULL)
				{
					a=mapping[count];
    5026:	42 ea       	ldi	r20, 0xA2	; 162
    5028:	53 e0       	ldi	r21, 0x03	; 3
    502a:	80 91 24 03 	lds	r24, 0x0324
    502e:	90 91 25 03 	lds	r25, 0x0325
    5032:	9c 01       	movw	r18, r24
    5034:	22 0f       	add	r18, r18
    5036:	33 1f       	adc	r19, r19
    5038:	22 0f       	add	r18, r18
    503a:	33 1f       	adc	r19, r19
    503c:	c9 01       	movw	r24, r18
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	88 0f       	add	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	82 0f       	add	r24, r18
    5048:	93 1f       	adc	r25, r19
    504a:	84 0f       	add	r24, r20
    504c:	95 1f       	adc	r25, r21
    504e:	9a a3       	std	Y+34, r25	; 0x22
    5050:	89 a3       	std	Y+33, r24	; 0x21
					strcpy(a,locations);
    5052:	89 a1       	ldd	r24, Y+33	; 0x21
    5054:	9a a1       	ldd	r25, Y+34	; 0x22
    5056:	2b a1       	ldd	r18, Y+35	; 0x23
    5058:	3c a1       	ldd	r19, Y+36	; 0x24
    505a:	b9 01       	movw	r22, r18
    505c:	0e 94 f6 32 	call	0x65ec	; 0x65ec <strcpy>
					locations=strtok(NULL,", ");
    5060:	24 e0       	ldi	r18, 0x04	; 4
    5062:	32 e0       	ldi	r19, 0x02	; 2
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	b9 01       	movw	r22, r18
    506a:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strtok>
    506e:	9c a3       	std	Y+36, r25	; 0x24
    5070:	8b a3       	std	Y+35, r24	; 0x23
					a++;
    5072:	89 a1       	ldd	r24, Y+33	; 0x21
    5074:	9a a1       	ldd	r25, Y+34	; 0x22
    5076:	01 96       	adiw	r24, 0x01	; 1
    5078:	9a a3       	std	Y+34, r25	; 0x22
    507a:	89 a3       	std	Y+33, r24	; 0x21
					count++;
    507c:	80 91 24 03 	lds	r24, 0x0324
    5080:	90 91 25 03 	lds	r25, 0x0325
    5084:	01 96       	adiw	r24, 0x01	; 1
    5086:	90 93 25 03 	sts	0x0325, r25
    508a:	80 93 24 03 	sts	0x0324, r24
				{
					if(serial_ip[i]!='\\' && serial_ip[i]!='n' && serial_ip[i]!='#')
						processed_ip[h++]=serial_ip[i];
				}				
				locations=strtok(processed_ip,", ");
				while(locations!=NULL)
    508e:	8b a1       	ldd	r24, Y+35	; 0x23
    5090:	9c a1       	ldd	r25, Y+36	; 0x24
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	41 f6       	brne	.-112    	; 0x5026 <main+0x11a>
				}
				
				/* Print the received data on LCD */
				
				// Print habitat locations
				for(int e=0;e<count/2;e++)
    5096:	18 a2       	std	Y+32, r1	; 0x20
    5098:	1f 8e       	std	Y+31, r1	; 0x1f
    509a:	42 c0       	rjmp	.+132    	; 0x5120 <main+0x214>
				{  
					lcd_string(mapping[e]);
    509c:	42 ea       	ldi	r20, 0xA2	; 162
    509e:	53 e0       	ldi	r21, 0x03	; 3
    50a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50a2:	98 a1       	ldd	r25, Y+32	; 0x20
    50a4:	9c 01       	movw	r18, r24
    50a6:	22 0f       	add	r18, r18
    50a8:	33 1f       	adc	r19, r19
    50aa:	22 0f       	add	r18, r18
    50ac:	33 1f       	adc	r19, r19
    50ae:	c9 01       	movw	r24, r18
    50b0:	88 0f       	add	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	88 0f       	add	r24, r24
    50b6:	99 1f       	adc	r25, r25
    50b8:	82 0f       	add	r24, r18
    50ba:	93 1f       	adc	r25, r19
    50bc:	84 0f       	add	r24, r20
    50be:	95 1f       	adc	r25, r21
    50c0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
					if(e<(count/2)-1)
    50c4:	80 91 24 03 	lds	r24, 0x0324
    50c8:	90 91 25 03 	lds	r25, 0x0325
    50cc:	21 96       	adiw	r28, 0x01	; 1
    50ce:	9f af       	std	Y+63, r25	; 0x3f
    50d0:	8e af       	std	Y+62, r24	; 0x3e
    50d2:	21 97       	sbiw	r28, 0x01	; 1
    50d4:	21 96       	adiw	r28, 0x01	; 1
    50d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    50d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    50da:	21 97       	sbiw	r28, 0x01	; 1
    50dc:	99 23       	and	r25, r25
    50de:	4c f4       	brge	.+18     	; 0x50f2 <main+0x1e6>
    50e0:	21 96       	adiw	r28, 0x01	; 1
    50e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    50e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    50e6:	21 97       	sbiw	r28, 0x01	; 1
    50e8:	01 96       	adiw	r24, 0x01	; 1
    50ea:	21 96       	adiw	r28, 0x01	; 1
    50ec:	9f af       	std	Y+63, r25	; 0x3f
    50ee:	8e af       	std	Y+62, r24	; 0x3e
    50f0:	21 97       	sbiw	r28, 0x01	; 1
    50f2:	21 96       	adiw	r28, 0x01	; 1
    50f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    50f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    50f8:	21 97       	sbiw	r28, 0x01	; 1
    50fa:	95 95       	asr	r25
    50fc:	87 95       	ror	r24
    50fe:	9c 01       	movw	r18, r24
    5100:	21 50       	subi	r18, 0x01	; 1
    5102:	30 40       	sbci	r19, 0x00	; 0
    5104:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5106:	98 a1       	ldd	r25, Y+32	; 0x20
    5108:	82 17       	cp	r24, r18
    510a:	93 07       	cpc	r25, r19
    510c:	24 f4       	brge	.+8      	; 0x5116 <main+0x20a>
					   lcd_string(", ");
    510e:	84 e0       	ldi	r24, 0x04	; 4
    5110:	92 e0       	ldi	r25, 0x02	; 2
    5112:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
				}
				
				/* Print the received data on LCD */
				
				// Print habitat locations
				for(int e=0;e<count/2;e++)
    5116:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5118:	98 a1       	ldd	r25, Y+32	; 0x20
    511a:	01 96       	adiw	r24, 0x01	; 1
    511c:	98 a3       	std	Y+32, r25	; 0x20
    511e:	8f 8f       	std	Y+31, r24	; 0x1f
    5120:	80 91 24 03 	lds	r24, 0x0324
    5124:	90 91 25 03 	lds	r25, 0x0325
    5128:	23 96       	adiw	r28, 0x03	; 3
    512a:	9f af       	std	Y+63, r25	; 0x3f
    512c:	8e af       	std	Y+62, r24	; 0x3e
    512e:	23 97       	sbiw	r28, 0x03	; 3
    5130:	23 96       	adiw	r28, 0x03	; 3
    5132:	8e ad       	ldd	r24, Y+62	; 0x3e
    5134:	9f ad       	ldd	r25, Y+63	; 0x3f
    5136:	23 97       	sbiw	r28, 0x03	; 3
    5138:	99 23       	and	r25, r25
    513a:	4c f4       	brge	.+18     	; 0x514e <main+0x242>
    513c:	23 96       	adiw	r28, 0x03	; 3
    513e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5140:	9f ad       	ldd	r25, Y+63	; 0x3f
    5142:	23 97       	sbiw	r28, 0x03	; 3
    5144:	01 96       	adiw	r24, 0x01	; 1
    5146:	23 96       	adiw	r28, 0x03	; 3
    5148:	9f af       	std	Y+63, r25	; 0x3f
    514a:	8e af       	std	Y+62, r24	; 0x3e
    514c:	23 97       	sbiw	r28, 0x03	; 3
    514e:	23 96       	adiw	r28, 0x03	; 3
    5150:	8e ad       	ldd	r24, Y+62	; 0x3e
    5152:	9f ad       	ldd	r25, Y+63	; 0x3f
    5154:	23 97       	sbiw	r28, 0x03	; 3
    5156:	95 95       	asr	r25
    5158:	87 95       	ror	r24
    515a:	9c 01       	movw	r18, r24
    515c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    515e:	98 a1       	ldd	r25, Y+32	; 0x20
    5160:	82 17       	cp	r24, r18
    5162:	93 07       	cpc	r25, r19
    5164:	0c f4       	brge	.+2      	; 0x5168 <main+0x25c>
    5166:	9a cf       	rjmp	.-204    	; 0x509c <main+0x190>
				{  
					lcd_string(mapping[e]);
					if(e<(count/2)-1)
					   lcd_string(", ");
			    }
				lcd_cursor(2,1);
    5168:	82 e0       	ldi	r24, 0x02	; 2
    516a:	61 e0       	ldi	r22, 0x01	; 1
    516c:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
				
				// Print animal locations
				for(int e1=count/2;e1<count;e1++)
    5170:	80 91 24 03 	lds	r24, 0x0324
    5174:	90 91 25 03 	lds	r25, 0x0325
    5178:	25 96       	adiw	r28, 0x05	; 5
    517a:	9f af       	std	Y+63, r25	; 0x3f
    517c:	8e af       	std	Y+62, r24	; 0x3e
    517e:	25 97       	sbiw	r28, 0x05	; 5
    5180:	25 96       	adiw	r28, 0x05	; 5
    5182:	8e ad       	ldd	r24, Y+62	; 0x3e
    5184:	9f ad       	ldd	r25, Y+63	; 0x3f
    5186:	25 97       	sbiw	r28, 0x05	; 5
    5188:	99 23       	and	r25, r25
    518a:	4c f4       	brge	.+18     	; 0x519e <main+0x292>
    518c:	25 96       	adiw	r28, 0x05	; 5
    518e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5190:	9f ad       	ldd	r25, Y+63	; 0x3f
    5192:	25 97       	sbiw	r28, 0x05	; 5
    5194:	01 96       	adiw	r24, 0x01	; 1
    5196:	25 96       	adiw	r28, 0x05	; 5
    5198:	9f af       	std	Y+63, r25	; 0x3f
    519a:	8e af       	std	Y+62, r24	; 0x3e
    519c:	25 97       	sbiw	r28, 0x05	; 5
    519e:	25 96       	adiw	r28, 0x05	; 5
    51a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    51a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    51a4:	25 97       	sbiw	r28, 0x05	; 5
    51a6:	95 95       	asr	r25
    51a8:	87 95       	ror	r24
    51aa:	9e 8f       	std	Y+30, r25	; 0x1e
    51ac:	8d 8f       	std	Y+29, r24	; 0x1d
    51ae:	29 c0       	rjmp	.+82     	; 0x5202 <main+0x2f6>
				{
					lcd_string(mapping[e1]);
    51b0:	42 ea       	ldi	r20, 0xA2	; 162
    51b2:	53 e0       	ldi	r21, 0x03	; 3
    51b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51b8:	9c 01       	movw	r18, r24
    51ba:	22 0f       	add	r18, r18
    51bc:	33 1f       	adc	r19, r19
    51be:	22 0f       	add	r18, r18
    51c0:	33 1f       	adc	r19, r19
    51c2:	c9 01       	movw	r24, r18
    51c4:	88 0f       	add	r24, r24
    51c6:	99 1f       	adc	r25, r25
    51c8:	88 0f       	add	r24, r24
    51ca:	99 1f       	adc	r25, r25
    51cc:	82 0f       	add	r24, r18
    51ce:	93 1f       	adc	r25, r19
    51d0:	84 0f       	add	r24, r20
    51d2:	95 1f       	adc	r25, r21
    51d4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
					if(e1<(count-1))
    51d8:	80 91 24 03 	lds	r24, 0x0324
    51dc:	90 91 25 03 	lds	r25, 0x0325
    51e0:	9c 01       	movw	r18, r24
    51e2:	21 50       	subi	r18, 0x01	; 1
    51e4:	30 40       	sbci	r19, 0x00	; 0
    51e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51ea:	82 17       	cp	r24, r18
    51ec:	93 07       	cpc	r25, r19
    51ee:	24 f4       	brge	.+8      	; 0x51f8 <main+0x2ec>
					   lcd_string(", ");
    51f0:	84 e0       	ldi	r24, 0x04	; 4
    51f2:	92 e0       	ldi	r25, 0x02	; 2
    51f4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
					   lcd_string(", ");
			    }
				lcd_cursor(2,1);
				
				// Print animal locations
				for(int e1=count/2;e1<count;e1++)
    51f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51fc:	01 96       	adiw	r24, 0x01	; 1
    51fe:	9e 8f       	std	Y+30, r25	; 0x1e
    5200:	8d 8f       	std	Y+29, r24	; 0x1d
    5202:	20 91 24 03 	lds	r18, 0x0324
    5206:	30 91 25 03 	lds	r19, 0x0325
    520a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    520c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    520e:	82 17       	cp	r24, r18
    5210:	93 07       	cpc	r25, r19
    5212:	74 f2       	brlt	.-100    	; 0x51b0 <main+0x2a4>
			}
		}
	}							   
	while(1)
	{
		if((PINE & 0x80) != 0x80) // If boot switch is pressed
    5214:	ec e2       	ldi	r30, 0x2C	; 44
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	80 81       	ld	r24, Z
    521a:	88 23       	and	r24, r24
    521c:	dc f3       	brlt	.-10     	; 0x5214 <main+0x308>
		{       
				c=0;
    521e:	18 ae       	std	Y+56, r1	; 0x38
    5220:	1f aa       	std	Y+55, r1	; 0x37
				m=count/2;
    5222:	80 91 24 03 	lds	r24, 0x0324
    5226:	90 91 25 03 	lds	r25, 0x0325
    522a:	27 96       	adiw	r28, 0x07	; 7
    522c:	9f af       	std	Y+63, r25	; 0x3f
    522e:	8e af       	std	Y+62, r24	; 0x3e
    5230:	27 97       	sbiw	r28, 0x07	; 7
    5232:	27 96       	adiw	r28, 0x07	; 7
    5234:	8e ad       	ldd	r24, Y+62	; 0x3e
    5236:	9f ad       	ldd	r25, Y+63	; 0x3f
    5238:	27 97       	sbiw	r28, 0x07	; 7
    523a:	99 23       	and	r25, r25
    523c:	4c f4       	brge	.+18     	; 0x5250 <main+0x344>
    523e:	27 96       	adiw	r28, 0x07	; 7
    5240:	8e ad       	ldd	r24, Y+62	; 0x3e
    5242:	9f ad       	ldd	r25, Y+63	; 0x3f
    5244:	27 97       	sbiw	r28, 0x07	; 7
    5246:	01 96       	adiw	r24, 0x01	; 1
    5248:	27 96       	adiw	r28, 0x07	; 7
    524a:	9f af       	std	Y+63, r25	; 0x3f
    524c:	8e af       	std	Y+62, r24	; 0x3e
    524e:	27 97       	sbiw	r28, 0x07	; 7
    5250:	27 96       	adiw	r28, 0x07	; 7
    5252:	8e ad       	ldd	r24, Y+62	; 0x3e
    5254:	9f ad       	ldd	r25, Y+63	; 0x3f
    5256:	27 97       	sbiw	r28, 0x07	; 7
    5258:	95 95       	asr	r25
    525a:	87 95       	ror	r24
    525c:	9a a7       	std	Y+42, r25	; 0x2a
    525e:	89 a7       	std	Y+41, r24	; 0x29
				while(1)
				{
					Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    5260:	82 e0       	ldi	r24, 0x02	; 2
    5262:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ADC_Conversion>
    5266:	80 93 18 03 	sts	0x0318, r24
					
					if(Center_white_line<0x70)
    526a:	80 91 18 03 	lds	r24, 0x0318
    526e:	80 37       	cpi	r24, 0x70	; 112
    5270:	08 f0       	brcs	.+2      	; 0x5274 <main+0x368>
    5272:	79 c0       	rjmp	.+242    	; 0x5366 <main+0x45a>
					{   
						forward();
    5274:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
						velocity(155,150);
    5278:	8b e9       	ldi	r24, 0x9B	; 155
    527a:	66 e9       	ldi	r22, 0x96	; 150
    527c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
    5280:	80 e0       	ldi	r24, 0x00	; 0
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	aa ef       	ldi	r26, 0xFA	; 250
    5286:	b3 e4       	ldi	r27, 0x43	; 67
    5288:	89 8f       	std	Y+25, r24	; 0x19
    528a:	9a 8f       	std	Y+26, r25	; 0x1a
    528c:	ab 8f       	std	Y+27, r26	; 0x1b
    528e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5290:	69 8d       	ldd	r22, Y+25	; 0x19
    5292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5298:	26 e6       	ldi	r18, 0x66	; 102
    529a:	36 e6       	ldi	r19, 0x66	; 102
    529c:	46 e6       	ldi	r20, 0x66	; 102
    529e:	55 e4       	ldi	r21, 0x45	; 69
    52a0:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    52a4:	dc 01       	movw	r26, r24
    52a6:	cb 01       	movw	r24, r22
    52a8:	8d 8b       	std	Y+21, r24	; 0x15
    52aa:	9e 8b       	std	Y+22, r25	; 0x16
    52ac:	af 8b       	std	Y+23, r26	; 0x17
    52ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52b0:	6d 89       	ldd	r22, Y+21	; 0x15
    52b2:	7e 89       	ldd	r23, Y+22	; 0x16
    52b4:	8f 89       	ldd	r24, Y+23	; 0x17
    52b6:	98 8d       	ldd	r25, Y+24	; 0x18
    52b8:	20 e0       	ldi	r18, 0x00	; 0
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	40 e8       	ldi	r20, 0x80	; 128
    52be:	5f e3       	ldi	r21, 0x3F	; 63
    52c0:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    52c4:	88 23       	and	r24, r24
    52c6:	2c f4       	brge	.+10     	; 0x52d2 <main+0x3c6>
		__ticks = 1;
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	9c 8b       	std	Y+20, r25	; 0x14
    52ce:	8b 8b       	std	Y+19, r24	; 0x13
    52d0:	3f c0       	rjmp	.+126    	; 0x5350 <main+0x444>
	else if (__tmp > 65535)
    52d2:	6d 89       	ldd	r22, Y+21	; 0x15
    52d4:	7e 89       	ldd	r23, Y+22	; 0x16
    52d6:	8f 89       	ldd	r24, Y+23	; 0x17
    52d8:	98 8d       	ldd	r25, Y+24	; 0x18
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	3f ef       	ldi	r19, 0xFF	; 255
    52de:	4f e7       	ldi	r20, 0x7F	; 127
    52e0:	57 e4       	ldi	r21, 0x47	; 71
    52e2:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    52e6:	18 16       	cp	r1, r24
    52e8:	4c f5       	brge	.+82     	; 0x533c <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ea:	69 8d       	ldd	r22, Y+25	; 0x19
    52ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52f2:	20 e0       	ldi	r18, 0x00	; 0
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	40 e2       	ldi	r20, 0x20	; 32
    52f8:	51 e4       	ldi	r21, 0x41	; 65
    52fa:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    52fe:	dc 01       	movw	r26, r24
    5300:	cb 01       	movw	r24, r22
    5302:	bc 01       	movw	r22, r24
    5304:	cd 01       	movw	r24, r26
    5306:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    530a:	dc 01       	movw	r26, r24
    530c:	cb 01       	movw	r24, r22
    530e:	9c 8b       	std	Y+20, r25	; 0x14
    5310:	8b 8b       	std	Y+19, r24	; 0x13
    5312:	0f c0       	rjmp	.+30     	; 0x5332 <main+0x426>
    5314:	80 e7       	ldi	r24, 0x70	; 112
    5316:	91 e0       	ldi	r25, 0x01	; 1
    5318:	9a 8b       	std	Y+18, r25	; 0x12
    531a:	89 8b       	std	Y+17, r24	; 0x11
    531c:	89 89       	ldd	r24, Y+17	; 0x11
    531e:	9a 89       	ldd	r25, Y+18	; 0x12
    5320:	01 97       	sbiw	r24, 0x01	; 1
    5322:	f1 f7       	brne	.-4      	; 0x5320 <main+0x414>
    5324:	9a 8b       	std	Y+18, r25	; 0x12
    5326:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5328:	8b 89       	ldd	r24, Y+19	; 0x13
    532a:	9c 89       	ldd	r25, Y+20	; 0x14
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	9c 8b       	std	Y+20, r25	; 0x14
    5330:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5332:	8b 89       	ldd	r24, Y+19	; 0x13
    5334:	9c 89       	ldd	r25, Y+20	; 0x14
    5336:	00 97       	sbiw	r24, 0x00	; 0
    5338:	69 f7       	brne	.-38     	; 0x5314 <main+0x408>
    533a:	92 cf       	rjmp	.-220    	; 0x5260 <main+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    533c:	6d 89       	ldd	r22, Y+21	; 0x15
    533e:	7e 89       	ldd	r23, Y+22	; 0x16
    5340:	8f 89       	ldd	r24, Y+23	; 0x17
    5342:	98 8d       	ldd	r25, Y+24	; 0x18
    5344:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	9c 8b       	std	Y+20, r25	; 0x14
    534e:	8b 8b       	std	Y+19, r24	; 0x13
    5350:	8b 89       	ldd	r24, Y+19	; 0x13
    5352:	9c 89       	ldd	r25, Y+20	; 0x14
    5354:	98 8b       	std	Y+16, r25	; 0x10
    5356:	8f 87       	std	Y+15, r24	; 0x0f
    5358:	8f 85       	ldd	r24, Y+15	; 0x0f
    535a:	98 89       	ldd	r25, Y+16	; 0x10
    535c:	01 97       	sbiw	r24, 0x01	; 1
    535e:	f1 f7       	brne	.-4      	; 0x535c <main+0x450>
    5360:	98 8b       	std	Y+16, r25	; 0x10
    5362:	8f 87       	std	Y+15, r24	; 0x0f
    5364:	7d cf       	rjmp	.-262    	; 0x5260 <main+0x354>
						_delay_ms(500);
					}
					else
					{
						forward();
    5366:	0e 94 46 0c 	call	0x188c	; 0x188c <forward>
						velocity(0,0);
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	60 e0       	ldi	r22, 0x00	; 0
    536e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <velocity>
    5372:	a0 c0       	rjmp	.+320    	; 0x54b4 <main+0x5a8>
				}			
				
				while(c<count/2)
				{
					/* Extract individual animal and habitat locations & call functions for each pair to move them to their respective locations */
					n=atoi(mapping[c]);
    5374:	42 ea       	ldi	r20, 0xA2	; 162
    5376:	53 e0       	ldi	r21, 0x03	; 3
    5378:	8f a9       	ldd	r24, Y+55	; 0x37
    537a:	98 ad       	ldd	r25, Y+56	; 0x38
    537c:	9c 01       	movw	r18, r24
    537e:	22 0f       	add	r18, r18
    5380:	33 1f       	adc	r19, r19
    5382:	22 0f       	add	r18, r18
    5384:	33 1f       	adc	r19, r19
    5386:	c9 01       	movw	r24, r18
    5388:	88 0f       	add	r24, r24
    538a:	99 1f       	adc	r25, r25
    538c:	88 0f       	add	r24, r24
    538e:	99 1f       	adc	r25, r25
    5390:	82 0f       	add	r24, r18
    5392:	93 1f       	adc	r25, r19
    5394:	84 0f       	add	r24, r20
    5396:	95 1f       	adc	r25, r21
    5398:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <atoi>
    539c:	9e ab       	std	Y+54, r25	; 0x36
    539e:	8d ab       	std	Y+53, r24	; 0x35
					init_devices();
    53a0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_devices>
					strcpy(pos, mapping[m++]);
    53a4:	42 ea       	ldi	r20, 0xA2	; 162
    53a6:	53 e0       	ldi	r21, 0x03	; 3
    53a8:	89 a5       	ldd	r24, Y+41	; 0x29
    53aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    53ac:	9c 01       	movw	r18, r24
    53ae:	22 0f       	add	r18, r18
    53b0:	33 1f       	adc	r19, r19
    53b2:	22 0f       	add	r18, r18
    53b4:	33 1f       	adc	r19, r19
    53b6:	c9 01       	movw	r24, r18
    53b8:	88 0f       	add	r24, r24
    53ba:	99 1f       	adc	r25, r25
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	82 0f       	add	r24, r18
    53c2:	93 1f       	adc	r25, r19
    53c4:	9a 01       	movw	r18, r20
    53c6:	28 0f       	add	r18, r24
    53c8:	39 1f       	adc	r19, r25
    53ca:	89 a5       	ldd	r24, Y+41	; 0x29
    53cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    53ce:	01 96       	adiw	r24, 0x01	; 1
    53d0:	9a a7       	std	Y+42, r25	; 0x2a
    53d2:	89 a7       	std	Y+41, r24	; 0x29
    53d4:	ce 01       	movw	r24, r28
    53d6:	cd 96       	adiw	r24, 0x3d	; 61
    53d8:	b9 01       	movw	r22, r18
    53da:	0e 94 f6 32 	call	0x65ec	; 0x65ec <strcpy>
					x=pos[0]-65;
    53de:	8d ad       	ldd	r24, Y+61	; 0x3d
    53e0:	88 2f       	mov	r24, r24
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	81 54       	subi	r24, 0x41	; 65
    53e6:	90 40       	sbci	r25, 0x00	; 0
    53e8:	98 a7       	std	Y+40, r25	; 0x28
    53ea:	8f a3       	std	Y+39, r24	; 0x27
					y=pos[1]-'1';
    53ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    53ee:	88 2f       	mov	r24, r24
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	c1 97       	sbiw	r24, 0x31	; 49
    53f4:	9e a3       	std	Y+38, r25	; 0x26
    53f6:	8d a3       	std	Y+37, r24	; 0x25
					temp=nodes(n-1,x,y);
    53f8:	8d a9       	ldd	r24, Y+53	; 0x35
    53fa:	9e a9       	ldd	r25, Y+54	; 0x36
    53fc:	01 97       	sbiw	r24, 0x01	; 1
    53fe:	2f a1       	ldd	r18, Y+39	; 0x27
    5400:	38 a5       	ldd	r19, Y+40	; 0x28
    5402:	4d a1       	ldd	r20, Y+37	; 0x25
    5404:	5e a1       	ldd	r21, Y+38	; 0x26
    5406:	b9 01       	movw	r22, r18
    5408:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <nodes>
    540c:	98 ab       	std	Y+48, r25	; 0x30
    540e:	8f a7       	std	Y+47, r24	; 0x2f
					rx=temp[0];
    5410:	ef a5       	ldd	r30, Y+47	; 0x2f
    5412:	f8 a9       	ldd	r31, Y+48	; 0x30
    5414:	80 81       	ld	r24, Z
    5416:	91 81       	ldd	r25, Z+1	; 0x01
    5418:	9c ab       	std	Y+52, r25	; 0x34
    541a:	8b ab       	std	Y+51, r24	; 0x33
					ry=temp[1];
    541c:	8f a5       	ldd	r24, Y+47	; 0x2f
    541e:	98 a9       	ldd	r25, Y+48	; 0x30
    5420:	fc 01       	movw	r30, r24
    5422:	32 96       	adiw	r30, 0x02	; 2
    5424:	80 81       	ld	r24, Z
    5426:	91 81       	ldd	r25, Z+1	; 0x01
    5428:	9a ab       	std	Y+50, r25	; 0x32
    542a:	89 ab       	std	Y+49, r24	; 0x31
					if(c==0) // Move from start node to first animal
    542c:	8f a9       	ldd	r24, Y+55	; 0x37
    542e:	98 ad       	ldd	r25, Y+56	; 0x38
    5430:	00 97       	sbiw	r24, 0x00	; 0
    5432:	69 f4       	brne	.+26     	; 0x544e <main+0x542>
						path(0,0,x,y);
    5434:	2f a1       	ldd	r18, Y+39	; 0x27
    5436:	38 a5       	ldd	r19, Y+40	; 0x28
    5438:	ed a1       	ldd	r30, Y+37	; 0x25
    543a:	fe a1       	ldd	r31, Y+38	; 0x26
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	60 e0       	ldi	r22, 0x00	; 0
    5442:	70 e0       	ldi	r23, 0x00	; 0
    5444:	a9 01       	movw	r20, r18
    5446:	9f 01       	movw	r18, r30
    5448:	0e 94 b6 13 	call	0x276c	; 0x276c <path>
    544c:	0c c0       	rjmp	.+24     	; 0x5466 <main+0x55a>
					else // Move from a given habitat to the next animal
						path(x1,y1,x,y);
    544e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5450:	9e a5       	ldd	r25, Y+46	; 0x2e
    5452:	2b a5       	ldd	r18, Y+43	; 0x2b
    5454:	3c a5       	ldd	r19, Y+44	; 0x2c
    5456:	4f a1       	ldd	r20, Y+39	; 0x27
    5458:	58 a5       	ldd	r21, Y+40	; 0x28
    545a:	ed a1       	ldd	r30, Y+37	; 0x25
    545c:	fe a1       	ldd	r31, Y+38	; 0x26
    545e:	b9 01       	movw	r22, r18
    5460:	9f 01       	movw	r18, r30
    5462:	0e 94 b6 13 	call	0x276c	; 0x276c <path>
						
					anipick(pos); // Pick the animal
    5466:	ce 01       	movw	r24, r28
    5468:	cd 96       	adiw	r24, 0x3d	; 61
    546a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <anipick>
					path(x,y,rx,ry); // Move to its habitat
    546e:	8f a1       	ldd	r24, Y+39	; 0x27
    5470:	98 a5       	ldd	r25, Y+40	; 0x28
    5472:	2d a1       	ldd	r18, Y+37	; 0x25
    5474:	3e a1       	ldd	r19, Y+38	; 0x26
    5476:	4b a9       	ldd	r20, Y+51	; 0x33
    5478:	5c a9       	ldd	r21, Y+52	; 0x34
    547a:	e9 a9       	ldd	r30, Y+49	; 0x31
    547c:	fa a9       	ldd	r31, Y+50	; 0x32
    547e:	b9 01       	movw	r22, r18
    5480:	9f 01       	movw	r18, r30
    5482:	0e 94 b6 13 	call	0x276c	; 0x276c <path>
					habidrop(n-1,rx,ry); // Drop the animal
    5486:	8d a9       	ldd	r24, Y+53	; 0x35
    5488:	9e a9       	ldd	r25, Y+54	; 0x36
    548a:	01 97       	sbiw	r24, 0x01	; 1
    548c:	2b a9       	ldd	r18, Y+51	; 0x33
    548e:	3c a9       	ldd	r19, Y+52	; 0x34
    5490:	49 a9       	ldd	r20, Y+49	; 0x31
    5492:	5a a9       	ldd	r21, Y+50	; 0x32
    5494:	b9 01       	movw	r22, r18
    5496:	0e 94 12 15 	call	0x2a24	; 0x2a24 <habidrop>
					
					// Update the current position of the robot
					x1=rx;
    549a:	8b a9       	ldd	r24, Y+51	; 0x33
    549c:	9c a9       	ldd	r25, Y+52	; 0x34
    549e:	9e a7       	std	Y+46, r25	; 0x2e
    54a0:	8d a7       	std	Y+45, r24	; 0x2d
					y1=ry;
    54a2:	89 a9       	ldd	r24, Y+49	; 0x31
    54a4:	9a a9       	ldd	r25, Y+50	; 0x32
    54a6:	9c a7       	std	Y+44, r25	; 0x2c
    54a8:	8b a7       	std	Y+43, r24	; 0x2b
					c++;
    54aa:	8f a9       	ldd	r24, Y+55	; 0x37
    54ac:	98 ad       	ldd	r25, Y+56	; 0x38
    54ae:	01 96       	adiw	r24, 0x01	; 1
    54b0:	98 af       	std	Y+56, r25	; 0x38
    54b2:	8f ab       	std	Y+55, r24	; 0x37
						velocity(0,0);
						break;
					}					
				}			
				
				while(c<count/2)
    54b4:	80 91 24 03 	lds	r24, 0x0324
    54b8:	90 91 25 03 	lds	r25, 0x0325
    54bc:	29 96       	adiw	r28, 0x09	; 9
    54be:	9f af       	std	Y+63, r25	; 0x3f
    54c0:	8e af       	std	Y+62, r24	; 0x3e
    54c2:	29 97       	sbiw	r28, 0x09	; 9
    54c4:	29 96       	adiw	r28, 0x09	; 9
    54c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    54c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    54ca:	29 97       	sbiw	r28, 0x09	; 9
    54cc:	99 23       	and	r25, r25
    54ce:	4c f4       	brge	.+18     	; 0x54e2 <main+0x5d6>
    54d0:	29 96       	adiw	r28, 0x09	; 9
    54d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    54d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    54d6:	29 97       	sbiw	r28, 0x09	; 9
    54d8:	01 96       	adiw	r24, 0x01	; 1
    54da:	29 96       	adiw	r28, 0x09	; 9
    54dc:	9f af       	std	Y+63, r25	; 0x3f
    54de:	8e af       	std	Y+62, r24	; 0x3e
    54e0:	29 97       	sbiw	r28, 0x09	; 9
    54e2:	29 96       	adiw	r28, 0x09	; 9
    54e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    54e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54e8:	29 97       	sbiw	r28, 0x09	; 9
    54ea:	95 95       	asr	r25
    54ec:	87 95       	ror	r24
    54ee:	9c 01       	movw	r18, r24
    54f0:	8f a9       	ldd	r24, Y+55	; 0x37
    54f2:	98 ad       	ldd	r25, Y+56	; 0x38
    54f4:	82 17       	cp	r24, r18
    54f6:	93 07       	cpc	r25, r19
    54f8:	0c f4       	brge	.+2      	; 0x54fc <main+0x5f0>
    54fa:	3c cf       	rjmp	.-392    	; 0x5374 <main+0x468>
					y1=ry;
					c++;
				}
				
			   // Sound buzzer to indicate completion of task
			   buzzer_on();
    54fc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <buzzer_on>
    5500:	80 e0       	ldi	r24, 0x00	; 0
    5502:	90 e4       	ldi	r25, 0x40	; 64
    5504:	ac e9       	ldi	r26, 0x9C	; 156
    5506:	b5 e4       	ldi	r27, 0x45	; 69
    5508:	8b 87       	std	Y+11, r24	; 0x0b
    550a:	9c 87       	std	Y+12, r25	; 0x0c
    550c:	ad 87       	std	Y+13, r26	; 0x0d
    550e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5510:	6b 85       	ldd	r22, Y+11	; 0x0b
    5512:	7c 85       	ldd	r23, Y+12	; 0x0c
    5514:	8d 85       	ldd	r24, Y+13	; 0x0d
    5516:	9e 85       	ldd	r25, Y+14	; 0x0e
    5518:	26 e6       	ldi	r18, 0x66	; 102
    551a:	36 e6       	ldi	r19, 0x66	; 102
    551c:	46 e6       	ldi	r20, 0x66	; 102
    551e:	55 e4       	ldi	r21, 0x45	; 69
    5520:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    5524:	dc 01       	movw	r26, r24
    5526:	cb 01       	movw	r24, r22
    5528:	8f 83       	std	Y+7, r24	; 0x07
    552a:	98 87       	std	Y+8, r25	; 0x08
    552c:	a9 87       	std	Y+9, r26	; 0x09
    552e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5530:	6f 81       	ldd	r22, Y+7	; 0x07
    5532:	78 85       	ldd	r23, Y+8	; 0x08
    5534:	89 85       	ldd	r24, Y+9	; 0x09
    5536:	9a 85       	ldd	r25, Y+10	; 0x0a
    5538:	20 e0       	ldi	r18, 0x00	; 0
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	40 e8       	ldi	r20, 0x80	; 128
    553e:	5f e3       	ldi	r21, 0x3F	; 63
    5540:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__ltsf2>
    5544:	88 23       	and	r24, r24
    5546:	2c f4       	brge	.+10     	; 0x5552 <main+0x646>
		__ticks = 1;
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	9e 83       	std	Y+6, r25	; 0x06
    554e:	8d 83       	std	Y+5, r24	; 0x05
    5550:	3f c0       	rjmp	.+126    	; 0x55d0 <main+0x6c4>
	else if (__tmp > 65535)
    5552:	6f 81       	ldd	r22, Y+7	; 0x07
    5554:	78 85       	ldd	r23, Y+8	; 0x08
    5556:	89 85       	ldd	r24, Y+9	; 0x09
    5558:	9a 85       	ldd	r25, Y+10	; 0x0a
    555a:	20 e0       	ldi	r18, 0x00	; 0
    555c:	3f ef       	ldi	r19, 0xFF	; 255
    555e:	4f e7       	ldi	r20, 0x7F	; 127
    5560:	57 e4       	ldi	r21, 0x47	; 71
    5562:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <__gtsf2>
    5566:	18 16       	cp	r1, r24
    5568:	4c f5       	brge	.+82     	; 0x55bc <main+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    556a:	6b 85       	ldd	r22, Y+11	; 0x0b
    556c:	7c 85       	ldd	r23, Y+12	; 0x0c
    556e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5570:	9e 85       	ldd	r25, Y+14	; 0x0e
    5572:	20 e0       	ldi	r18, 0x00	; 0
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	40 e2       	ldi	r20, 0x20	; 32
    5578:	51 e4       	ldi	r21, 0x41	; 65
    557a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__mulsf3>
    557e:	dc 01       	movw	r26, r24
    5580:	cb 01       	movw	r24, r22
    5582:	bc 01       	movw	r22, r24
    5584:	cd 01       	movw	r24, r26
    5586:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	9e 83       	std	Y+6, r25	; 0x06
    5590:	8d 83       	std	Y+5, r24	; 0x05
    5592:	0f c0       	rjmp	.+30     	; 0x55b2 <main+0x6a6>
    5594:	80 e7       	ldi	r24, 0x70	; 112
    5596:	91 e0       	ldi	r25, 0x01	; 1
    5598:	9c 83       	std	Y+4, r25	; 0x04
    559a:	8b 83       	std	Y+3, r24	; 0x03
    559c:	8b 81       	ldd	r24, Y+3	; 0x03
    559e:	9c 81       	ldd	r25, Y+4	; 0x04
    55a0:	01 97       	sbiw	r24, 0x01	; 1
    55a2:	f1 f7       	brne	.-4      	; 0x55a0 <main+0x694>
    55a4:	9c 83       	std	Y+4, r25	; 0x04
    55a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55a8:	8d 81       	ldd	r24, Y+5	; 0x05
    55aa:	9e 81       	ldd	r25, Y+6	; 0x06
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	9e 83       	std	Y+6, r25	; 0x06
    55b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55b2:	8d 81       	ldd	r24, Y+5	; 0x05
    55b4:	9e 81       	ldd	r25, Y+6	; 0x06
    55b6:	00 97       	sbiw	r24, 0x00	; 0
    55b8:	69 f7       	brne	.-38     	; 0x5594 <main+0x688>
    55ba:	14 c0       	rjmp	.+40     	; 0x55e4 <main+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55bc:	6f 81       	ldd	r22, Y+7	; 0x07
    55be:	78 85       	ldd	r23, Y+8	; 0x08
    55c0:	89 85       	ldd	r24, Y+9	; 0x09
    55c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c4:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fixunssfsi>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	9e 83       	std	Y+6, r25	; 0x06
    55ce:	8d 83       	std	Y+5, r24	; 0x05
    55d0:	8d 81       	ldd	r24, Y+5	; 0x05
    55d2:	9e 81       	ldd	r25, Y+6	; 0x06
    55d4:	9a 83       	std	Y+2, r25	; 0x02
    55d6:	89 83       	std	Y+1, r24	; 0x01
    55d8:	89 81       	ldd	r24, Y+1	; 0x01
    55da:	9a 81       	ldd	r25, Y+2	; 0x02
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	f1 f7       	brne	.-4      	; 0x55dc <main+0x6d0>
    55e0:	9a 83       	std	Y+2, r25	; 0x02
    55e2:	89 83       	std	Y+1, r24	; 0x01
			   _delay_ms(5000);
			   buzzer_off();
    55e4:	0e 94 92 0a 	call	0x1524	; 0x1524 <buzzer_off>
			   break;
		}		
	}
	return;
}
    55e8:	c8 5b       	subi	r28, 0xB8	; 184
    55ea:	df 4f       	sbci	r29, 0xFF	; 255
    55ec:	0f b6       	in	r0, 0x3f	; 63
    55ee:	f8 94       	cli
    55f0:	de bf       	out	0x3e, r29	; 62
    55f2:	0f be       	out	0x3f, r0	; 63
    55f4:	cd bf       	out	0x3d, r28	; 61
    55f6:	cf 91       	pop	r28
    55f8:	df 91       	pop	r29
    55fa:	1f 91       	pop	r17
    55fc:	0f 91       	pop	r16
    55fe:	08 95       	ret

00005600 <__fixunssfsi>:
    5600:	ef 92       	push	r14
    5602:	ff 92       	push	r15
    5604:	0f 93       	push	r16
    5606:	1f 93       	push	r17
    5608:	7b 01       	movw	r14, r22
    560a:	8c 01       	movw	r16, r24
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	40 e0       	ldi	r20, 0x00	; 0
    5612:	5f e4       	ldi	r21, 0x4F	; 79
    5614:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__gesf2>
    5618:	88 23       	and	r24, r24
    561a:	8c f0       	brlt	.+34     	; 0x563e <__fixunssfsi+0x3e>
    561c:	c8 01       	movw	r24, r16
    561e:	b7 01       	movw	r22, r14
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	40 e0       	ldi	r20, 0x00	; 0
    5626:	5f e4       	ldi	r21, 0x4F	; 79
    5628:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <__subsf3>
    562c:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__fixsfsi>
    5630:	9b 01       	movw	r18, r22
    5632:	ac 01       	movw	r20, r24
    5634:	20 50       	subi	r18, 0x00	; 0
    5636:	30 40       	sbci	r19, 0x00	; 0
    5638:	40 40       	sbci	r20, 0x00	; 0
    563a:	50 48       	sbci	r21, 0x80	; 128
    563c:	06 c0       	rjmp	.+12     	; 0x564a <__fixunssfsi+0x4a>
    563e:	c8 01       	movw	r24, r16
    5640:	b7 01       	movw	r22, r14
    5642:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__fixsfsi>
    5646:	9b 01       	movw	r18, r22
    5648:	ac 01       	movw	r20, r24
    564a:	b9 01       	movw	r22, r18
    564c:	ca 01       	movw	r24, r20
    564e:	1f 91       	pop	r17
    5650:	0f 91       	pop	r16
    5652:	ff 90       	pop	r15
    5654:	ef 90       	pop	r14
    5656:	08 95       	ret

00005658 <_fpadd_parts>:
    5658:	a0 e0       	ldi	r26, 0x00	; 0
    565a:	b0 e0       	ldi	r27, 0x00	; 0
    565c:	e2 e3       	ldi	r30, 0x32	; 50
    565e:	fb e2       	ldi	r31, 0x2B	; 43
    5660:	0c 94 67 33 	jmp	0x66ce	; 0x66ce <__prologue_saves__>
    5664:	dc 01       	movw	r26, r24
    5666:	2b 01       	movw	r4, r22
    5668:	fa 01       	movw	r30, r20
    566a:	9c 91       	ld	r25, X
    566c:	92 30       	cpi	r25, 0x02	; 2
    566e:	08 f4       	brcc	.+2      	; 0x5672 <_fpadd_parts+0x1a>
    5670:	39 c1       	rjmp	.+626    	; 0x58e4 <_fpadd_parts+0x28c>
    5672:	eb 01       	movw	r28, r22
    5674:	88 81       	ld	r24, Y
    5676:	82 30       	cpi	r24, 0x02	; 2
    5678:	08 f4       	brcc	.+2      	; 0x567c <_fpadd_parts+0x24>
    567a:	33 c1       	rjmp	.+614    	; 0x58e2 <_fpadd_parts+0x28a>
    567c:	94 30       	cpi	r25, 0x04	; 4
    567e:	69 f4       	brne	.+26     	; 0x569a <_fpadd_parts+0x42>
    5680:	84 30       	cpi	r24, 0x04	; 4
    5682:	09 f0       	breq	.+2      	; 0x5686 <_fpadd_parts+0x2e>
    5684:	2f c1       	rjmp	.+606    	; 0x58e4 <_fpadd_parts+0x28c>
    5686:	11 96       	adiw	r26, 0x01	; 1
    5688:	9c 91       	ld	r25, X
    568a:	11 97       	sbiw	r26, 0x01	; 1
    568c:	89 81       	ldd	r24, Y+1	; 0x01
    568e:	98 17       	cp	r25, r24
    5690:	09 f4       	brne	.+2      	; 0x5694 <_fpadd_parts+0x3c>
    5692:	28 c1       	rjmp	.+592    	; 0x58e4 <_fpadd_parts+0x28c>
    5694:	a7 e0       	ldi	r26, 0x07	; 7
    5696:	b2 e0       	ldi	r27, 0x02	; 2
    5698:	25 c1       	rjmp	.+586    	; 0x58e4 <_fpadd_parts+0x28c>
    569a:	84 30       	cpi	r24, 0x04	; 4
    569c:	09 f4       	brne	.+2      	; 0x56a0 <_fpadd_parts+0x48>
    569e:	21 c1       	rjmp	.+578    	; 0x58e2 <_fpadd_parts+0x28a>
    56a0:	82 30       	cpi	r24, 0x02	; 2
    56a2:	a9 f4       	brne	.+42     	; 0x56ce <_fpadd_parts+0x76>
    56a4:	92 30       	cpi	r25, 0x02	; 2
    56a6:	09 f0       	breq	.+2      	; 0x56aa <_fpadd_parts+0x52>
    56a8:	1d c1       	rjmp	.+570    	; 0x58e4 <_fpadd_parts+0x28c>
    56aa:	9a 01       	movw	r18, r20
    56ac:	ad 01       	movw	r20, r26
    56ae:	88 e0       	ldi	r24, 0x08	; 8
    56b0:	ea 01       	movw	r28, r20
    56b2:	09 90       	ld	r0, Y+
    56b4:	ae 01       	movw	r20, r28
    56b6:	e9 01       	movw	r28, r18
    56b8:	09 92       	st	Y+, r0
    56ba:	9e 01       	movw	r18, r28
    56bc:	81 50       	subi	r24, 0x01	; 1
    56be:	c1 f7       	brne	.-16     	; 0x56b0 <_fpadd_parts+0x58>
    56c0:	e2 01       	movw	r28, r4
    56c2:	89 81       	ldd	r24, Y+1	; 0x01
    56c4:	11 96       	adiw	r26, 0x01	; 1
    56c6:	9c 91       	ld	r25, X
    56c8:	89 23       	and	r24, r25
    56ca:	81 83       	std	Z+1, r24	; 0x01
    56cc:	08 c1       	rjmp	.+528    	; 0x58de <_fpadd_parts+0x286>
    56ce:	92 30       	cpi	r25, 0x02	; 2
    56d0:	09 f4       	brne	.+2      	; 0x56d4 <_fpadd_parts+0x7c>
    56d2:	07 c1       	rjmp	.+526    	; 0x58e2 <_fpadd_parts+0x28a>
    56d4:	12 96       	adiw	r26, 0x02	; 2
    56d6:	2d 90       	ld	r2, X+
    56d8:	3c 90       	ld	r3, X
    56da:	13 97       	sbiw	r26, 0x03	; 3
    56dc:	eb 01       	movw	r28, r22
    56de:	8a 81       	ldd	r24, Y+2	; 0x02
    56e0:	9b 81       	ldd	r25, Y+3	; 0x03
    56e2:	14 96       	adiw	r26, 0x04	; 4
    56e4:	ad 90       	ld	r10, X+
    56e6:	bd 90       	ld	r11, X+
    56e8:	cd 90       	ld	r12, X+
    56ea:	dc 90       	ld	r13, X
    56ec:	17 97       	sbiw	r26, 0x07	; 7
    56ee:	ec 80       	ldd	r14, Y+4	; 0x04
    56f0:	fd 80       	ldd	r15, Y+5	; 0x05
    56f2:	0e 81       	ldd	r16, Y+6	; 0x06
    56f4:	1f 81       	ldd	r17, Y+7	; 0x07
    56f6:	91 01       	movw	r18, r2
    56f8:	28 1b       	sub	r18, r24
    56fa:	39 0b       	sbc	r19, r25
    56fc:	b9 01       	movw	r22, r18
    56fe:	37 ff       	sbrs	r19, 7
    5700:	04 c0       	rjmp	.+8      	; 0x570a <_fpadd_parts+0xb2>
    5702:	66 27       	eor	r22, r22
    5704:	77 27       	eor	r23, r23
    5706:	62 1b       	sub	r22, r18
    5708:	73 0b       	sbc	r23, r19
    570a:	60 32       	cpi	r22, 0x20	; 32
    570c:	71 05       	cpc	r23, r1
    570e:	0c f0       	brlt	.+2      	; 0x5712 <_fpadd_parts+0xba>
    5710:	61 c0       	rjmp	.+194    	; 0x57d4 <_fpadd_parts+0x17c>
    5712:	12 16       	cp	r1, r18
    5714:	13 06       	cpc	r1, r19
    5716:	6c f5       	brge	.+90     	; 0x5772 <_fpadd_parts+0x11a>
    5718:	37 01       	movw	r6, r14
    571a:	48 01       	movw	r8, r16
    571c:	06 2e       	mov	r0, r22
    571e:	04 c0       	rjmp	.+8      	; 0x5728 <_fpadd_parts+0xd0>
    5720:	96 94       	lsr	r9
    5722:	87 94       	ror	r8
    5724:	77 94       	ror	r7
    5726:	67 94       	ror	r6
    5728:	0a 94       	dec	r0
    572a:	d2 f7       	brpl	.-12     	; 0x5720 <_fpadd_parts+0xc8>
    572c:	21 e0       	ldi	r18, 0x01	; 1
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	04 c0       	rjmp	.+8      	; 0x573e <_fpadd_parts+0xe6>
    5736:	22 0f       	add	r18, r18
    5738:	33 1f       	adc	r19, r19
    573a:	44 1f       	adc	r20, r20
    573c:	55 1f       	adc	r21, r21
    573e:	6a 95       	dec	r22
    5740:	d2 f7       	brpl	.-12     	; 0x5736 <_fpadd_parts+0xde>
    5742:	21 50       	subi	r18, 0x01	; 1
    5744:	30 40       	sbci	r19, 0x00	; 0
    5746:	40 40       	sbci	r20, 0x00	; 0
    5748:	50 40       	sbci	r21, 0x00	; 0
    574a:	2e 21       	and	r18, r14
    574c:	3f 21       	and	r19, r15
    574e:	40 23       	and	r20, r16
    5750:	51 23       	and	r21, r17
    5752:	21 15       	cp	r18, r1
    5754:	31 05       	cpc	r19, r1
    5756:	41 05       	cpc	r20, r1
    5758:	51 05       	cpc	r21, r1
    575a:	21 f0       	breq	.+8      	; 0x5764 <_fpadd_parts+0x10c>
    575c:	21 e0       	ldi	r18, 0x01	; 1
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	40 e0       	ldi	r20, 0x00	; 0
    5762:	50 e0       	ldi	r21, 0x00	; 0
    5764:	79 01       	movw	r14, r18
    5766:	8a 01       	movw	r16, r20
    5768:	e6 28       	or	r14, r6
    576a:	f7 28       	or	r15, r7
    576c:	08 29       	or	r16, r8
    576e:	19 29       	or	r17, r9
    5770:	3c c0       	rjmp	.+120    	; 0x57ea <_fpadd_parts+0x192>
    5772:	23 2b       	or	r18, r19
    5774:	d1 f1       	breq	.+116    	; 0x57ea <_fpadd_parts+0x192>
    5776:	26 0e       	add	r2, r22
    5778:	37 1e       	adc	r3, r23
    577a:	35 01       	movw	r6, r10
    577c:	46 01       	movw	r8, r12
    577e:	06 2e       	mov	r0, r22
    5780:	04 c0       	rjmp	.+8      	; 0x578a <_fpadd_parts+0x132>
    5782:	96 94       	lsr	r9
    5784:	87 94       	ror	r8
    5786:	77 94       	ror	r7
    5788:	67 94       	ror	r6
    578a:	0a 94       	dec	r0
    578c:	d2 f7       	brpl	.-12     	; 0x5782 <_fpadd_parts+0x12a>
    578e:	21 e0       	ldi	r18, 0x01	; 1
    5790:	30 e0       	ldi	r19, 0x00	; 0
    5792:	40 e0       	ldi	r20, 0x00	; 0
    5794:	50 e0       	ldi	r21, 0x00	; 0
    5796:	04 c0       	rjmp	.+8      	; 0x57a0 <_fpadd_parts+0x148>
    5798:	22 0f       	add	r18, r18
    579a:	33 1f       	adc	r19, r19
    579c:	44 1f       	adc	r20, r20
    579e:	55 1f       	adc	r21, r21
    57a0:	6a 95       	dec	r22
    57a2:	d2 f7       	brpl	.-12     	; 0x5798 <_fpadd_parts+0x140>
    57a4:	21 50       	subi	r18, 0x01	; 1
    57a6:	30 40       	sbci	r19, 0x00	; 0
    57a8:	40 40       	sbci	r20, 0x00	; 0
    57aa:	50 40       	sbci	r21, 0x00	; 0
    57ac:	2a 21       	and	r18, r10
    57ae:	3b 21       	and	r19, r11
    57b0:	4c 21       	and	r20, r12
    57b2:	5d 21       	and	r21, r13
    57b4:	21 15       	cp	r18, r1
    57b6:	31 05       	cpc	r19, r1
    57b8:	41 05       	cpc	r20, r1
    57ba:	51 05       	cpc	r21, r1
    57bc:	21 f0       	breq	.+8      	; 0x57c6 <_fpadd_parts+0x16e>
    57be:	21 e0       	ldi	r18, 0x01	; 1
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	40 e0       	ldi	r20, 0x00	; 0
    57c4:	50 e0       	ldi	r21, 0x00	; 0
    57c6:	59 01       	movw	r10, r18
    57c8:	6a 01       	movw	r12, r20
    57ca:	a6 28       	or	r10, r6
    57cc:	b7 28       	or	r11, r7
    57ce:	c8 28       	or	r12, r8
    57d0:	d9 28       	or	r13, r9
    57d2:	0b c0       	rjmp	.+22     	; 0x57ea <_fpadd_parts+0x192>
    57d4:	82 15       	cp	r24, r2
    57d6:	93 05       	cpc	r25, r3
    57d8:	2c f0       	brlt	.+10     	; 0x57e4 <_fpadd_parts+0x18c>
    57da:	1c 01       	movw	r2, r24
    57dc:	aa 24       	eor	r10, r10
    57de:	bb 24       	eor	r11, r11
    57e0:	65 01       	movw	r12, r10
    57e2:	03 c0       	rjmp	.+6      	; 0x57ea <_fpadd_parts+0x192>
    57e4:	ee 24       	eor	r14, r14
    57e6:	ff 24       	eor	r15, r15
    57e8:	87 01       	movw	r16, r14
    57ea:	11 96       	adiw	r26, 0x01	; 1
    57ec:	9c 91       	ld	r25, X
    57ee:	d2 01       	movw	r26, r4
    57f0:	11 96       	adiw	r26, 0x01	; 1
    57f2:	8c 91       	ld	r24, X
    57f4:	98 17       	cp	r25, r24
    57f6:	09 f4       	brne	.+2      	; 0x57fa <_fpadd_parts+0x1a2>
    57f8:	45 c0       	rjmp	.+138    	; 0x5884 <_fpadd_parts+0x22c>
    57fa:	99 23       	and	r25, r25
    57fc:	39 f0       	breq	.+14     	; 0x580c <_fpadd_parts+0x1b4>
    57fe:	a8 01       	movw	r20, r16
    5800:	97 01       	movw	r18, r14
    5802:	2a 19       	sub	r18, r10
    5804:	3b 09       	sbc	r19, r11
    5806:	4c 09       	sbc	r20, r12
    5808:	5d 09       	sbc	r21, r13
    580a:	06 c0       	rjmp	.+12     	; 0x5818 <_fpadd_parts+0x1c0>
    580c:	a6 01       	movw	r20, r12
    580e:	95 01       	movw	r18, r10
    5810:	2e 19       	sub	r18, r14
    5812:	3f 09       	sbc	r19, r15
    5814:	40 0b       	sbc	r20, r16
    5816:	51 0b       	sbc	r21, r17
    5818:	57 fd       	sbrc	r21, 7
    581a:	08 c0       	rjmp	.+16     	; 0x582c <_fpadd_parts+0x1d4>
    581c:	11 82       	std	Z+1, r1	; 0x01
    581e:	33 82       	std	Z+3, r3	; 0x03
    5820:	22 82       	std	Z+2, r2	; 0x02
    5822:	24 83       	std	Z+4, r18	; 0x04
    5824:	35 83       	std	Z+5, r19	; 0x05
    5826:	46 83       	std	Z+6, r20	; 0x06
    5828:	57 83       	std	Z+7, r21	; 0x07
    582a:	1d c0       	rjmp	.+58     	; 0x5866 <_fpadd_parts+0x20e>
    582c:	81 e0       	ldi	r24, 0x01	; 1
    582e:	81 83       	std	Z+1, r24	; 0x01
    5830:	33 82       	std	Z+3, r3	; 0x03
    5832:	22 82       	std	Z+2, r2	; 0x02
    5834:	88 27       	eor	r24, r24
    5836:	99 27       	eor	r25, r25
    5838:	dc 01       	movw	r26, r24
    583a:	82 1b       	sub	r24, r18
    583c:	93 0b       	sbc	r25, r19
    583e:	a4 0b       	sbc	r26, r20
    5840:	b5 0b       	sbc	r27, r21
    5842:	84 83       	std	Z+4, r24	; 0x04
    5844:	95 83       	std	Z+5, r25	; 0x05
    5846:	a6 83       	std	Z+6, r26	; 0x06
    5848:	b7 83       	std	Z+7, r27	; 0x07
    584a:	0d c0       	rjmp	.+26     	; 0x5866 <_fpadd_parts+0x20e>
    584c:	22 0f       	add	r18, r18
    584e:	33 1f       	adc	r19, r19
    5850:	44 1f       	adc	r20, r20
    5852:	55 1f       	adc	r21, r21
    5854:	24 83       	std	Z+4, r18	; 0x04
    5856:	35 83       	std	Z+5, r19	; 0x05
    5858:	46 83       	std	Z+6, r20	; 0x06
    585a:	57 83       	std	Z+7, r21	; 0x07
    585c:	82 81       	ldd	r24, Z+2	; 0x02
    585e:	93 81       	ldd	r25, Z+3	; 0x03
    5860:	01 97       	sbiw	r24, 0x01	; 1
    5862:	93 83       	std	Z+3, r25	; 0x03
    5864:	82 83       	std	Z+2, r24	; 0x02
    5866:	24 81       	ldd	r18, Z+4	; 0x04
    5868:	35 81       	ldd	r19, Z+5	; 0x05
    586a:	46 81       	ldd	r20, Z+6	; 0x06
    586c:	57 81       	ldd	r21, Z+7	; 0x07
    586e:	da 01       	movw	r26, r20
    5870:	c9 01       	movw	r24, r18
    5872:	01 97       	sbiw	r24, 0x01	; 1
    5874:	a1 09       	sbc	r26, r1
    5876:	b1 09       	sbc	r27, r1
    5878:	8f 5f       	subi	r24, 0xFF	; 255
    587a:	9f 4f       	sbci	r25, 0xFF	; 255
    587c:	af 4f       	sbci	r26, 0xFF	; 255
    587e:	bf 43       	sbci	r27, 0x3F	; 63
    5880:	28 f3       	brcs	.-54     	; 0x584c <_fpadd_parts+0x1f4>
    5882:	0b c0       	rjmp	.+22     	; 0x589a <_fpadd_parts+0x242>
    5884:	91 83       	std	Z+1, r25	; 0x01
    5886:	33 82       	std	Z+3, r3	; 0x03
    5888:	22 82       	std	Z+2, r2	; 0x02
    588a:	ea 0c       	add	r14, r10
    588c:	fb 1c       	adc	r15, r11
    588e:	0c 1d       	adc	r16, r12
    5890:	1d 1d       	adc	r17, r13
    5892:	e4 82       	std	Z+4, r14	; 0x04
    5894:	f5 82       	std	Z+5, r15	; 0x05
    5896:	06 83       	std	Z+6, r16	; 0x06
    5898:	17 83       	std	Z+7, r17	; 0x07
    589a:	83 e0       	ldi	r24, 0x03	; 3
    589c:	80 83       	st	Z, r24
    589e:	24 81       	ldd	r18, Z+4	; 0x04
    58a0:	35 81       	ldd	r19, Z+5	; 0x05
    58a2:	46 81       	ldd	r20, Z+6	; 0x06
    58a4:	57 81       	ldd	r21, Z+7	; 0x07
    58a6:	57 ff       	sbrs	r21, 7
    58a8:	1a c0       	rjmp	.+52     	; 0x58de <_fpadd_parts+0x286>
    58aa:	c9 01       	movw	r24, r18
    58ac:	aa 27       	eor	r26, r26
    58ae:	97 fd       	sbrc	r25, 7
    58b0:	a0 95       	com	r26
    58b2:	ba 2f       	mov	r27, r26
    58b4:	81 70       	andi	r24, 0x01	; 1
    58b6:	90 70       	andi	r25, 0x00	; 0
    58b8:	a0 70       	andi	r26, 0x00	; 0
    58ba:	b0 70       	andi	r27, 0x00	; 0
    58bc:	56 95       	lsr	r21
    58be:	47 95       	ror	r20
    58c0:	37 95       	ror	r19
    58c2:	27 95       	ror	r18
    58c4:	82 2b       	or	r24, r18
    58c6:	93 2b       	or	r25, r19
    58c8:	a4 2b       	or	r26, r20
    58ca:	b5 2b       	or	r27, r21
    58cc:	84 83       	std	Z+4, r24	; 0x04
    58ce:	95 83       	std	Z+5, r25	; 0x05
    58d0:	a6 83       	std	Z+6, r26	; 0x06
    58d2:	b7 83       	std	Z+7, r27	; 0x07
    58d4:	82 81       	ldd	r24, Z+2	; 0x02
    58d6:	93 81       	ldd	r25, Z+3	; 0x03
    58d8:	01 96       	adiw	r24, 0x01	; 1
    58da:	93 83       	std	Z+3, r25	; 0x03
    58dc:	82 83       	std	Z+2, r24	; 0x02
    58de:	df 01       	movw	r26, r30
    58e0:	01 c0       	rjmp	.+2      	; 0x58e4 <_fpadd_parts+0x28c>
    58e2:	d2 01       	movw	r26, r4
    58e4:	cd 01       	movw	r24, r26
    58e6:	cd b7       	in	r28, 0x3d	; 61
    58e8:	de b7       	in	r29, 0x3e	; 62
    58ea:	e2 e1       	ldi	r30, 0x12	; 18
    58ec:	0c 94 83 33 	jmp	0x6706	; 0x6706 <__epilogue_restores__>

000058f0 <__subsf3>:
    58f0:	a0 e2       	ldi	r26, 0x20	; 32
    58f2:	b0 e0       	ldi	r27, 0x00	; 0
    58f4:	ee e7       	ldi	r30, 0x7E	; 126
    58f6:	fc e2       	ldi	r31, 0x2C	; 44
    58f8:	0c 94 73 33 	jmp	0x66e6	; 0x66e6 <__prologue_saves__+0x18>
    58fc:	69 83       	std	Y+1, r22	; 0x01
    58fe:	7a 83       	std	Y+2, r23	; 0x02
    5900:	8b 83       	std	Y+3, r24	; 0x03
    5902:	9c 83       	std	Y+4, r25	; 0x04
    5904:	2d 83       	std	Y+5, r18	; 0x05
    5906:	3e 83       	std	Y+6, r19	; 0x06
    5908:	4f 83       	std	Y+7, r20	; 0x07
    590a:	58 87       	std	Y+8, r21	; 0x08
    590c:	e9 e0       	ldi	r30, 0x09	; 9
    590e:	ee 2e       	mov	r14, r30
    5910:	f1 2c       	mov	r15, r1
    5912:	ec 0e       	add	r14, r28
    5914:	fd 1e       	adc	r15, r29
    5916:	ce 01       	movw	r24, r28
    5918:	01 96       	adiw	r24, 0x01	; 1
    591a:	b7 01       	movw	r22, r14
    591c:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5920:	8e 01       	movw	r16, r28
    5922:	0f 5e       	subi	r16, 0xEF	; 239
    5924:	1f 4f       	sbci	r17, 0xFF	; 255
    5926:	ce 01       	movw	r24, r28
    5928:	05 96       	adiw	r24, 0x05	; 5
    592a:	b8 01       	movw	r22, r16
    592c:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5930:	8a 89       	ldd	r24, Y+18	; 0x12
    5932:	91 e0       	ldi	r25, 0x01	; 1
    5934:	89 27       	eor	r24, r25
    5936:	8a 8b       	std	Y+18, r24	; 0x12
    5938:	c7 01       	movw	r24, r14
    593a:	b8 01       	movw	r22, r16
    593c:	ae 01       	movw	r20, r28
    593e:	47 5e       	subi	r20, 0xE7	; 231
    5940:	5f 4f       	sbci	r21, 0xFF	; 255
    5942:	0e 94 2c 2b 	call	0x5658	; 0x5658 <_fpadd_parts>
    5946:	0e 94 28 30 	call	0x6050	; 0x6050 <__pack_f>
    594a:	a0 96       	adiw	r28, 0x20	; 32
    594c:	e6 e0       	ldi	r30, 0x06	; 6
    594e:	0c 94 8f 33 	jmp	0x671e	; 0x671e <__epilogue_restores__+0x18>

00005952 <__addsf3>:
    5952:	a0 e2       	ldi	r26, 0x20	; 32
    5954:	b0 e0       	ldi	r27, 0x00	; 0
    5956:	ef ea       	ldi	r30, 0xAF	; 175
    5958:	fc e2       	ldi	r31, 0x2C	; 44
    595a:	0c 94 73 33 	jmp	0x66e6	; 0x66e6 <__prologue_saves__+0x18>
    595e:	69 83       	std	Y+1, r22	; 0x01
    5960:	7a 83       	std	Y+2, r23	; 0x02
    5962:	8b 83       	std	Y+3, r24	; 0x03
    5964:	9c 83       	std	Y+4, r25	; 0x04
    5966:	2d 83       	std	Y+5, r18	; 0x05
    5968:	3e 83       	std	Y+6, r19	; 0x06
    596a:	4f 83       	std	Y+7, r20	; 0x07
    596c:	58 87       	std	Y+8, r21	; 0x08
    596e:	f9 e0       	ldi	r31, 0x09	; 9
    5970:	ef 2e       	mov	r14, r31
    5972:	f1 2c       	mov	r15, r1
    5974:	ec 0e       	add	r14, r28
    5976:	fd 1e       	adc	r15, r29
    5978:	ce 01       	movw	r24, r28
    597a:	01 96       	adiw	r24, 0x01	; 1
    597c:	b7 01       	movw	r22, r14
    597e:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5982:	8e 01       	movw	r16, r28
    5984:	0f 5e       	subi	r16, 0xEF	; 239
    5986:	1f 4f       	sbci	r17, 0xFF	; 255
    5988:	ce 01       	movw	r24, r28
    598a:	05 96       	adiw	r24, 0x05	; 5
    598c:	b8 01       	movw	r22, r16
    598e:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5992:	c7 01       	movw	r24, r14
    5994:	b8 01       	movw	r22, r16
    5996:	ae 01       	movw	r20, r28
    5998:	47 5e       	subi	r20, 0xE7	; 231
    599a:	5f 4f       	sbci	r21, 0xFF	; 255
    599c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <_fpadd_parts>
    59a0:	0e 94 28 30 	call	0x6050	; 0x6050 <__pack_f>
    59a4:	a0 96       	adiw	r28, 0x20	; 32
    59a6:	e6 e0       	ldi	r30, 0x06	; 6
    59a8:	0c 94 8f 33 	jmp	0x671e	; 0x671e <__epilogue_restores__+0x18>

000059ac <__mulsf3>:
    59ac:	a0 e2       	ldi	r26, 0x20	; 32
    59ae:	b0 e0       	ldi	r27, 0x00	; 0
    59b0:	ec ed       	ldi	r30, 0xDC	; 220
    59b2:	fc e2       	ldi	r31, 0x2C	; 44
    59b4:	0c 94 67 33 	jmp	0x66ce	; 0x66ce <__prologue_saves__>
    59b8:	69 83       	std	Y+1, r22	; 0x01
    59ba:	7a 83       	std	Y+2, r23	; 0x02
    59bc:	8b 83       	std	Y+3, r24	; 0x03
    59be:	9c 83       	std	Y+4, r25	; 0x04
    59c0:	2d 83       	std	Y+5, r18	; 0x05
    59c2:	3e 83       	std	Y+6, r19	; 0x06
    59c4:	4f 83       	std	Y+7, r20	; 0x07
    59c6:	58 87       	std	Y+8, r21	; 0x08
    59c8:	ce 01       	movw	r24, r28
    59ca:	01 96       	adiw	r24, 0x01	; 1
    59cc:	be 01       	movw	r22, r28
    59ce:	67 5f       	subi	r22, 0xF7	; 247
    59d0:	7f 4f       	sbci	r23, 0xFF	; 255
    59d2:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    59d6:	ce 01       	movw	r24, r28
    59d8:	05 96       	adiw	r24, 0x05	; 5
    59da:	be 01       	movw	r22, r28
    59dc:	6f 5e       	subi	r22, 0xEF	; 239
    59de:	7f 4f       	sbci	r23, 0xFF	; 255
    59e0:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    59e4:	99 85       	ldd	r25, Y+9	; 0x09
    59e6:	92 30       	cpi	r25, 0x02	; 2
    59e8:	88 f0       	brcs	.+34     	; 0x5a0c <__mulsf3+0x60>
    59ea:	89 89       	ldd	r24, Y+17	; 0x11
    59ec:	82 30       	cpi	r24, 0x02	; 2
    59ee:	c8 f0       	brcs	.+50     	; 0x5a22 <__mulsf3+0x76>
    59f0:	94 30       	cpi	r25, 0x04	; 4
    59f2:	19 f4       	brne	.+6      	; 0x59fa <__mulsf3+0x4e>
    59f4:	82 30       	cpi	r24, 0x02	; 2
    59f6:	51 f4       	brne	.+20     	; 0x5a0c <__mulsf3+0x60>
    59f8:	04 c0       	rjmp	.+8      	; 0x5a02 <__mulsf3+0x56>
    59fa:	84 30       	cpi	r24, 0x04	; 4
    59fc:	29 f4       	brne	.+10     	; 0x5a08 <__mulsf3+0x5c>
    59fe:	92 30       	cpi	r25, 0x02	; 2
    5a00:	81 f4       	brne	.+32     	; 0x5a22 <__mulsf3+0x76>
    5a02:	87 e0       	ldi	r24, 0x07	; 7
    5a04:	92 e0       	ldi	r25, 0x02	; 2
    5a06:	c6 c0       	rjmp	.+396    	; 0x5b94 <__mulsf3+0x1e8>
    5a08:	92 30       	cpi	r25, 0x02	; 2
    5a0a:	49 f4       	brne	.+18     	; 0x5a1e <__mulsf3+0x72>
    5a0c:	20 e0       	ldi	r18, 0x00	; 0
    5a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a10:	8a 89       	ldd	r24, Y+18	; 0x12
    5a12:	98 13       	cpse	r25, r24
    5a14:	21 e0       	ldi	r18, 0x01	; 1
    5a16:	2a 87       	std	Y+10, r18	; 0x0a
    5a18:	ce 01       	movw	r24, r28
    5a1a:	09 96       	adiw	r24, 0x09	; 9
    5a1c:	bb c0       	rjmp	.+374    	; 0x5b94 <__mulsf3+0x1e8>
    5a1e:	82 30       	cpi	r24, 0x02	; 2
    5a20:	49 f4       	brne	.+18     	; 0x5a34 <__mulsf3+0x88>
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a26:	8a 89       	ldd	r24, Y+18	; 0x12
    5a28:	98 13       	cpse	r25, r24
    5a2a:	21 e0       	ldi	r18, 0x01	; 1
    5a2c:	2a 8b       	std	Y+18, r18	; 0x12
    5a2e:	ce 01       	movw	r24, r28
    5a30:	41 96       	adiw	r24, 0x11	; 17
    5a32:	b0 c0       	rjmp	.+352    	; 0x5b94 <__mulsf3+0x1e8>
    5a34:	2d 84       	ldd	r2, Y+13	; 0x0d
    5a36:	3e 84       	ldd	r3, Y+14	; 0x0e
    5a38:	4f 84       	ldd	r4, Y+15	; 0x0f
    5a3a:	58 88       	ldd	r5, Y+16	; 0x10
    5a3c:	6d 88       	ldd	r6, Y+21	; 0x15
    5a3e:	7e 88       	ldd	r7, Y+22	; 0x16
    5a40:	8f 88       	ldd	r8, Y+23	; 0x17
    5a42:	98 8c       	ldd	r9, Y+24	; 0x18
    5a44:	ee 24       	eor	r14, r14
    5a46:	ff 24       	eor	r15, r15
    5a48:	87 01       	movw	r16, r14
    5a4a:	aa 24       	eor	r10, r10
    5a4c:	bb 24       	eor	r11, r11
    5a4e:	65 01       	movw	r12, r10
    5a50:	40 e0       	ldi	r20, 0x00	; 0
    5a52:	50 e0       	ldi	r21, 0x00	; 0
    5a54:	60 e0       	ldi	r22, 0x00	; 0
    5a56:	70 e0       	ldi	r23, 0x00	; 0
    5a58:	e0 e0       	ldi	r30, 0x00	; 0
    5a5a:	f0 e0       	ldi	r31, 0x00	; 0
    5a5c:	c1 01       	movw	r24, r2
    5a5e:	81 70       	andi	r24, 0x01	; 1
    5a60:	90 70       	andi	r25, 0x00	; 0
    5a62:	89 2b       	or	r24, r25
    5a64:	e9 f0       	breq	.+58     	; 0x5aa0 <__mulsf3+0xf4>
    5a66:	e6 0c       	add	r14, r6
    5a68:	f7 1c       	adc	r15, r7
    5a6a:	08 1d       	adc	r16, r8
    5a6c:	19 1d       	adc	r17, r9
    5a6e:	9a 01       	movw	r18, r20
    5a70:	ab 01       	movw	r20, r22
    5a72:	2a 0d       	add	r18, r10
    5a74:	3b 1d       	adc	r19, r11
    5a76:	4c 1d       	adc	r20, r12
    5a78:	5d 1d       	adc	r21, r13
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	a0 e0       	ldi	r26, 0x00	; 0
    5a80:	b0 e0       	ldi	r27, 0x00	; 0
    5a82:	e6 14       	cp	r14, r6
    5a84:	f7 04       	cpc	r15, r7
    5a86:	08 05       	cpc	r16, r8
    5a88:	19 05       	cpc	r17, r9
    5a8a:	20 f4       	brcc	.+8      	; 0x5a94 <__mulsf3+0xe8>
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	a0 e0       	ldi	r26, 0x00	; 0
    5a92:	b0 e0       	ldi	r27, 0x00	; 0
    5a94:	ba 01       	movw	r22, r20
    5a96:	a9 01       	movw	r20, r18
    5a98:	48 0f       	add	r20, r24
    5a9a:	59 1f       	adc	r21, r25
    5a9c:	6a 1f       	adc	r22, r26
    5a9e:	7b 1f       	adc	r23, r27
    5aa0:	aa 0c       	add	r10, r10
    5aa2:	bb 1c       	adc	r11, r11
    5aa4:	cc 1c       	adc	r12, r12
    5aa6:	dd 1c       	adc	r13, r13
    5aa8:	97 fe       	sbrs	r9, 7
    5aaa:	08 c0       	rjmp	.+16     	; 0x5abc <__mulsf3+0x110>
    5aac:	81 e0       	ldi	r24, 0x01	; 1
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	a0 e0       	ldi	r26, 0x00	; 0
    5ab2:	b0 e0       	ldi	r27, 0x00	; 0
    5ab4:	a8 2a       	or	r10, r24
    5ab6:	b9 2a       	or	r11, r25
    5ab8:	ca 2a       	or	r12, r26
    5aba:	db 2a       	or	r13, r27
    5abc:	31 96       	adiw	r30, 0x01	; 1
    5abe:	e0 32       	cpi	r30, 0x20	; 32
    5ac0:	f1 05       	cpc	r31, r1
    5ac2:	49 f0       	breq	.+18     	; 0x5ad6 <__mulsf3+0x12a>
    5ac4:	66 0c       	add	r6, r6
    5ac6:	77 1c       	adc	r7, r7
    5ac8:	88 1c       	adc	r8, r8
    5aca:	99 1c       	adc	r9, r9
    5acc:	56 94       	lsr	r5
    5ace:	47 94       	ror	r4
    5ad0:	37 94       	ror	r3
    5ad2:	27 94       	ror	r2
    5ad4:	c3 cf       	rjmp	.-122    	; 0x5a5c <__mulsf3+0xb0>
    5ad6:	fa 85       	ldd	r31, Y+10	; 0x0a
    5ad8:	ea 89       	ldd	r30, Y+18	; 0x12
    5ada:	2b 89       	ldd	r18, Y+19	; 0x13
    5adc:	3c 89       	ldd	r19, Y+20	; 0x14
    5ade:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ae2:	28 0f       	add	r18, r24
    5ae4:	39 1f       	adc	r19, r25
    5ae6:	2e 5f       	subi	r18, 0xFE	; 254
    5ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    5aea:	17 c0       	rjmp	.+46     	; 0x5b1a <__mulsf3+0x16e>
    5aec:	ca 01       	movw	r24, r20
    5aee:	81 70       	andi	r24, 0x01	; 1
    5af0:	90 70       	andi	r25, 0x00	; 0
    5af2:	89 2b       	or	r24, r25
    5af4:	61 f0       	breq	.+24     	; 0x5b0e <__mulsf3+0x162>
    5af6:	16 95       	lsr	r17
    5af8:	07 95       	ror	r16
    5afa:	f7 94       	ror	r15
    5afc:	e7 94       	ror	r14
    5afe:	80 e0       	ldi	r24, 0x00	; 0
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	a0 e0       	ldi	r26, 0x00	; 0
    5b04:	b0 e8       	ldi	r27, 0x80	; 128
    5b06:	e8 2a       	or	r14, r24
    5b08:	f9 2a       	or	r15, r25
    5b0a:	0a 2b       	or	r16, r26
    5b0c:	1b 2b       	or	r17, r27
    5b0e:	76 95       	lsr	r23
    5b10:	67 95       	ror	r22
    5b12:	57 95       	ror	r21
    5b14:	47 95       	ror	r20
    5b16:	2f 5f       	subi	r18, 0xFF	; 255
    5b18:	3f 4f       	sbci	r19, 0xFF	; 255
    5b1a:	77 fd       	sbrc	r23, 7
    5b1c:	e7 cf       	rjmp	.-50     	; 0x5aec <__mulsf3+0x140>
    5b1e:	0c c0       	rjmp	.+24     	; 0x5b38 <__mulsf3+0x18c>
    5b20:	44 0f       	add	r20, r20
    5b22:	55 1f       	adc	r21, r21
    5b24:	66 1f       	adc	r22, r22
    5b26:	77 1f       	adc	r23, r23
    5b28:	17 fd       	sbrc	r17, 7
    5b2a:	41 60       	ori	r20, 0x01	; 1
    5b2c:	ee 0c       	add	r14, r14
    5b2e:	ff 1c       	adc	r15, r15
    5b30:	00 1f       	adc	r16, r16
    5b32:	11 1f       	adc	r17, r17
    5b34:	21 50       	subi	r18, 0x01	; 1
    5b36:	30 40       	sbci	r19, 0x00	; 0
    5b38:	40 30       	cpi	r20, 0x00	; 0
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	59 07       	cpc	r21, r25
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	69 07       	cpc	r22, r25
    5b42:	90 e4       	ldi	r25, 0x40	; 64
    5b44:	79 07       	cpc	r23, r25
    5b46:	60 f3       	brcs	.-40     	; 0x5b20 <__mulsf3+0x174>
    5b48:	2b 8f       	std	Y+27, r18	; 0x1b
    5b4a:	3c 8f       	std	Y+28, r19	; 0x1c
    5b4c:	db 01       	movw	r26, r22
    5b4e:	ca 01       	movw	r24, r20
    5b50:	8f 77       	andi	r24, 0x7F	; 127
    5b52:	90 70       	andi	r25, 0x00	; 0
    5b54:	a0 70       	andi	r26, 0x00	; 0
    5b56:	b0 70       	andi	r27, 0x00	; 0
    5b58:	80 34       	cpi	r24, 0x40	; 64
    5b5a:	91 05       	cpc	r25, r1
    5b5c:	a1 05       	cpc	r26, r1
    5b5e:	b1 05       	cpc	r27, r1
    5b60:	61 f4       	brne	.+24     	; 0x5b7a <__mulsf3+0x1ce>
    5b62:	47 fd       	sbrc	r20, 7
    5b64:	0a c0       	rjmp	.+20     	; 0x5b7a <__mulsf3+0x1ce>
    5b66:	e1 14       	cp	r14, r1
    5b68:	f1 04       	cpc	r15, r1
    5b6a:	01 05       	cpc	r16, r1
    5b6c:	11 05       	cpc	r17, r1
    5b6e:	29 f0       	breq	.+10     	; 0x5b7a <__mulsf3+0x1ce>
    5b70:	40 5c       	subi	r20, 0xC0	; 192
    5b72:	5f 4f       	sbci	r21, 0xFF	; 255
    5b74:	6f 4f       	sbci	r22, 0xFF	; 255
    5b76:	7f 4f       	sbci	r23, 0xFF	; 255
    5b78:	40 78       	andi	r20, 0x80	; 128
    5b7a:	1a 8e       	std	Y+26, r1	; 0x1a
    5b7c:	fe 17       	cp	r31, r30
    5b7e:	11 f0       	breq	.+4      	; 0x5b84 <__mulsf3+0x1d8>
    5b80:	81 e0       	ldi	r24, 0x01	; 1
    5b82:	8a 8f       	std	Y+26, r24	; 0x1a
    5b84:	4d 8f       	std	Y+29, r20	; 0x1d
    5b86:	5e 8f       	std	Y+30, r21	; 0x1e
    5b88:	6f 8f       	std	Y+31, r22	; 0x1f
    5b8a:	78 a3       	std	Y+32, r23	; 0x20
    5b8c:	83 e0       	ldi	r24, 0x03	; 3
    5b8e:	89 8f       	std	Y+25, r24	; 0x19
    5b90:	ce 01       	movw	r24, r28
    5b92:	49 96       	adiw	r24, 0x19	; 25
    5b94:	0e 94 28 30 	call	0x6050	; 0x6050 <__pack_f>
    5b98:	a0 96       	adiw	r28, 0x20	; 32
    5b9a:	e2 e1       	ldi	r30, 0x12	; 18
    5b9c:	0c 94 83 33 	jmp	0x6706	; 0x6706 <__epilogue_restores__>

00005ba0 <__divsf3>:
    5ba0:	a8 e1       	ldi	r26, 0x18	; 24
    5ba2:	b0 e0       	ldi	r27, 0x00	; 0
    5ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    5ba6:	fd e2       	ldi	r31, 0x2D	; 45
    5ba8:	0c 94 6f 33 	jmp	0x66de	; 0x66de <__prologue_saves__+0x10>
    5bac:	69 83       	std	Y+1, r22	; 0x01
    5bae:	7a 83       	std	Y+2, r23	; 0x02
    5bb0:	8b 83       	std	Y+3, r24	; 0x03
    5bb2:	9c 83       	std	Y+4, r25	; 0x04
    5bb4:	2d 83       	std	Y+5, r18	; 0x05
    5bb6:	3e 83       	std	Y+6, r19	; 0x06
    5bb8:	4f 83       	std	Y+7, r20	; 0x07
    5bba:	58 87       	std	Y+8, r21	; 0x08
    5bbc:	b9 e0       	ldi	r27, 0x09	; 9
    5bbe:	eb 2e       	mov	r14, r27
    5bc0:	f1 2c       	mov	r15, r1
    5bc2:	ec 0e       	add	r14, r28
    5bc4:	fd 1e       	adc	r15, r29
    5bc6:	ce 01       	movw	r24, r28
    5bc8:	01 96       	adiw	r24, 0x01	; 1
    5bca:	b7 01       	movw	r22, r14
    5bcc:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5bd0:	8e 01       	movw	r16, r28
    5bd2:	0f 5e       	subi	r16, 0xEF	; 239
    5bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd6:	ce 01       	movw	r24, r28
    5bd8:	05 96       	adiw	r24, 0x05	; 5
    5bda:	b8 01       	movw	r22, r16
    5bdc:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5be0:	29 85       	ldd	r18, Y+9	; 0x09
    5be2:	22 30       	cpi	r18, 0x02	; 2
    5be4:	08 f4       	brcc	.+2      	; 0x5be8 <__divsf3+0x48>
    5be6:	7e c0       	rjmp	.+252    	; 0x5ce4 <__divsf3+0x144>
    5be8:	39 89       	ldd	r19, Y+17	; 0x11
    5bea:	32 30       	cpi	r19, 0x02	; 2
    5bec:	10 f4       	brcc	.+4      	; 0x5bf2 <__divsf3+0x52>
    5bee:	b8 01       	movw	r22, r16
    5bf0:	7c c0       	rjmp	.+248    	; 0x5cea <__divsf3+0x14a>
    5bf2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    5bf6:	89 27       	eor	r24, r25
    5bf8:	8a 87       	std	Y+10, r24	; 0x0a
    5bfa:	24 30       	cpi	r18, 0x04	; 4
    5bfc:	11 f0       	breq	.+4      	; 0x5c02 <__divsf3+0x62>
    5bfe:	22 30       	cpi	r18, 0x02	; 2
    5c00:	31 f4       	brne	.+12     	; 0x5c0e <__divsf3+0x6e>
    5c02:	23 17       	cp	r18, r19
    5c04:	09 f0       	breq	.+2      	; 0x5c08 <__divsf3+0x68>
    5c06:	6e c0       	rjmp	.+220    	; 0x5ce4 <__divsf3+0x144>
    5c08:	67 e0       	ldi	r22, 0x07	; 7
    5c0a:	72 e0       	ldi	r23, 0x02	; 2
    5c0c:	6e c0       	rjmp	.+220    	; 0x5cea <__divsf3+0x14a>
    5c0e:	34 30       	cpi	r19, 0x04	; 4
    5c10:	39 f4       	brne	.+14     	; 0x5c20 <__divsf3+0x80>
    5c12:	1d 86       	std	Y+13, r1	; 0x0d
    5c14:	1e 86       	std	Y+14, r1	; 0x0e
    5c16:	1f 86       	std	Y+15, r1	; 0x0f
    5c18:	18 8a       	std	Y+16, r1	; 0x10
    5c1a:	1c 86       	std	Y+12, r1	; 0x0c
    5c1c:	1b 86       	std	Y+11, r1	; 0x0b
    5c1e:	04 c0       	rjmp	.+8      	; 0x5c28 <__divsf3+0x88>
    5c20:	32 30       	cpi	r19, 0x02	; 2
    5c22:	21 f4       	brne	.+8      	; 0x5c2c <__divsf3+0x8c>
    5c24:	84 e0       	ldi	r24, 0x04	; 4
    5c26:	89 87       	std	Y+9, r24	; 0x09
    5c28:	b7 01       	movw	r22, r14
    5c2a:	5f c0       	rjmp	.+190    	; 0x5cea <__divsf3+0x14a>
    5c2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c30:	8b 89       	ldd	r24, Y+19	; 0x13
    5c32:	9c 89       	ldd	r25, Y+20	; 0x14
    5c34:	28 1b       	sub	r18, r24
    5c36:	39 0b       	sbc	r19, r25
    5c38:	3c 87       	std	Y+12, r19	; 0x0c
    5c3a:	2b 87       	std	Y+11, r18	; 0x0b
    5c3c:	ed 84       	ldd	r14, Y+13	; 0x0d
    5c3e:	fe 84       	ldd	r15, Y+14	; 0x0e
    5c40:	0f 85       	ldd	r16, Y+15	; 0x0f
    5c42:	18 89       	ldd	r17, Y+16	; 0x10
    5c44:	ad 88       	ldd	r10, Y+21	; 0x15
    5c46:	be 88       	ldd	r11, Y+22	; 0x16
    5c48:	cf 88       	ldd	r12, Y+23	; 0x17
    5c4a:	d8 8c       	ldd	r13, Y+24	; 0x18
    5c4c:	ea 14       	cp	r14, r10
    5c4e:	fb 04       	cpc	r15, r11
    5c50:	0c 05       	cpc	r16, r12
    5c52:	1d 05       	cpc	r17, r13
    5c54:	40 f4       	brcc	.+16     	; 0x5c66 <__divsf3+0xc6>
    5c56:	ee 0c       	add	r14, r14
    5c58:	ff 1c       	adc	r15, r15
    5c5a:	00 1f       	adc	r16, r16
    5c5c:	11 1f       	adc	r17, r17
    5c5e:	21 50       	subi	r18, 0x01	; 1
    5c60:	30 40       	sbci	r19, 0x00	; 0
    5c62:	3c 87       	std	Y+12, r19	; 0x0c
    5c64:	2b 87       	std	Y+11, r18	; 0x0b
    5c66:	20 e0       	ldi	r18, 0x00	; 0
    5c68:	30 e0       	ldi	r19, 0x00	; 0
    5c6a:	40 e0       	ldi	r20, 0x00	; 0
    5c6c:	50 e0       	ldi	r21, 0x00	; 0
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	a0 e0       	ldi	r26, 0x00	; 0
    5c74:	b0 e4       	ldi	r27, 0x40	; 64
    5c76:	60 e0       	ldi	r22, 0x00	; 0
    5c78:	70 e0       	ldi	r23, 0x00	; 0
    5c7a:	ea 14       	cp	r14, r10
    5c7c:	fb 04       	cpc	r15, r11
    5c7e:	0c 05       	cpc	r16, r12
    5c80:	1d 05       	cpc	r17, r13
    5c82:	40 f0       	brcs	.+16     	; 0x5c94 <__divsf3+0xf4>
    5c84:	28 2b       	or	r18, r24
    5c86:	39 2b       	or	r19, r25
    5c88:	4a 2b       	or	r20, r26
    5c8a:	5b 2b       	or	r21, r27
    5c8c:	ea 18       	sub	r14, r10
    5c8e:	fb 08       	sbc	r15, r11
    5c90:	0c 09       	sbc	r16, r12
    5c92:	1d 09       	sbc	r17, r13
    5c94:	b6 95       	lsr	r27
    5c96:	a7 95       	ror	r26
    5c98:	97 95       	ror	r25
    5c9a:	87 95       	ror	r24
    5c9c:	ee 0c       	add	r14, r14
    5c9e:	ff 1c       	adc	r15, r15
    5ca0:	00 1f       	adc	r16, r16
    5ca2:	11 1f       	adc	r17, r17
    5ca4:	6f 5f       	subi	r22, 0xFF	; 255
    5ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca8:	6f 31       	cpi	r22, 0x1F	; 31
    5caa:	71 05       	cpc	r23, r1
    5cac:	31 f7       	brne	.-52     	; 0x5c7a <__divsf3+0xda>
    5cae:	da 01       	movw	r26, r20
    5cb0:	c9 01       	movw	r24, r18
    5cb2:	8f 77       	andi	r24, 0x7F	; 127
    5cb4:	90 70       	andi	r25, 0x00	; 0
    5cb6:	a0 70       	andi	r26, 0x00	; 0
    5cb8:	b0 70       	andi	r27, 0x00	; 0
    5cba:	80 34       	cpi	r24, 0x40	; 64
    5cbc:	91 05       	cpc	r25, r1
    5cbe:	a1 05       	cpc	r26, r1
    5cc0:	b1 05       	cpc	r27, r1
    5cc2:	61 f4       	brne	.+24     	; 0x5cdc <__divsf3+0x13c>
    5cc4:	27 fd       	sbrc	r18, 7
    5cc6:	0a c0       	rjmp	.+20     	; 0x5cdc <__divsf3+0x13c>
    5cc8:	e1 14       	cp	r14, r1
    5cca:	f1 04       	cpc	r15, r1
    5ccc:	01 05       	cpc	r16, r1
    5cce:	11 05       	cpc	r17, r1
    5cd0:	29 f0       	breq	.+10     	; 0x5cdc <__divsf3+0x13c>
    5cd2:	20 5c       	subi	r18, 0xC0	; 192
    5cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd6:	4f 4f       	sbci	r20, 0xFF	; 255
    5cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cda:	20 78       	andi	r18, 0x80	; 128
    5cdc:	2d 87       	std	Y+13, r18	; 0x0d
    5cde:	3e 87       	std	Y+14, r19	; 0x0e
    5ce0:	4f 87       	std	Y+15, r20	; 0x0f
    5ce2:	58 8b       	std	Y+16, r21	; 0x10
    5ce4:	be 01       	movw	r22, r28
    5ce6:	67 5f       	subi	r22, 0xF7	; 247
    5ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cea:	cb 01       	movw	r24, r22
    5cec:	0e 94 28 30 	call	0x6050	; 0x6050 <__pack_f>
    5cf0:	68 96       	adiw	r28, 0x18	; 24
    5cf2:	ea e0       	ldi	r30, 0x0A	; 10
    5cf4:	0c 94 8b 33 	jmp	0x6716	; 0x6716 <__epilogue_restores__+0x10>

00005cf8 <__gtsf2>:
    5cf8:	a8 e1       	ldi	r26, 0x18	; 24
    5cfa:	b0 e0       	ldi	r27, 0x00	; 0
    5cfc:	e2 e8       	ldi	r30, 0x82	; 130
    5cfe:	fe e2       	ldi	r31, 0x2E	; 46
    5d00:	0c 94 73 33 	jmp	0x66e6	; 0x66e6 <__prologue_saves__+0x18>
    5d04:	69 83       	std	Y+1, r22	; 0x01
    5d06:	7a 83       	std	Y+2, r23	; 0x02
    5d08:	8b 83       	std	Y+3, r24	; 0x03
    5d0a:	9c 83       	std	Y+4, r25	; 0x04
    5d0c:	2d 83       	std	Y+5, r18	; 0x05
    5d0e:	3e 83       	std	Y+6, r19	; 0x06
    5d10:	4f 83       	std	Y+7, r20	; 0x07
    5d12:	58 87       	std	Y+8, r21	; 0x08
    5d14:	89 e0       	ldi	r24, 0x09	; 9
    5d16:	e8 2e       	mov	r14, r24
    5d18:	f1 2c       	mov	r15, r1
    5d1a:	ec 0e       	add	r14, r28
    5d1c:	fd 1e       	adc	r15, r29
    5d1e:	ce 01       	movw	r24, r28
    5d20:	01 96       	adiw	r24, 0x01	; 1
    5d22:	b7 01       	movw	r22, r14
    5d24:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5d28:	8e 01       	movw	r16, r28
    5d2a:	0f 5e       	subi	r16, 0xEF	; 239
    5d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2e:	ce 01       	movw	r24, r28
    5d30:	05 96       	adiw	r24, 0x05	; 5
    5d32:	b8 01       	movw	r22, r16
    5d34:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5d38:	89 85       	ldd	r24, Y+9	; 0x09
    5d3a:	82 30       	cpi	r24, 0x02	; 2
    5d3c:	40 f0       	brcs	.+16     	; 0x5d4e <__gtsf2+0x56>
    5d3e:	89 89       	ldd	r24, Y+17	; 0x11
    5d40:	82 30       	cpi	r24, 0x02	; 2
    5d42:	28 f0       	brcs	.+10     	; 0x5d4e <__gtsf2+0x56>
    5d44:	c7 01       	movw	r24, r14
    5d46:	b8 01       	movw	r22, r16
    5d48:	0e 94 75 31 	call	0x62ea	; 0x62ea <__fpcmp_parts_f>
    5d4c:	01 c0       	rjmp	.+2      	; 0x5d50 <__gtsf2+0x58>
    5d4e:	8f ef       	ldi	r24, 0xFF	; 255
    5d50:	68 96       	adiw	r28, 0x18	; 24
    5d52:	e6 e0       	ldi	r30, 0x06	; 6
    5d54:	0c 94 8f 33 	jmp	0x671e	; 0x671e <__epilogue_restores__+0x18>

00005d58 <__gesf2>:
    5d58:	a8 e1       	ldi	r26, 0x18	; 24
    5d5a:	b0 e0       	ldi	r27, 0x00	; 0
    5d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    5d5e:	fe e2       	ldi	r31, 0x2E	; 46
    5d60:	0c 94 73 33 	jmp	0x66e6	; 0x66e6 <__prologue_saves__+0x18>
    5d64:	69 83       	std	Y+1, r22	; 0x01
    5d66:	7a 83       	std	Y+2, r23	; 0x02
    5d68:	8b 83       	std	Y+3, r24	; 0x03
    5d6a:	9c 83       	std	Y+4, r25	; 0x04
    5d6c:	2d 83       	std	Y+5, r18	; 0x05
    5d6e:	3e 83       	std	Y+6, r19	; 0x06
    5d70:	4f 83       	std	Y+7, r20	; 0x07
    5d72:	58 87       	std	Y+8, r21	; 0x08
    5d74:	89 e0       	ldi	r24, 0x09	; 9
    5d76:	e8 2e       	mov	r14, r24
    5d78:	f1 2c       	mov	r15, r1
    5d7a:	ec 0e       	add	r14, r28
    5d7c:	fd 1e       	adc	r15, r29
    5d7e:	ce 01       	movw	r24, r28
    5d80:	01 96       	adiw	r24, 0x01	; 1
    5d82:	b7 01       	movw	r22, r14
    5d84:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5d88:	8e 01       	movw	r16, r28
    5d8a:	0f 5e       	subi	r16, 0xEF	; 239
    5d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d8e:	ce 01       	movw	r24, r28
    5d90:	05 96       	adiw	r24, 0x05	; 5
    5d92:	b8 01       	movw	r22, r16
    5d94:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5d98:	89 85       	ldd	r24, Y+9	; 0x09
    5d9a:	82 30       	cpi	r24, 0x02	; 2
    5d9c:	40 f0       	brcs	.+16     	; 0x5dae <__gesf2+0x56>
    5d9e:	89 89       	ldd	r24, Y+17	; 0x11
    5da0:	82 30       	cpi	r24, 0x02	; 2
    5da2:	28 f0       	brcs	.+10     	; 0x5dae <__gesf2+0x56>
    5da4:	c7 01       	movw	r24, r14
    5da6:	b8 01       	movw	r22, r16
    5da8:	0e 94 75 31 	call	0x62ea	; 0x62ea <__fpcmp_parts_f>
    5dac:	01 c0       	rjmp	.+2      	; 0x5db0 <__gesf2+0x58>
    5dae:	8f ef       	ldi	r24, 0xFF	; 255
    5db0:	68 96       	adiw	r28, 0x18	; 24
    5db2:	e6 e0       	ldi	r30, 0x06	; 6
    5db4:	0c 94 8f 33 	jmp	0x671e	; 0x671e <__epilogue_restores__+0x18>

00005db8 <__ltsf2>:
    5db8:	a8 e1       	ldi	r26, 0x18	; 24
    5dba:	b0 e0       	ldi	r27, 0x00	; 0
    5dbc:	e2 ee       	ldi	r30, 0xE2	; 226
    5dbe:	fe e2       	ldi	r31, 0x2E	; 46
    5dc0:	0c 94 73 33 	jmp	0x66e6	; 0x66e6 <__prologue_saves__+0x18>
    5dc4:	69 83       	std	Y+1, r22	; 0x01
    5dc6:	7a 83       	std	Y+2, r23	; 0x02
    5dc8:	8b 83       	std	Y+3, r24	; 0x03
    5dca:	9c 83       	std	Y+4, r25	; 0x04
    5dcc:	2d 83       	std	Y+5, r18	; 0x05
    5dce:	3e 83       	std	Y+6, r19	; 0x06
    5dd0:	4f 83       	std	Y+7, r20	; 0x07
    5dd2:	58 87       	std	Y+8, r21	; 0x08
    5dd4:	89 e0       	ldi	r24, 0x09	; 9
    5dd6:	e8 2e       	mov	r14, r24
    5dd8:	f1 2c       	mov	r15, r1
    5dda:	ec 0e       	add	r14, r28
    5ddc:	fd 1e       	adc	r15, r29
    5dde:	ce 01       	movw	r24, r28
    5de0:	01 96       	adiw	r24, 0x01	; 1
    5de2:	b7 01       	movw	r22, r14
    5de4:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5de8:	8e 01       	movw	r16, r28
    5dea:	0f 5e       	subi	r16, 0xEF	; 239
    5dec:	1f 4f       	sbci	r17, 0xFF	; 255
    5dee:	ce 01       	movw	r24, r28
    5df0:	05 96       	adiw	r24, 0x05	; 5
    5df2:	b8 01       	movw	r22, r16
    5df4:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5df8:	89 85       	ldd	r24, Y+9	; 0x09
    5dfa:	82 30       	cpi	r24, 0x02	; 2
    5dfc:	40 f0       	brcs	.+16     	; 0x5e0e <__ltsf2+0x56>
    5dfe:	89 89       	ldd	r24, Y+17	; 0x11
    5e00:	82 30       	cpi	r24, 0x02	; 2
    5e02:	28 f0       	brcs	.+10     	; 0x5e0e <__ltsf2+0x56>
    5e04:	c7 01       	movw	r24, r14
    5e06:	b8 01       	movw	r22, r16
    5e08:	0e 94 75 31 	call	0x62ea	; 0x62ea <__fpcmp_parts_f>
    5e0c:	01 c0       	rjmp	.+2      	; 0x5e10 <__ltsf2+0x58>
    5e0e:	81 e0       	ldi	r24, 0x01	; 1
    5e10:	68 96       	adiw	r28, 0x18	; 24
    5e12:	e6 e0       	ldi	r30, 0x06	; 6
    5e14:	0c 94 8f 33 	jmp	0x671e	; 0x671e <__epilogue_restores__+0x18>

00005e18 <__fixsfsi>:
    5e18:	ac e0       	ldi	r26, 0x0C	; 12
    5e1a:	b0 e0       	ldi	r27, 0x00	; 0
    5e1c:	e2 e1       	ldi	r30, 0x12	; 18
    5e1e:	ff e2       	ldi	r31, 0x2F	; 47
    5e20:	0c 94 77 33 	jmp	0x66ee	; 0x66ee <__prologue_saves__+0x20>
    5e24:	69 83       	std	Y+1, r22	; 0x01
    5e26:	7a 83       	std	Y+2, r23	; 0x02
    5e28:	8b 83       	std	Y+3, r24	; 0x03
    5e2a:	9c 83       	std	Y+4, r25	; 0x04
    5e2c:	ce 01       	movw	r24, r28
    5e2e:	01 96       	adiw	r24, 0x01	; 1
    5e30:	be 01       	movw	r22, r28
    5e32:	6b 5f       	subi	r22, 0xFB	; 251
    5e34:	7f 4f       	sbci	r23, 0xFF	; 255
    5e36:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__unpack_f>
    5e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e3c:	82 30       	cpi	r24, 0x02	; 2
    5e3e:	61 f1       	breq	.+88     	; 0x5e98 <__fixsfsi+0x80>
    5e40:	82 30       	cpi	r24, 0x02	; 2
    5e42:	50 f1       	brcs	.+84     	; 0x5e98 <__fixsfsi+0x80>
    5e44:	84 30       	cpi	r24, 0x04	; 4
    5e46:	21 f4       	brne	.+8      	; 0x5e50 <__fixsfsi+0x38>
    5e48:	8e 81       	ldd	r24, Y+6	; 0x06
    5e4a:	88 23       	and	r24, r24
    5e4c:	51 f1       	breq	.+84     	; 0x5ea2 <__fixsfsi+0x8a>
    5e4e:	2e c0       	rjmp	.+92     	; 0x5eac <__fixsfsi+0x94>
    5e50:	2f 81       	ldd	r18, Y+7	; 0x07
    5e52:	38 85       	ldd	r19, Y+8	; 0x08
    5e54:	37 fd       	sbrc	r19, 7
    5e56:	20 c0       	rjmp	.+64     	; 0x5e98 <__fixsfsi+0x80>
    5e58:	6e 81       	ldd	r22, Y+6	; 0x06
    5e5a:	2f 31       	cpi	r18, 0x1F	; 31
    5e5c:	31 05       	cpc	r19, r1
    5e5e:	1c f0       	brlt	.+6      	; 0x5e66 <__fixsfsi+0x4e>
    5e60:	66 23       	and	r22, r22
    5e62:	f9 f0       	breq	.+62     	; 0x5ea2 <__fixsfsi+0x8a>
    5e64:	23 c0       	rjmp	.+70     	; 0x5eac <__fixsfsi+0x94>
    5e66:	8e e1       	ldi	r24, 0x1E	; 30
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	82 1b       	sub	r24, r18
    5e6c:	93 0b       	sbc	r25, r19
    5e6e:	29 85       	ldd	r18, Y+9	; 0x09
    5e70:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e72:	4b 85       	ldd	r20, Y+11	; 0x0b
    5e74:	5c 85       	ldd	r21, Y+12	; 0x0c
    5e76:	04 c0       	rjmp	.+8      	; 0x5e80 <__fixsfsi+0x68>
    5e78:	56 95       	lsr	r21
    5e7a:	47 95       	ror	r20
    5e7c:	37 95       	ror	r19
    5e7e:	27 95       	ror	r18
    5e80:	8a 95       	dec	r24
    5e82:	d2 f7       	brpl	.-12     	; 0x5e78 <__fixsfsi+0x60>
    5e84:	66 23       	and	r22, r22
    5e86:	b1 f0       	breq	.+44     	; 0x5eb4 <__fixsfsi+0x9c>
    5e88:	50 95       	com	r21
    5e8a:	40 95       	com	r20
    5e8c:	30 95       	com	r19
    5e8e:	21 95       	neg	r18
    5e90:	3f 4f       	sbci	r19, 0xFF	; 255
    5e92:	4f 4f       	sbci	r20, 0xFF	; 255
    5e94:	5f 4f       	sbci	r21, 0xFF	; 255
    5e96:	0e c0       	rjmp	.+28     	; 0x5eb4 <__fixsfsi+0x9c>
    5e98:	20 e0       	ldi	r18, 0x00	; 0
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	40 e0       	ldi	r20, 0x00	; 0
    5e9e:	50 e0       	ldi	r21, 0x00	; 0
    5ea0:	09 c0       	rjmp	.+18     	; 0x5eb4 <__fixsfsi+0x9c>
    5ea2:	2f ef       	ldi	r18, 0xFF	; 255
    5ea4:	3f ef       	ldi	r19, 0xFF	; 255
    5ea6:	4f ef       	ldi	r20, 0xFF	; 255
    5ea8:	5f e7       	ldi	r21, 0x7F	; 127
    5eaa:	04 c0       	rjmp	.+8      	; 0x5eb4 <__fixsfsi+0x9c>
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	40 e0       	ldi	r20, 0x00	; 0
    5eb2:	50 e8       	ldi	r21, 0x80	; 128
    5eb4:	b9 01       	movw	r22, r18
    5eb6:	ca 01       	movw	r24, r20
    5eb8:	2c 96       	adiw	r28, 0x0c	; 12
    5eba:	e2 e0       	ldi	r30, 0x02	; 2
    5ebc:	0c 94 93 33 	jmp	0x6726	; 0x6726 <__epilogue_restores__+0x20>

00005ec0 <__floatunsisf>:
    5ec0:	a8 e0       	ldi	r26, 0x08	; 8
    5ec2:	b0 e0       	ldi	r27, 0x00	; 0
    5ec4:	e6 e6       	ldi	r30, 0x66	; 102
    5ec6:	ff e2       	ldi	r31, 0x2F	; 47
    5ec8:	0c 94 6f 33 	jmp	0x66de	; 0x66de <__prologue_saves__+0x10>
    5ecc:	7b 01       	movw	r14, r22
    5ece:	8c 01       	movw	r16, r24
    5ed0:	61 15       	cp	r22, r1
    5ed2:	71 05       	cpc	r23, r1
    5ed4:	81 05       	cpc	r24, r1
    5ed6:	91 05       	cpc	r25, r1
    5ed8:	19 f4       	brne	.+6      	; 0x5ee0 <__floatunsisf+0x20>
    5eda:	82 e0       	ldi	r24, 0x02	; 2
    5edc:	89 83       	std	Y+1, r24	; 0x01
    5ede:	60 c0       	rjmp	.+192    	; 0x5fa0 <__floatunsisf+0xe0>
    5ee0:	83 e0       	ldi	r24, 0x03	; 3
    5ee2:	89 83       	std	Y+1, r24	; 0x01
    5ee4:	8e e1       	ldi	r24, 0x1E	; 30
    5ee6:	c8 2e       	mov	r12, r24
    5ee8:	d1 2c       	mov	r13, r1
    5eea:	dc 82       	std	Y+4, r13	; 0x04
    5eec:	cb 82       	std	Y+3, r12	; 0x03
    5eee:	ed 82       	std	Y+5, r14	; 0x05
    5ef0:	fe 82       	std	Y+6, r15	; 0x06
    5ef2:	0f 83       	std	Y+7, r16	; 0x07
    5ef4:	18 87       	std	Y+8, r17	; 0x08
    5ef6:	c8 01       	movw	r24, r16
    5ef8:	b7 01       	movw	r22, r14
    5efa:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <__clzsi2>
    5efe:	fc 01       	movw	r30, r24
    5f00:	31 97       	sbiw	r30, 0x01	; 1
    5f02:	f7 ff       	sbrs	r31, 7
    5f04:	3b c0       	rjmp	.+118    	; 0x5f7c <__floatunsisf+0xbc>
    5f06:	22 27       	eor	r18, r18
    5f08:	33 27       	eor	r19, r19
    5f0a:	2e 1b       	sub	r18, r30
    5f0c:	3f 0b       	sbc	r19, r31
    5f0e:	57 01       	movw	r10, r14
    5f10:	68 01       	movw	r12, r16
    5f12:	02 2e       	mov	r0, r18
    5f14:	04 c0       	rjmp	.+8      	; 0x5f1e <__floatunsisf+0x5e>
    5f16:	d6 94       	lsr	r13
    5f18:	c7 94       	ror	r12
    5f1a:	b7 94       	ror	r11
    5f1c:	a7 94       	ror	r10
    5f1e:	0a 94       	dec	r0
    5f20:	d2 f7       	brpl	.-12     	; 0x5f16 <__floatunsisf+0x56>
    5f22:	40 e0       	ldi	r20, 0x00	; 0
    5f24:	50 e0       	ldi	r21, 0x00	; 0
    5f26:	60 e0       	ldi	r22, 0x00	; 0
    5f28:	70 e0       	ldi	r23, 0x00	; 0
    5f2a:	81 e0       	ldi	r24, 0x01	; 1
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	a0 e0       	ldi	r26, 0x00	; 0
    5f30:	b0 e0       	ldi	r27, 0x00	; 0
    5f32:	04 c0       	rjmp	.+8      	; 0x5f3c <__floatunsisf+0x7c>
    5f34:	88 0f       	add	r24, r24
    5f36:	99 1f       	adc	r25, r25
    5f38:	aa 1f       	adc	r26, r26
    5f3a:	bb 1f       	adc	r27, r27
    5f3c:	2a 95       	dec	r18
    5f3e:	d2 f7       	brpl	.-12     	; 0x5f34 <__floatunsisf+0x74>
    5f40:	01 97       	sbiw	r24, 0x01	; 1
    5f42:	a1 09       	sbc	r26, r1
    5f44:	b1 09       	sbc	r27, r1
    5f46:	8e 21       	and	r24, r14
    5f48:	9f 21       	and	r25, r15
    5f4a:	a0 23       	and	r26, r16
    5f4c:	b1 23       	and	r27, r17
    5f4e:	00 97       	sbiw	r24, 0x00	; 0
    5f50:	a1 05       	cpc	r26, r1
    5f52:	b1 05       	cpc	r27, r1
    5f54:	21 f0       	breq	.+8      	; 0x5f5e <__floatunsisf+0x9e>
    5f56:	41 e0       	ldi	r20, 0x01	; 1
    5f58:	50 e0       	ldi	r21, 0x00	; 0
    5f5a:	60 e0       	ldi	r22, 0x00	; 0
    5f5c:	70 e0       	ldi	r23, 0x00	; 0
    5f5e:	4a 29       	or	r20, r10
    5f60:	5b 29       	or	r21, r11
    5f62:	6c 29       	or	r22, r12
    5f64:	7d 29       	or	r23, r13
    5f66:	4d 83       	std	Y+5, r20	; 0x05
    5f68:	5e 83       	std	Y+6, r21	; 0x06
    5f6a:	6f 83       	std	Y+7, r22	; 0x07
    5f6c:	78 87       	std	Y+8, r23	; 0x08
    5f6e:	8e e1       	ldi	r24, 0x1E	; 30
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	8e 1b       	sub	r24, r30
    5f74:	9f 0b       	sbc	r25, r31
    5f76:	9c 83       	std	Y+4, r25	; 0x04
    5f78:	8b 83       	std	Y+3, r24	; 0x03
    5f7a:	12 c0       	rjmp	.+36     	; 0x5fa0 <__floatunsisf+0xe0>
    5f7c:	30 97       	sbiw	r30, 0x00	; 0
    5f7e:	81 f0       	breq	.+32     	; 0x5fa0 <__floatunsisf+0xe0>
    5f80:	0e 2e       	mov	r0, r30
    5f82:	04 c0       	rjmp	.+8      	; 0x5f8c <__floatunsisf+0xcc>
    5f84:	ee 0c       	add	r14, r14
    5f86:	ff 1c       	adc	r15, r15
    5f88:	00 1f       	adc	r16, r16
    5f8a:	11 1f       	adc	r17, r17
    5f8c:	0a 94       	dec	r0
    5f8e:	d2 f7       	brpl	.-12     	; 0x5f84 <__floatunsisf+0xc4>
    5f90:	ed 82       	std	Y+5, r14	; 0x05
    5f92:	fe 82       	std	Y+6, r15	; 0x06
    5f94:	0f 83       	std	Y+7, r16	; 0x07
    5f96:	18 87       	std	Y+8, r17	; 0x08
    5f98:	ce 1a       	sub	r12, r30
    5f9a:	df 0a       	sbc	r13, r31
    5f9c:	dc 82       	std	Y+4, r13	; 0x04
    5f9e:	cb 82       	std	Y+3, r12	; 0x03
    5fa0:	1a 82       	std	Y+2, r1	; 0x02
    5fa2:	ce 01       	movw	r24, r28
    5fa4:	01 96       	adiw	r24, 0x01	; 1
    5fa6:	0e 94 28 30 	call	0x6050	; 0x6050 <__pack_f>
    5faa:	28 96       	adiw	r28, 0x08	; 8
    5fac:	ea e0       	ldi	r30, 0x0A	; 10
    5fae:	0c 94 8b 33 	jmp	0x6716	; 0x6716 <__epilogue_restores__+0x10>

00005fb2 <__clzsi2>:
    5fb2:	ef 92       	push	r14
    5fb4:	ff 92       	push	r15
    5fb6:	0f 93       	push	r16
    5fb8:	1f 93       	push	r17
    5fba:	7b 01       	movw	r14, r22
    5fbc:	8c 01       	movw	r16, r24
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	e8 16       	cp	r14, r24
    5fc2:	80 e0       	ldi	r24, 0x00	; 0
    5fc4:	f8 06       	cpc	r15, r24
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	08 07       	cpc	r16, r24
    5fca:	80 e0       	ldi	r24, 0x00	; 0
    5fcc:	18 07       	cpc	r17, r24
    5fce:	88 f4       	brcc	.+34     	; 0x5ff2 <__clzsi2+0x40>
    5fd0:	8f ef       	ldi	r24, 0xFF	; 255
    5fd2:	e8 16       	cp	r14, r24
    5fd4:	f1 04       	cpc	r15, r1
    5fd6:	01 05       	cpc	r16, r1
    5fd8:	11 05       	cpc	r17, r1
    5fda:	31 f0       	breq	.+12     	; 0x5fe8 <__clzsi2+0x36>
    5fdc:	28 f0       	brcs	.+10     	; 0x5fe8 <__clzsi2+0x36>
    5fde:	88 e0       	ldi	r24, 0x08	; 8
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	a0 e0       	ldi	r26, 0x00	; 0
    5fe4:	b0 e0       	ldi	r27, 0x00	; 0
    5fe6:	17 c0       	rjmp	.+46     	; 0x6016 <__clzsi2+0x64>
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	a0 e0       	ldi	r26, 0x00	; 0
    5fee:	b0 e0       	ldi	r27, 0x00	; 0
    5ff0:	12 c0       	rjmp	.+36     	; 0x6016 <__clzsi2+0x64>
    5ff2:	80 e0       	ldi	r24, 0x00	; 0
    5ff4:	e8 16       	cp	r14, r24
    5ff6:	80 e0       	ldi	r24, 0x00	; 0
    5ff8:	f8 06       	cpc	r15, r24
    5ffa:	80 e0       	ldi	r24, 0x00	; 0
    5ffc:	08 07       	cpc	r16, r24
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	18 07       	cpc	r17, r24
    6002:	28 f0       	brcs	.+10     	; 0x600e <__clzsi2+0x5c>
    6004:	88 e1       	ldi	r24, 0x18	; 24
    6006:	90 e0       	ldi	r25, 0x00	; 0
    6008:	a0 e0       	ldi	r26, 0x00	; 0
    600a:	b0 e0       	ldi	r27, 0x00	; 0
    600c:	04 c0       	rjmp	.+8      	; 0x6016 <__clzsi2+0x64>
    600e:	80 e1       	ldi	r24, 0x10	; 16
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	a0 e0       	ldi	r26, 0x00	; 0
    6014:	b0 e0       	ldi	r27, 0x00	; 0
    6016:	20 e2       	ldi	r18, 0x20	; 32
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	40 e0       	ldi	r20, 0x00	; 0
    601c:	50 e0       	ldi	r21, 0x00	; 0
    601e:	28 1b       	sub	r18, r24
    6020:	39 0b       	sbc	r19, r25
    6022:	4a 0b       	sbc	r20, r26
    6024:	5b 0b       	sbc	r21, r27
    6026:	04 c0       	rjmp	.+8      	; 0x6030 <__clzsi2+0x7e>
    6028:	16 95       	lsr	r17
    602a:	07 95       	ror	r16
    602c:	f7 94       	ror	r15
    602e:	e7 94       	ror	r14
    6030:	8a 95       	dec	r24
    6032:	d2 f7       	brpl	.-12     	; 0x6028 <__clzsi2+0x76>
    6034:	f7 01       	movw	r30, r14
    6036:	e1 5f       	subi	r30, 0xF1	; 241
    6038:	fd 4f       	sbci	r31, 0xFD	; 253
    603a:	80 81       	ld	r24, Z
    603c:	28 1b       	sub	r18, r24
    603e:	31 09       	sbc	r19, r1
    6040:	41 09       	sbc	r20, r1
    6042:	51 09       	sbc	r21, r1
    6044:	c9 01       	movw	r24, r18
    6046:	1f 91       	pop	r17
    6048:	0f 91       	pop	r16
    604a:	ff 90       	pop	r15
    604c:	ef 90       	pop	r14
    604e:	08 95       	ret

00006050 <__pack_f>:
    6050:	df 92       	push	r13
    6052:	ef 92       	push	r14
    6054:	ff 92       	push	r15
    6056:	0f 93       	push	r16
    6058:	1f 93       	push	r17
    605a:	fc 01       	movw	r30, r24
    605c:	e4 80       	ldd	r14, Z+4	; 0x04
    605e:	f5 80       	ldd	r15, Z+5	; 0x05
    6060:	06 81       	ldd	r16, Z+6	; 0x06
    6062:	17 81       	ldd	r17, Z+7	; 0x07
    6064:	d1 80       	ldd	r13, Z+1	; 0x01
    6066:	80 81       	ld	r24, Z
    6068:	82 30       	cpi	r24, 0x02	; 2
    606a:	48 f4       	brcc	.+18     	; 0x607e <__pack_f+0x2e>
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	a0 e1       	ldi	r26, 0x10	; 16
    6072:	b0 e0       	ldi	r27, 0x00	; 0
    6074:	e8 2a       	or	r14, r24
    6076:	f9 2a       	or	r15, r25
    6078:	0a 2b       	or	r16, r26
    607a:	1b 2b       	or	r17, r27
    607c:	a5 c0       	rjmp	.+330    	; 0x61c8 <__pack_f+0x178>
    607e:	84 30       	cpi	r24, 0x04	; 4
    6080:	09 f4       	brne	.+2      	; 0x6084 <__pack_f+0x34>
    6082:	9f c0       	rjmp	.+318    	; 0x61c2 <__pack_f+0x172>
    6084:	82 30       	cpi	r24, 0x02	; 2
    6086:	21 f4       	brne	.+8      	; 0x6090 <__pack_f+0x40>
    6088:	ee 24       	eor	r14, r14
    608a:	ff 24       	eor	r15, r15
    608c:	87 01       	movw	r16, r14
    608e:	05 c0       	rjmp	.+10     	; 0x609a <__pack_f+0x4a>
    6090:	e1 14       	cp	r14, r1
    6092:	f1 04       	cpc	r15, r1
    6094:	01 05       	cpc	r16, r1
    6096:	11 05       	cpc	r17, r1
    6098:	19 f4       	brne	.+6      	; 0x60a0 <__pack_f+0x50>
    609a:	e0 e0       	ldi	r30, 0x00	; 0
    609c:	f0 e0       	ldi	r31, 0x00	; 0
    609e:	96 c0       	rjmp	.+300    	; 0x61cc <__pack_f+0x17c>
    60a0:	62 81       	ldd	r22, Z+2	; 0x02
    60a2:	73 81       	ldd	r23, Z+3	; 0x03
    60a4:	9f ef       	ldi	r25, 0xFF	; 255
    60a6:	62 38       	cpi	r22, 0x82	; 130
    60a8:	79 07       	cpc	r23, r25
    60aa:	0c f0       	brlt	.+2      	; 0x60ae <__pack_f+0x5e>
    60ac:	5b c0       	rjmp	.+182    	; 0x6164 <__pack_f+0x114>
    60ae:	22 e8       	ldi	r18, 0x82	; 130
    60b0:	3f ef       	ldi	r19, 0xFF	; 255
    60b2:	26 1b       	sub	r18, r22
    60b4:	37 0b       	sbc	r19, r23
    60b6:	2a 31       	cpi	r18, 0x1A	; 26
    60b8:	31 05       	cpc	r19, r1
    60ba:	2c f0       	brlt	.+10     	; 0x60c6 <__pack_f+0x76>
    60bc:	20 e0       	ldi	r18, 0x00	; 0
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	40 e0       	ldi	r20, 0x00	; 0
    60c2:	50 e0       	ldi	r21, 0x00	; 0
    60c4:	2a c0       	rjmp	.+84     	; 0x611a <__pack_f+0xca>
    60c6:	b8 01       	movw	r22, r16
    60c8:	a7 01       	movw	r20, r14
    60ca:	02 2e       	mov	r0, r18
    60cc:	04 c0       	rjmp	.+8      	; 0x60d6 <__pack_f+0x86>
    60ce:	76 95       	lsr	r23
    60d0:	67 95       	ror	r22
    60d2:	57 95       	ror	r21
    60d4:	47 95       	ror	r20
    60d6:	0a 94       	dec	r0
    60d8:	d2 f7       	brpl	.-12     	; 0x60ce <__pack_f+0x7e>
    60da:	81 e0       	ldi	r24, 0x01	; 1
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	a0 e0       	ldi	r26, 0x00	; 0
    60e0:	b0 e0       	ldi	r27, 0x00	; 0
    60e2:	04 c0       	rjmp	.+8      	; 0x60ec <__pack_f+0x9c>
    60e4:	88 0f       	add	r24, r24
    60e6:	99 1f       	adc	r25, r25
    60e8:	aa 1f       	adc	r26, r26
    60ea:	bb 1f       	adc	r27, r27
    60ec:	2a 95       	dec	r18
    60ee:	d2 f7       	brpl	.-12     	; 0x60e4 <__pack_f+0x94>
    60f0:	01 97       	sbiw	r24, 0x01	; 1
    60f2:	a1 09       	sbc	r26, r1
    60f4:	b1 09       	sbc	r27, r1
    60f6:	8e 21       	and	r24, r14
    60f8:	9f 21       	and	r25, r15
    60fa:	a0 23       	and	r26, r16
    60fc:	b1 23       	and	r27, r17
    60fe:	00 97       	sbiw	r24, 0x00	; 0
    6100:	a1 05       	cpc	r26, r1
    6102:	b1 05       	cpc	r27, r1
    6104:	21 f0       	breq	.+8      	; 0x610e <__pack_f+0xbe>
    6106:	81 e0       	ldi	r24, 0x01	; 1
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	a0 e0       	ldi	r26, 0x00	; 0
    610c:	b0 e0       	ldi	r27, 0x00	; 0
    610e:	9a 01       	movw	r18, r20
    6110:	ab 01       	movw	r20, r22
    6112:	28 2b       	or	r18, r24
    6114:	39 2b       	or	r19, r25
    6116:	4a 2b       	or	r20, r26
    6118:	5b 2b       	or	r21, r27
    611a:	da 01       	movw	r26, r20
    611c:	c9 01       	movw	r24, r18
    611e:	8f 77       	andi	r24, 0x7F	; 127
    6120:	90 70       	andi	r25, 0x00	; 0
    6122:	a0 70       	andi	r26, 0x00	; 0
    6124:	b0 70       	andi	r27, 0x00	; 0
    6126:	80 34       	cpi	r24, 0x40	; 64
    6128:	91 05       	cpc	r25, r1
    612a:	a1 05       	cpc	r26, r1
    612c:	b1 05       	cpc	r27, r1
    612e:	39 f4       	brne	.+14     	; 0x613e <__pack_f+0xee>
    6130:	27 ff       	sbrs	r18, 7
    6132:	09 c0       	rjmp	.+18     	; 0x6146 <__pack_f+0xf6>
    6134:	20 5c       	subi	r18, 0xC0	; 192
    6136:	3f 4f       	sbci	r19, 0xFF	; 255
    6138:	4f 4f       	sbci	r20, 0xFF	; 255
    613a:	5f 4f       	sbci	r21, 0xFF	; 255
    613c:	04 c0       	rjmp	.+8      	; 0x6146 <__pack_f+0xf6>
    613e:	21 5c       	subi	r18, 0xC1	; 193
    6140:	3f 4f       	sbci	r19, 0xFF	; 255
    6142:	4f 4f       	sbci	r20, 0xFF	; 255
    6144:	5f 4f       	sbci	r21, 0xFF	; 255
    6146:	e0 e0       	ldi	r30, 0x00	; 0
    6148:	f0 e0       	ldi	r31, 0x00	; 0
    614a:	20 30       	cpi	r18, 0x00	; 0
    614c:	a0 e0       	ldi	r26, 0x00	; 0
    614e:	3a 07       	cpc	r19, r26
    6150:	a0 e0       	ldi	r26, 0x00	; 0
    6152:	4a 07       	cpc	r20, r26
    6154:	a0 e4       	ldi	r26, 0x40	; 64
    6156:	5a 07       	cpc	r21, r26
    6158:	10 f0       	brcs	.+4      	; 0x615e <__pack_f+0x10e>
    615a:	e1 e0       	ldi	r30, 0x01	; 1
    615c:	f0 e0       	ldi	r31, 0x00	; 0
    615e:	79 01       	movw	r14, r18
    6160:	8a 01       	movw	r16, r20
    6162:	27 c0       	rjmp	.+78     	; 0x61b2 <__pack_f+0x162>
    6164:	60 38       	cpi	r22, 0x80	; 128
    6166:	71 05       	cpc	r23, r1
    6168:	64 f5       	brge	.+88     	; 0x61c2 <__pack_f+0x172>
    616a:	fb 01       	movw	r30, r22
    616c:	e1 58       	subi	r30, 0x81	; 129
    616e:	ff 4f       	sbci	r31, 0xFF	; 255
    6170:	d8 01       	movw	r26, r16
    6172:	c7 01       	movw	r24, r14
    6174:	8f 77       	andi	r24, 0x7F	; 127
    6176:	90 70       	andi	r25, 0x00	; 0
    6178:	a0 70       	andi	r26, 0x00	; 0
    617a:	b0 70       	andi	r27, 0x00	; 0
    617c:	80 34       	cpi	r24, 0x40	; 64
    617e:	91 05       	cpc	r25, r1
    6180:	a1 05       	cpc	r26, r1
    6182:	b1 05       	cpc	r27, r1
    6184:	39 f4       	brne	.+14     	; 0x6194 <__pack_f+0x144>
    6186:	e7 fe       	sbrs	r14, 7
    6188:	0d c0       	rjmp	.+26     	; 0x61a4 <__pack_f+0x154>
    618a:	80 e4       	ldi	r24, 0x40	; 64
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	a0 e0       	ldi	r26, 0x00	; 0
    6190:	b0 e0       	ldi	r27, 0x00	; 0
    6192:	04 c0       	rjmp	.+8      	; 0x619c <__pack_f+0x14c>
    6194:	8f e3       	ldi	r24, 0x3F	; 63
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	a0 e0       	ldi	r26, 0x00	; 0
    619a:	b0 e0       	ldi	r27, 0x00	; 0
    619c:	e8 0e       	add	r14, r24
    619e:	f9 1e       	adc	r15, r25
    61a0:	0a 1f       	adc	r16, r26
    61a2:	1b 1f       	adc	r17, r27
    61a4:	17 ff       	sbrs	r17, 7
    61a6:	05 c0       	rjmp	.+10     	; 0x61b2 <__pack_f+0x162>
    61a8:	16 95       	lsr	r17
    61aa:	07 95       	ror	r16
    61ac:	f7 94       	ror	r15
    61ae:	e7 94       	ror	r14
    61b0:	31 96       	adiw	r30, 0x01	; 1
    61b2:	87 e0       	ldi	r24, 0x07	; 7
    61b4:	16 95       	lsr	r17
    61b6:	07 95       	ror	r16
    61b8:	f7 94       	ror	r15
    61ba:	e7 94       	ror	r14
    61bc:	8a 95       	dec	r24
    61be:	d1 f7       	brne	.-12     	; 0x61b4 <__pack_f+0x164>
    61c0:	05 c0       	rjmp	.+10     	; 0x61cc <__pack_f+0x17c>
    61c2:	ee 24       	eor	r14, r14
    61c4:	ff 24       	eor	r15, r15
    61c6:	87 01       	movw	r16, r14
    61c8:	ef ef       	ldi	r30, 0xFF	; 255
    61ca:	f0 e0       	ldi	r31, 0x00	; 0
    61cc:	6e 2f       	mov	r22, r30
    61ce:	67 95       	ror	r22
    61d0:	66 27       	eor	r22, r22
    61d2:	67 95       	ror	r22
    61d4:	90 2f       	mov	r25, r16
    61d6:	9f 77       	andi	r25, 0x7F	; 127
    61d8:	d7 94       	ror	r13
    61da:	dd 24       	eor	r13, r13
    61dc:	d7 94       	ror	r13
    61de:	8e 2f       	mov	r24, r30
    61e0:	86 95       	lsr	r24
    61e2:	49 2f       	mov	r20, r25
    61e4:	46 2b       	or	r20, r22
    61e6:	58 2f       	mov	r21, r24
    61e8:	5d 29       	or	r21, r13
    61ea:	b7 01       	movw	r22, r14
    61ec:	ca 01       	movw	r24, r20
    61ee:	1f 91       	pop	r17
    61f0:	0f 91       	pop	r16
    61f2:	ff 90       	pop	r15
    61f4:	ef 90       	pop	r14
    61f6:	df 90       	pop	r13
    61f8:	08 95       	ret

000061fa <__unpack_f>:
    61fa:	fc 01       	movw	r30, r24
    61fc:	db 01       	movw	r26, r22
    61fe:	40 81       	ld	r20, Z
    6200:	51 81       	ldd	r21, Z+1	; 0x01
    6202:	22 81       	ldd	r18, Z+2	; 0x02
    6204:	62 2f       	mov	r22, r18
    6206:	6f 77       	andi	r22, 0x7F	; 127
    6208:	70 e0       	ldi	r23, 0x00	; 0
    620a:	22 1f       	adc	r18, r18
    620c:	22 27       	eor	r18, r18
    620e:	22 1f       	adc	r18, r18
    6210:	93 81       	ldd	r25, Z+3	; 0x03
    6212:	89 2f       	mov	r24, r25
    6214:	88 0f       	add	r24, r24
    6216:	82 2b       	or	r24, r18
    6218:	28 2f       	mov	r18, r24
    621a:	30 e0       	ldi	r19, 0x00	; 0
    621c:	99 1f       	adc	r25, r25
    621e:	99 27       	eor	r25, r25
    6220:	99 1f       	adc	r25, r25
    6222:	11 96       	adiw	r26, 0x01	; 1
    6224:	9c 93       	st	X, r25
    6226:	11 97       	sbiw	r26, 0x01	; 1
    6228:	21 15       	cp	r18, r1
    622a:	31 05       	cpc	r19, r1
    622c:	a9 f5       	brne	.+106    	; 0x6298 <__unpack_f+0x9e>
    622e:	41 15       	cp	r20, r1
    6230:	51 05       	cpc	r21, r1
    6232:	61 05       	cpc	r22, r1
    6234:	71 05       	cpc	r23, r1
    6236:	11 f4       	brne	.+4      	; 0x623c <__unpack_f+0x42>
    6238:	82 e0       	ldi	r24, 0x02	; 2
    623a:	37 c0       	rjmp	.+110    	; 0x62aa <__unpack_f+0xb0>
    623c:	82 e8       	ldi	r24, 0x82	; 130
    623e:	9f ef       	ldi	r25, 0xFF	; 255
    6240:	13 96       	adiw	r26, 0x03	; 3
    6242:	9c 93       	st	X, r25
    6244:	8e 93       	st	-X, r24
    6246:	12 97       	sbiw	r26, 0x02	; 2
    6248:	9a 01       	movw	r18, r20
    624a:	ab 01       	movw	r20, r22
    624c:	67 e0       	ldi	r22, 0x07	; 7
    624e:	22 0f       	add	r18, r18
    6250:	33 1f       	adc	r19, r19
    6252:	44 1f       	adc	r20, r20
    6254:	55 1f       	adc	r21, r21
    6256:	6a 95       	dec	r22
    6258:	d1 f7       	brne	.-12     	; 0x624e <__unpack_f+0x54>
    625a:	83 e0       	ldi	r24, 0x03	; 3
    625c:	8c 93       	st	X, r24
    625e:	0d c0       	rjmp	.+26     	; 0x627a <__unpack_f+0x80>
    6260:	22 0f       	add	r18, r18
    6262:	33 1f       	adc	r19, r19
    6264:	44 1f       	adc	r20, r20
    6266:	55 1f       	adc	r21, r21
    6268:	12 96       	adiw	r26, 0x02	; 2
    626a:	8d 91       	ld	r24, X+
    626c:	9c 91       	ld	r25, X
    626e:	13 97       	sbiw	r26, 0x03	; 3
    6270:	01 97       	sbiw	r24, 0x01	; 1
    6272:	13 96       	adiw	r26, 0x03	; 3
    6274:	9c 93       	st	X, r25
    6276:	8e 93       	st	-X, r24
    6278:	12 97       	sbiw	r26, 0x02	; 2
    627a:	20 30       	cpi	r18, 0x00	; 0
    627c:	80 e0       	ldi	r24, 0x00	; 0
    627e:	38 07       	cpc	r19, r24
    6280:	80 e0       	ldi	r24, 0x00	; 0
    6282:	48 07       	cpc	r20, r24
    6284:	80 e4       	ldi	r24, 0x40	; 64
    6286:	58 07       	cpc	r21, r24
    6288:	58 f3       	brcs	.-42     	; 0x6260 <__unpack_f+0x66>
    628a:	14 96       	adiw	r26, 0x04	; 4
    628c:	2d 93       	st	X+, r18
    628e:	3d 93       	st	X+, r19
    6290:	4d 93       	st	X+, r20
    6292:	5c 93       	st	X, r21
    6294:	17 97       	sbiw	r26, 0x07	; 7
    6296:	08 95       	ret
    6298:	2f 3f       	cpi	r18, 0xFF	; 255
    629a:	31 05       	cpc	r19, r1
    629c:	79 f4       	brne	.+30     	; 0x62bc <__unpack_f+0xc2>
    629e:	41 15       	cp	r20, r1
    62a0:	51 05       	cpc	r21, r1
    62a2:	61 05       	cpc	r22, r1
    62a4:	71 05       	cpc	r23, r1
    62a6:	19 f4       	brne	.+6      	; 0x62ae <__unpack_f+0xb4>
    62a8:	84 e0       	ldi	r24, 0x04	; 4
    62aa:	8c 93       	st	X, r24
    62ac:	08 95       	ret
    62ae:	64 ff       	sbrs	r22, 4
    62b0:	03 c0       	rjmp	.+6      	; 0x62b8 <__unpack_f+0xbe>
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	8c 93       	st	X, r24
    62b6:	12 c0       	rjmp	.+36     	; 0x62dc <__unpack_f+0xe2>
    62b8:	1c 92       	st	X, r1
    62ba:	10 c0       	rjmp	.+32     	; 0x62dc <__unpack_f+0xe2>
    62bc:	2f 57       	subi	r18, 0x7F	; 127
    62be:	30 40       	sbci	r19, 0x00	; 0
    62c0:	13 96       	adiw	r26, 0x03	; 3
    62c2:	3c 93       	st	X, r19
    62c4:	2e 93       	st	-X, r18
    62c6:	12 97       	sbiw	r26, 0x02	; 2
    62c8:	83 e0       	ldi	r24, 0x03	; 3
    62ca:	8c 93       	st	X, r24
    62cc:	87 e0       	ldi	r24, 0x07	; 7
    62ce:	44 0f       	add	r20, r20
    62d0:	55 1f       	adc	r21, r21
    62d2:	66 1f       	adc	r22, r22
    62d4:	77 1f       	adc	r23, r23
    62d6:	8a 95       	dec	r24
    62d8:	d1 f7       	brne	.-12     	; 0x62ce <__unpack_f+0xd4>
    62da:	70 64       	ori	r23, 0x40	; 64
    62dc:	14 96       	adiw	r26, 0x04	; 4
    62de:	4d 93       	st	X+, r20
    62e0:	5d 93       	st	X+, r21
    62e2:	6d 93       	st	X+, r22
    62e4:	7c 93       	st	X, r23
    62e6:	17 97       	sbiw	r26, 0x07	; 7
    62e8:	08 95       	ret

000062ea <__fpcmp_parts_f>:
    62ea:	1f 93       	push	r17
    62ec:	dc 01       	movw	r26, r24
    62ee:	fb 01       	movw	r30, r22
    62f0:	9c 91       	ld	r25, X
    62f2:	92 30       	cpi	r25, 0x02	; 2
    62f4:	08 f4       	brcc	.+2      	; 0x62f8 <__fpcmp_parts_f+0xe>
    62f6:	47 c0       	rjmp	.+142    	; 0x6386 <__fpcmp_parts_f+0x9c>
    62f8:	80 81       	ld	r24, Z
    62fa:	82 30       	cpi	r24, 0x02	; 2
    62fc:	08 f4       	brcc	.+2      	; 0x6300 <__fpcmp_parts_f+0x16>
    62fe:	43 c0       	rjmp	.+134    	; 0x6386 <__fpcmp_parts_f+0x9c>
    6300:	94 30       	cpi	r25, 0x04	; 4
    6302:	51 f4       	brne	.+20     	; 0x6318 <__fpcmp_parts_f+0x2e>
    6304:	11 96       	adiw	r26, 0x01	; 1
    6306:	1c 91       	ld	r17, X
    6308:	84 30       	cpi	r24, 0x04	; 4
    630a:	99 f5       	brne	.+102    	; 0x6372 <__fpcmp_parts_f+0x88>
    630c:	81 81       	ldd	r24, Z+1	; 0x01
    630e:	68 2f       	mov	r22, r24
    6310:	70 e0       	ldi	r23, 0x00	; 0
    6312:	61 1b       	sub	r22, r17
    6314:	71 09       	sbc	r23, r1
    6316:	3f c0       	rjmp	.+126    	; 0x6396 <__fpcmp_parts_f+0xac>
    6318:	84 30       	cpi	r24, 0x04	; 4
    631a:	21 f0       	breq	.+8      	; 0x6324 <__fpcmp_parts_f+0x3a>
    631c:	92 30       	cpi	r25, 0x02	; 2
    631e:	31 f4       	brne	.+12     	; 0x632c <__fpcmp_parts_f+0x42>
    6320:	82 30       	cpi	r24, 0x02	; 2
    6322:	b9 f1       	breq	.+110    	; 0x6392 <__fpcmp_parts_f+0xa8>
    6324:	81 81       	ldd	r24, Z+1	; 0x01
    6326:	88 23       	and	r24, r24
    6328:	89 f1       	breq	.+98     	; 0x638c <__fpcmp_parts_f+0xa2>
    632a:	2d c0       	rjmp	.+90     	; 0x6386 <__fpcmp_parts_f+0x9c>
    632c:	11 96       	adiw	r26, 0x01	; 1
    632e:	1c 91       	ld	r17, X
    6330:	11 97       	sbiw	r26, 0x01	; 1
    6332:	82 30       	cpi	r24, 0x02	; 2
    6334:	f1 f0       	breq	.+60     	; 0x6372 <__fpcmp_parts_f+0x88>
    6336:	81 81       	ldd	r24, Z+1	; 0x01
    6338:	18 17       	cp	r17, r24
    633a:	d9 f4       	brne	.+54     	; 0x6372 <__fpcmp_parts_f+0x88>
    633c:	12 96       	adiw	r26, 0x02	; 2
    633e:	2d 91       	ld	r18, X+
    6340:	3c 91       	ld	r19, X
    6342:	13 97       	sbiw	r26, 0x03	; 3
    6344:	82 81       	ldd	r24, Z+2	; 0x02
    6346:	93 81       	ldd	r25, Z+3	; 0x03
    6348:	82 17       	cp	r24, r18
    634a:	93 07       	cpc	r25, r19
    634c:	94 f0       	brlt	.+36     	; 0x6372 <__fpcmp_parts_f+0x88>
    634e:	28 17       	cp	r18, r24
    6350:	39 07       	cpc	r19, r25
    6352:	bc f0       	brlt	.+46     	; 0x6382 <__fpcmp_parts_f+0x98>
    6354:	14 96       	adiw	r26, 0x04	; 4
    6356:	8d 91       	ld	r24, X+
    6358:	9d 91       	ld	r25, X+
    635a:	0d 90       	ld	r0, X+
    635c:	bc 91       	ld	r27, X
    635e:	a0 2d       	mov	r26, r0
    6360:	24 81       	ldd	r18, Z+4	; 0x04
    6362:	35 81       	ldd	r19, Z+5	; 0x05
    6364:	46 81       	ldd	r20, Z+6	; 0x06
    6366:	57 81       	ldd	r21, Z+7	; 0x07
    6368:	28 17       	cp	r18, r24
    636a:	39 07       	cpc	r19, r25
    636c:	4a 07       	cpc	r20, r26
    636e:	5b 07       	cpc	r21, r27
    6370:	18 f4       	brcc	.+6      	; 0x6378 <__fpcmp_parts_f+0x8e>
    6372:	11 23       	and	r17, r17
    6374:	41 f0       	breq	.+16     	; 0x6386 <__fpcmp_parts_f+0x9c>
    6376:	0a c0       	rjmp	.+20     	; 0x638c <__fpcmp_parts_f+0xa2>
    6378:	82 17       	cp	r24, r18
    637a:	93 07       	cpc	r25, r19
    637c:	a4 07       	cpc	r26, r20
    637e:	b5 07       	cpc	r27, r21
    6380:	40 f4       	brcc	.+16     	; 0x6392 <__fpcmp_parts_f+0xa8>
    6382:	11 23       	and	r17, r17
    6384:	19 f0       	breq	.+6      	; 0x638c <__fpcmp_parts_f+0xa2>
    6386:	61 e0       	ldi	r22, 0x01	; 1
    6388:	70 e0       	ldi	r23, 0x00	; 0
    638a:	05 c0       	rjmp	.+10     	; 0x6396 <__fpcmp_parts_f+0xac>
    638c:	6f ef       	ldi	r22, 0xFF	; 255
    638e:	7f ef       	ldi	r23, 0xFF	; 255
    6390:	02 c0       	rjmp	.+4      	; 0x6396 <__fpcmp_parts_f+0xac>
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	70 e0       	ldi	r23, 0x00	; 0
    6396:	cb 01       	movw	r24, r22
    6398:	1f 91       	pop	r17
    639a:	08 95       	ret

0000639c <malloc>:
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	bc 01       	movw	r22, r24
    63a2:	82 30       	cpi	r24, 0x02	; 2
    63a4:	91 05       	cpc	r25, r1
    63a6:	10 f4       	brcc	.+4      	; 0x63ac <malloc+0x10>
    63a8:	62 e0       	ldi	r22, 0x02	; 2
    63aa:	70 e0       	ldi	r23, 0x00	; 0
    63ac:	a0 91 38 05 	lds	r26, 0x0538
    63b0:	b0 91 39 05 	lds	r27, 0x0539
    63b4:	ed 01       	movw	r28, r26
    63b6:	e0 e0       	ldi	r30, 0x00	; 0
    63b8:	f0 e0       	ldi	r31, 0x00	; 0
    63ba:	40 e0       	ldi	r20, 0x00	; 0
    63bc:	50 e0       	ldi	r21, 0x00	; 0
    63be:	21 c0       	rjmp	.+66     	; 0x6402 <malloc+0x66>
    63c0:	88 81       	ld	r24, Y
    63c2:	99 81       	ldd	r25, Y+1	; 0x01
    63c4:	86 17       	cp	r24, r22
    63c6:	97 07       	cpc	r25, r23
    63c8:	69 f4       	brne	.+26     	; 0x63e4 <malloc+0x48>
    63ca:	8a 81       	ldd	r24, Y+2	; 0x02
    63cc:	9b 81       	ldd	r25, Y+3	; 0x03
    63ce:	30 97       	sbiw	r30, 0x00	; 0
    63d0:	19 f0       	breq	.+6      	; 0x63d8 <malloc+0x3c>
    63d2:	93 83       	std	Z+3, r25	; 0x03
    63d4:	82 83       	std	Z+2, r24	; 0x02
    63d6:	04 c0       	rjmp	.+8      	; 0x63e0 <malloc+0x44>
    63d8:	90 93 39 05 	sts	0x0539, r25
    63dc:	80 93 38 05 	sts	0x0538, r24
    63e0:	fe 01       	movw	r30, r28
    63e2:	34 c0       	rjmp	.+104    	; 0x644c <malloc+0xb0>
    63e4:	68 17       	cp	r22, r24
    63e6:	79 07       	cpc	r23, r25
    63e8:	38 f4       	brcc	.+14     	; 0x63f8 <malloc+0x5c>
    63ea:	41 15       	cp	r20, r1
    63ec:	51 05       	cpc	r21, r1
    63ee:	19 f0       	breq	.+6      	; 0x63f6 <malloc+0x5a>
    63f0:	84 17       	cp	r24, r20
    63f2:	95 07       	cpc	r25, r21
    63f4:	08 f4       	brcc	.+2      	; 0x63f8 <malloc+0x5c>
    63f6:	ac 01       	movw	r20, r24
    63f8:	fe 01       	movw	r30, r28
    63fa:	8a 81       	ldd	r24, Y+2	; 0x02
    63fc:	9b 81       	ldd	r25, Y+3	; 0x03
    63fe:	9c 01       	movw	r18, r24
    6400:	e9 01       	movw	r28, r18
    6402:	20 97       	sbiw	r28, 0x00	; 0
    6404:	e9 f6       	brne	.-70     	; 0x63c0 <malloc+0x24>
    6406:	41 15       	cp	r20, r1
    6408:	51 05       	cpc	r21, r1
    640a:	a9 f1       	breq	.+106    	; 0x6476 <malloc+0xda>
    640c:	ca 01       	movw	r24, r20
    640e:	86 1b       	sub	r24, r22
    6410:	97 0b       	sbc	r25, r23
    6412:	04 97       	sbiw	r24, 0x04	; 4
    6414:	08 f4       	brcc	.+2      	; 0x6418 <malloc+0x7c>
    6416:	ba 01       	movw	r22, r20
    6418:	e0 e0       	ldi	r30, 0x00	; 0
    641a:	f0 e0       	ldi	r31, 0x00	; 0
    641c:	2a c0       	rjmp	.+84     	; 0x6472 <malloc+0xd6>
    641e:	8d 91       	ld	r24, X+
    6420:	9c 91       	ld	r25, X
    6422:	11 97       	sbiw	r26, 0x01	; 1
    6424:	84 17       	cp	r24, r20
    6426:	95 07       	cpc	r25, r21
    6428:	f9 f4       	brne	.+62     	; 0x6468 <malloc+0xcc>
    642a:	64 17       	cp	r22, r20
    642c:	75 07       	cpc	r23, r21
    642e:	81 f4       	brne	.+32     	; 0x6450 <malloc+0xb4>
    6430:	12 96       	adiw	r26, 0x02	; 2
    6432:	8d 91       	ld	r24, X+
    6434:	9c 91       	ld	r25, X
    6436:	13 97       	sbiw	r26, 0x03	; 3
    6438:	30 97       	sbiw	r30, 0x00	; 0
    643a:	19 f0       	breq	.+6      	; 0x6442 <malloc+0xa6>
    643c:	93 83       	std	Z+3, r25	; 0x03
    643e:	82 83       	std	Z+2, r24	; 0x02
    6440:	04 c0       	rjmp	.+8      	; 0x644a <malloc+0xae>
    6442:	90 93 39 05 	sts	0x0539, r25
    6446:	80 93 38 05 	sts	0x0538, r24
    644a:	fd 01       	movw	r30, r26
    644c:	32 96       	adiw	r30, 0x02	; 2
    644e:	4f c0       	rjmp	.+158    	; 0x64ee <malloc+0x152>
    6450:	ca 01       	movw	r24, r20
    6452:	86 1b       	sub	r24, r22
    6454:	97 0b       	sbc	r25, r23
    6456:	fd 01       	movw	r30, r26
    6458:	e8 0f       	add	r30, r24
    645a:	f9 1f       	adc	r31, r25
    645c:	61 93       	st	Z+, r22
    645e:	71 93       	st	Z+, r23
    6460:	02 97       	sbiw	r24, 0x02	; 2
    6462:	8d 93       	st	X+, r24
    6464:	9c 93       	st	X, r25
    6466:	43 c0       	rjmp	.+134    	; 0x64ee <malloc+0x152>
    6468:	fd 01       	movw	r30, r26
    646a:	82 81       	ldd	r24, Z+2	; 0x02
    646c:	93 81       	ldd	r25, Z+3	; 0x03
    646e:	9c 01       	movw	r18, r24
    6470:	d9 01       	movw	r26, r18
    6472:	10 97       	sbiw	r26, 0x00	; 0
    6474:	a1 f6       	brne	.-88     	; 0x641e <malloc+0x82>
    6476:	80 91 36 05 	lds	r24, 0x0536
    647a:	90 91 37 05 	lds	r25, 0x0537
    647e:	89 2b       	or	r24, r25
    6480:	41 f4       	brne	.+16     	; 0x6492 <malloc+0xf6>
    6482:	80 91 11 03 	lds	r24, 0x0311
    6486:	90 91 12 03 	lds	r25, 0x0312
    648a:	90 93 37 05 	sts	0x0537, r25
    648e:	80 93 36 05 	sts	0x0536, r24
    6492:	40 91 13 03 	lds	r20, 0x0313
    6496:	50 91 14 03 	lds	r21, 0x0314
    649a:	41 15       	cp	r20, r1
    649c:	51 05       	cpc	r21, r1
    649e:	41 f4       	brne	.+16     	; 0x64b0 <malloc+0x114>
    64a0:	4d b7       	in	r20, 0x3d	; 61
    64a2:	5e b7       	in	r21, 0x3e	; 62
    64a4:	80 91 0f 03 	lds	r24, 0x030F
    64a8:	90 91 10 03 	lds	r25, 0x0310
    64ac:	48 1b       	sub	r20, r24
    64ae:	59 0b       	sbc	r21, r25
    64b0:	20 91 36 05 	lds	r18, 0x0536
    64b4:	30 91 37 05 	lds	r19, 0x0537
    64b8:	24 17       	cp	r18, r20
    64ba:	35 07       	cpc	r19, r21
    64bc:	b0 f4       	brcc	.+44     	; 0x64ea <malloc+0x14e>
    64be:	ca 01       	movw	r24, r20
    64c0:	82 1b       	sub	r24, r18
    64c2:	93 0b       	sbc	r25, r19
    64c4:	86 17       	cp	r24, r22
    64c6:	97 07       	cpc	r25, r23
    64c8:	80 f0       	brcs	.+32     	; 0x64ea <malloc+0x14e>
    64ca:	ab 01       	movw	r20, r22
    64cc:	4e 5f       	subi	r20, 0xFE	; 254
    64ce:	5f 4f       	sbci	r21, 0xFF	; 255
    64d0:	84 17       	cp	r24, r20
    64d2:	95 07       	cpc	r25, r21
    64d4:	50 f0       	brcs	.+20     	; 0x64ea <malloc+0x14e>
    64d6:	42 0f       	add	r20, r18
    64d8:	53 1f       	adc	r21, r19
    64da:	50 93 37 05 	sts	0x0537, r21
    64de:	40 93 36 05 	sts	0x0536, r20
    64e2:	f9 01       	movw	r30, r18
    64e4:	61 93       	st	Z+, r22
    64e6:	71 93       	st	Z+, r23
    64e8:	02 c0       	rjmp	.+4      	; 0x64ee <malloc+0x152>
    64ea:	e0 e0       	ldi	r30, 0x00	; 0
    64ec:	f0 e0       	ldi	r31, 0x00	; 0
    64ee:	cf 01       	movw	r24, r30
    64f0:	df 91       	pop	r29
    64f2:	cf 91       	pop	r28
    64f4:	08 95       	ret

000064f6 <free>:
    64f6:	cf 93       	push	r28
    64f8:	df 93       	push	r29
    64fa:	00 97       	sbiw	r24, 0x00	; 0
    64fc:	09 f4       	brne	.+2      	; 0x6500 <free+0xa>
    64fe:	50 c0       	rjmp	.+160    	; 0x65a0 <free+0xaa>
    6500:	ec 01       	movw	r28, r24
    6502:	22 97       	sbiw	r28, 0x02	; 2
    6504:	1b 82       	std	Y+3, r1	; 0x03
    6506:	1a 82       	std	Y+2, r1	; 0x02
    6508:	a0 91 38 05 	lds	r26, 0x0538
    650c:	b0 91 39 05 	lds	r27, 0x0539
    6510:	10 97       	sbiw	r26, 0x00	; 0
    6512:	09 f1       	breq	.+66     	; 0x6556 <free+0x60>
    6514:	40 e0       	ldi	r20, 0x00	; 0
    6516:	50 e0       	ldi	r21, 0x00	; 0
    6518:	ac 17       	cp	r26, r28
    651a:	bd 07       	cpc	r27, r29
    651c:	08 f1       	brcs	.+66     	; 0x6560 <free+0x6a>
    651e:	bb 83       	std	Y+3, r27	; 0x03
    6520:	aa 83       	std	Y+2, r26	; 0x02
    6522:	fe 01       	movw	r30, r28
    6524:	21 91       	ld	r18, Z+
    6526:	31 91       	ld	r19, Z+
    6528:	e2 0f       	add	r30, r18
    652a:	f3 1f       	adc	r31, r19
    652c:	ae 17       	cp	r26, r30
    652e:	bf 07       	cpc	r27, r31
    6530:	79 f4       	brne	.+30     	; 0x6550 <free+0x5a>
    6532:	8d 91       	ld	r24, X+
    6534:	9c 91       	ld	r25, X
    6536:	11 97       	sbiw	r26, 0x01	; 1
    6538:	28 0f       	add	r18, r24
    653a:	39 1f       	adc	r19, r25
    653c:	2e 5f       	subi	r18, 0xFE	; 254
    653e:	3f 4f       	sbci	r19, 0xFF	; 255
    6540:	39 83       	std	Y+1, r19	; 0x01
    6542:	28 83       	st	Y, r18
    6544:	12 96       	adiw	r26, 0x02	; 2
    6546:	8d 91       	ld	r24, X+
    6548:	9c 91       	ld	r25, X
    654a:	13 97       	sbiw	r26, 0x03	; 3
    654c:	9b 83       	std	Y+3, r25	; 0x03
    654e:	8a 83       	std	Y+2, r24	; 0x02
    6550:	41 15       	cp	r20, r1
    6552:	51 05       	cpc	r21, r1
    6554:	71 f4       	brne	.+28     	; 0x6572 <free+0x7c>
    6556:	d0 93 39 05 	sts	0x0539, r29
    655a:	c0 93 38 05 	sts	0x0538, r28
    655e:	20 c0       	rjmp	.+64     	; 0x65a0 <free+0xaa>
    6560:	12 96       	adiw	r26, 0x02	; 2
    6562:	8d 91       	ld	r24, X+
    6564:	9c 91       	ld	r25, X
    6566:	13 97       	sbiw	r26, 0x03	; 3
    6568:	ad 01       	movw	r20, r26
    656a:	00 97       	sbiw	r24, 0x00	; 0
    656c:	11 f0       	breq	.+4      	; 0x6572 <free+0x7c>
    656e:	dc 01       	movw	r26, r24
    6570:	d3 cf       	rjmp	.-90     	; 0x6518 <free+0x22>
    6572:	fa 01       	movw	r30, r20
    6574:	d3 83       	std	Z+3, r29	; 0x03
    6576:	c2 83       	std	Z+2, r28	; 0x02
    6578:	21 91       	ld	r18, Z+
    657a:	31 91       	ld	r19, Z+
    657c:	e2 0f       	add	r30, r18
    657e:	f3 1f       	adc	r31, r19
    6580:	ce 17       	cp	r28, r30
    6582:	df 07       	cpc	r29, r31
    6584:	69 f4       	brne	.+26     	; 0x65a0 <free+0xaa>
    6586:	88 81       	ld	r24, Y
    6588:	99 81       	ldd	r25, Y+1	; 0x01
    658a:	28 0f       	add	r18, r24
    658c:	39 1f       	adc	r19, r25
    658e:	2e 5f       	subi	r18, 0xFE	; 254
    6590:	3f 4f       	sbci	r19, 0xFF	; 255
    6592:	fa 01       	movw	r30, r20
    6594:	31 83       	std	Z+1, r19	; 0x01
    6596:	20 83       	st	Z, r18
    6598:	8a 81       	ldd	r24, Y+2	; 0x02
    659a:	9b 81       	ldd	r25, Y+3	; 0x03
    659c:	93 83       	std	Z+3, r25	; 0x03
    659e:	82 83       	std	Z+2, r24	; 0x02
    65a0:	df 91       	pop	r29
    65a2:	cf 91       	pop	r28
    65a4:	08 95       	ret

000065a6 <atoi>:
    65a6:	fc 01       	movw	r30, r24
    65a8:	88 27       	eor	r24, r24
    65aa:	99 27       	eor	r25, r25
    65ac:	e8 94       	clt
    65ae:	21 91       	ld	r18, Z+
    65b0:	20 32       	cpi	r18, 0x20	; 32
    65b2:	e9 f3       	breq	.-6      	; 0x65ae <atoi+0x8>
    65b4:	29 30       	cpi	r18, 0x09	; 9
    65b6:	10 f0       	brcs	.+4      	; 0x65bc <atoi+0x16>
    65b8:	2e 30       	cpi	r18, 0x0E	; 14
    65ba:	c8 f3       	brcs	.-14     	; 0x65ae <atoi+0x8>
    65bc:	2b 32       	cpi	r18, 0x2B	; 43
    65be:	41 f0       	breq	.+16     	; 0x65d0 <atoi+0x2a>
    65c0:	2d 32       	cpi	r18, 0x2D	; 45
    65c2:	39 f4       	brne	.+14     	; 0x65d2 <atoi+0x2c>
    65c4:	68 94       	set
    65c6:	04 c0       	rjmp	.+8      	; 0x65d0 <atoi+0x2a>
    65c8:	0e 94 38 33 	call	0x6670	; 0x6670 <__mulhi_const_10>
    65cc:	82 0f       	add	r24, r18
    65ce:	91 1d       	adc	r25, r1
    65d0:	21 91       	ld	r18, Z+
    65d2:	20 53       	subi	r18, 0x30	; 48
    65d4:	2a 30       	cpi	r18, 0x0A	; 10
    65d6:	c0 f3       	brcs	.-16     	; 0x65c8 <atoi+0x22>
    65d8:	1e f4       	brtc	.+6      	; 0x65e0 <atoi+0x3a>
    65da:	90 95       	com	r25
    65dc:	81 95       	neg	r24
    65de:	9f 4f       	sbci	r25, 0xFF	; 255
    65e0:	08 95       	ret

000065e2 <strtok>:
    65e2:	4e e2       	ldi	r20, 0x2E	; 46
    65e4:	53 e0       	ldi	r21, 0x03	; 3
    65e6:	0e 94 06 33 	call	0x660c	; 0x660c <strtok_r>
    65ea:	08 95       	ret

000065ec <strcpy>:
    65ec:	fb 01       	movw	r30, r22
    65ee:	dc 01       	movw	r26, r24
    65f0:	01 90       	ld	r0, Z+
    65f2:	0d 92       	st	X+, r0
    65f4:	00 20       	and	r0, r0
    65f6:	e1 f7       	brne	.-8      	; 0x65f0 <strcpy+0x4>
    65f8:	08 95       	ret

000065fa <strlen>:
    65fa:	fc 01       	movw	r30, r24
    65fc:	01 90       	ld	r0, Z+
    65fe:	00 20       	and	r0, r0
    6600:	e9 f7       	brne	.-6      	; 0x65fc <strlen+0x2>
    6602:	80 95       	com	r24
    6604:	90 95       	com	r25
    6606:	8e 0f       	add	r24, r30
    6608:	9f 1f       	adc	r25, r31
    660a:	08 95       	ret

0000660c <strtok_r>:
    660c:	00 97       	sbiw	r24, 0x00	; 0
    660e:	31 f4       	brne	.+12     	; 0x661c <strtok_r+0x10>
    6610:	da 01       	movw	r26, r20
    6612:	8d 91       	ld	r24, X+
    6614:	9c 91       	ld	r25, X
    6616:	00 97       	sbiw	r24, 0x00	; 0
    6618:	09 f4       	brne	.+2      	; 0x661c <strtok_r+0x10>
    661a:	0e c0       	rjmp	.+28     	; 0x6638 <strtok_r+0x2c>
    661c:	dc 01       	movw	r26, r24
    661e:	fb 01       	movw	r30, r22
    6620:	3d 91       	ld	r19, X+
    6622:	21 91       	ld	r18, Z+
    6624:	22 23       	and	r18, r18
    6626:	19 f0       	breq	.+6      	; 0x662e <strtok_r+0x22>
    6628:	32 17       	cp	r19, r18
    662a:	c9 f3       	breq	.-14     	; 0x661e <strtok_r+0x12>
    662c:	fa cf       	rjmp	.-12     	; 0x6622 <strtok_r+0x16>
    662e:	33 23       	and	r19, r19
    6630:	31 f4       	brne	.+12     	; 0x663e <strtok_r+0x32>
    6632:	da 01       	movw	r26, r20
    6634:	1d 92       	st	X+, r1
    6636:	1c 92       	st	X, r1
    6638:	88 27       	eor	r24, r24
    663a:	99 27       	eor	r25, r25
    663c:	08 95       	ret
    663e:	11 97       	sbiw	r26, 0x01	; 1
    6640:	af 93       	push	r26
    6642:	bf 93       	push	r27
    6644:	fb 01       	movw	r30, r22
    6646:	3d 91       	ld	r19, X+
    6648:	21 91       	ld	r18, Z+
    664a:	32 17       	cp	r19, r18
    664c:	71 f4       	brne	.+28     	; 0x666a <strtok_r+0x5e>
    664e:	33 23       	and	r19, r19
    6650:	21 f4       	brne	.+8      	; 0x665a <strtok_r+0x4e>
    6652:	88 27       	eor	r24, r24
    6654:	99 27       	eor	r25, r25
    6656:	11 97       	sbiw	r26, 0x01	; 1
    6658:	02 c0       	rjmp	.+4      	; 0x665e <strtok_r+0x52>
    665a:	1e 92       	st	-X, r1
    665c:	11 96       	adiw	r26, 0x01	; 1
    665e:	fa 01       	movw	r30, r20
    6660:	a1 93       	st	Z+, r26
    6662:	b0 83       	st	Z, r27
    6664:	9f 91       	pop	r25
    6666:	8f 91       	pop	r24
    6668:	08 95       	ret
    666a:	22 23       	and	r18, r18
    666c:	69 f7       	brne	.-38     	; 0x6648 <strtok_r+0x3c>
    666e:	ea cf       	rjmp	.-44     	; 0x6644 <strtok_r+0x38>

00006670 <__mulhi_const_10>:
    6670:	7a e0       	ldi	r23, 0x0A	; 10
    6672:	97 9f       	mul	r25, r23
    6674:	90 2d       	mov	r25, r0
    6676:	87 9f       	mul	r24, r23
    6678:	80 2d       	mov	r24, r0
    667a:	91 0d       	add	r25, r1
    667c:	11 24       	eor	r1, r1
    667e:	08 95       	ret

00006680 <__udivmodhi4>:
    6680:	aa 1b       	sub	r26, r26
    6682:	bb 1b       	sub	r27, r27
    6684:	51 e1       	ldi	r21, 0x11	; 17
    6686:	07 c0       	rjmp	.+14     	; 0x6696 <__udivmodhi4_ep>

00006688 <__udivmodhi4_loop>:
    6688:	aa 1f       	adc	r26, r26
    668a:	bb 1f       	adc	r27, r27
    668c:	a6 17       	cp	r26, r22
    668e:	b7 07       	cpc	r27, r23
    6690:	10 f0       	brcs	.+4      	; 0x6696 <__udivmodhi4_ep>
    6692:	a6 1b       	sub	r26, r22
    6694:	b7 0b       	sbc	r27, r23

00006696 <__udivmodhi4_ep>:
    6696:	88 1f       	adc	r24, r24
    6698:	99 1f       	adc	r25, r25
    669a:	5a 95       	dec	r21
    669c:	a9 f7       	brne	.-22     	; 0x6688 <__udivmodhi4_loop>
    669e:	80 95       	com	r24
    66a0:	90 95       	com	r25
    66a2:	bc 01       	movw	r22, r24
    66a4:	cd 01       	movw	r24, r26
    66a6:	08 95       	ret

000066a8 <__divmodhi4>:
    66a8:	97 fb       	bst	r25, 7
    66aa:	09 2e       	mov	r0, r25
    66ac:	07 26       	eor	r0, r23
    66ae:	0a d0       	rcall	.+20     	; 0x66c4 <__divmodhi4_neg1>
    66b0:	77 fd       	sbrc	r23, 7
    66b2:	04 d0       	rcall	.+8      	; 0x66bc <__divmodhi4_neg2>
    66b4:	e5 df       	rcall	.-54     	; 0x6680 <__udivmodhi4>
    66b6:	06 d0       	rcall	.+12     	; 0x66c4 <__divmodhi4_neg1>
    66b8:	00 20       	and	r0, r0
    66ba:	1a f4       	brpl	.+6      	; 0x66c2 <__divmodhi4_exit>

000066bc <__divmodhi4_neg2>:
    66bc:	70 95       	com	r23
    66be:	61 95       	neg	r22
    66c0:	7f 4f       	sbci	r23, 0xFF	; 255

000066c2 <__divmodhi4_exit>:
    66c2:	08 95       	ret

000066c4 <__divmodhi4_neg1>:
    66c4:	f6 f7       	brtc	.-4      	; 0x66c2 <__divmodhi4_exit>
    66c6:	90 95       	com	r25
    66c8:	81 95       	neg	r24
    66ca:	9f 4f       	sbci	r25, 0xFF	; 255
    66cc:	08 95       	ret

000066ce <__prologue_saves__>:
    66ce:	2f 92       	push	r2
    66d0:	3f 92       	push	r3
    66d2:	4f 92       	push	r4
    66d4:	5f 92       	push	r5
    66d6:	6f 92       	push	r6
    66d8:	7f 92       	push	r7
    66da:	8f 92       	push	r8
    66dc:	9f 92       	push	r9
    66de:	af 92       	push	r10
    66e0:	bf 92       	push	r11
    66e2:	cf 92       	push	r12
    66e4:	df 92       	push	r13
    66e6:	ef 92       	push	r14
    66e8:	ff 92       	push	r15
    66ea:	0f 93       	push	r16
    66ec:	1f 93       	push	r17
    66ee:	cf 93       	push	r28
    66f0:	df 93       	push	r29
    66f2:	cd b7       	in	r28, 0x3d	; 61
    66f4:	de b7       	in	r29, 0x3e	; 62
    66f6:	ca 1b       	sub	r28, r26
    66f8:	db 0b       	sbc	r29, r27
    66fa:	0f b6       	in	r0, 0x3f	; 63
    66fc:	f8 94       	cli
    66fe:	de bf       	out	0x3e, r29	; 62
    6700:	0f be       	out	0x3f, r0	; 63
    6702:	cd bf       	out	0x3d, r28	; 61
    6704:	19 94       	eijmp

00006706 <__epilogue_restores__>:
    6706:	2a 88       	ldd	r2, Y+18	; 0x12
    6708:	39 88       	ldd	r3, Y+17	; 0x11
    670a:	48 88       	ldd	r4, Y+16	; 0x10
    670c:	5f 84       	ldd	r5, Y+15	; 0x0f
    670e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6710:	7d 84       	ldd	r7, Y+13	; 0x0d
    6712:	8c 84       	ldd	r8, Y+12	; 0x0c
    6714:	9b 84       	ldd	r9, Y+11	; 0x0b
    6716:	aa 84       	ldd	r10, Y+10	; 0x0a
    6718:	b9 84       	ldd	r11, Y+9	; 0x09
    671a:	c8 84       	ldd	r12, Y+8	; 0x08
    671c:	df 80       	ldd	r13, Y+7	; 0x07
    671e:	ee 80       	ldd	r14, Y+6	; 0x06
    6720:	fd 80       	ldd	r15, Y+5	; 0x05
    6722:	0c 81       	ldd	r16, Y+4	; 0x04
    6724:	1b 81       	ldd	r17, Y+3	; 0x03
    6726:	aa 81       	ldd	r26, Y+2	; 0x02
    6728:	b9 81       	ldd	r27, Y+1	; 0x01
    672a:	ce 0f       	add	r28, r30
    672c:	d1 1d       	adc	r29, r1
    672e:	0f b6       	in	r0, 0x3f	; 63
    6730:	f8 94       	cli
    6732:	de bf       	out	0x3e, r29	; 62
    6734:	0f be       	out	0x3f, r0	; 63
    6736:	cd bf       	out	0x3d, r28	; 61
    6738:	ed 01       	movw	r28, r26
    673a:	08 95       	ret

0000673c <_exit>:
    673c:	f8 94       	cli

0000673e <__stop_program>:
    673e:	ff cf       	rjmp	.-2      	; 0x673e <__stop_program>
