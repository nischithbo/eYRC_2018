
White_Line_Following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800200  000081a8  0000823c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000081a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047e  00800316  00800316  00008352  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00008352  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000604  00000000  00000000  00008372  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000215c  00000000  00000000  00008976  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027d  00000000  00000000  0000aad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003251  00000000  00000000  0000ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000dfa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005aa  00000000  00000000  0000e440  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_5>
      18:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ea       	ldi	r30, 0xA8	; 168
      fc:	f1 e8       	ldi	r31, 0x81	; 129
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 31       	cpi	r26, 0x16	; 22
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	17 e0       	ldi	r17, 0x07	; 7
     110:	a6 e1       	ldi	r26, 0x16	; 22
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 39       	cpi	r26, 0x94	; 148
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 93 34 	call	0x6926	; 0x6926 <main>
     122:	0c 94 d2 40 	jmp	0x81a4	; 0x81a4 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 35 03 	sts	0x0335, r25
    12ec:	80 93 34 03 	sts	0x0334, r24
		lcd_wr_char(million);
    12f0:	80 91 34 03 	lds	r24, 0x0334
    12f4:	90 91 35 03 	lds	r25, 0x0335
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 37 03 	sts	0x0337, r25
    1324:	80 93 36 03 	sts	0x0336, r24
		thousand = temp%10 + 48;
    1328:	80 91 36 03 	lds	r24, 0x0336
    132c:	90 91 37 03 	lds	r25, 0x0337
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 8f 07 	sts	0x078F, r25
    1340:	80 93 8e 07 	sts	0x078E, r24
		lcd_wr_char(thousand);
    1344:	80 91 8e 07 	lds	r24, 0x078E
    1348:	90 91 8f 07 	lds	r25, 0x078F
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 37 03 	sts	0x0337, r25
    1378:	80 93 36 03 	sts	0x0336, r24
		hundred = temp%10 + 48;
    137c:	80 91 36 03 	lds	r24, 0x0336
    1380:	90 91 37 03 	lds	r25, 0x0337
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 a3 03 	sts	0x03A3, r25
    1394:	80 93 a2 03 	sts	0x03A2, r24
		lcd_wr_char(hundred);
    1398:	80 91 a2 03 	lds	r24, 0x03A2
    139c:	90 91 a3 03 	lds	r25, 0x03A3
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 37 03 	sts	0x0337, r25
    13cc:	80 93 36 03 	sts	0x0336, r24
		tens = temp%10 + 48;
    13d0:	80 91 36 03 	lds	r24, 0x0336
    13d4:	90 91 37 03 	lds	r25, 0x0337
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 3c 03 	sts	0x033C, r25
    13e8:	80 93 3b 03 	sts	0x033B, r24
		lcd_wr_char(tens);
    13ec:	80 91 3b 03 	lds	r24, 0x033B
    13f0:	90 91 3c 03 	lds	r25, 0x033C
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 8d 07 	sts	0x078D, r25
    1420:	80 93 8c 07 	sts	0x078C, r24
		lcd_wr_char(unit);
    1424:	80 91 8c 07 	lds	r24, 0x078C
    1428:	90 91 8d 07 	lds	r25, 0x078D
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <servo1_pin_config>:
unsigned int Degrees; //to accept angle in degrees for turning
unsigned char data; //to store received data from UDR2
char serial_ip[100];
int z=0;
void servo1_pin_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    145a:	a4 e2       	ldi	r26, 0x24	; 36
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e2       	ldi	r30, 0x24	; 36
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 62       	ori	r24, 0x20	; 32
    1466:	8c 93       	st	X, r24
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1468:	a5 e2       	ldi	r26, 0x25	; 37
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e2       	ldi	r30, 0x25	; 37
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1484:	a4 e2       	ldi	r26, 0x24	; 36
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e4 e2       	ldi	r30, 0x24	; 36
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 64       	ori	r24, 0x40	; 64
    1490:	8c 93       	st	X, r24
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1492:	a5 e2       	ldi	r26, 0x25	; 37
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e2       	ldi	r30, 0x25	; 37
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 64       	ori	r24, 0x40	; 64
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    14ae:	a7 e2       	ldi	r26, 0x27	; 39
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e2       	ldi	r30, 0x27	; 39
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	88 60       	ori	r24, 0x08	; 8
    14ba:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    14bc:	a8 e2       	ldi	r26, 0x28	; 40
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e2       	ldi	r30, 0x28	; 40
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	87 7f       	andi	r24, 0xF7	; 247
    14c8:	8c 93       	st	X, r24
}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <interrupt_switch_config>:

//Function to initialize ports
void interrupt_switch_config (void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
    14d8:	ad e2       	ldi	r26, 0x2D	; 45
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ed e2       	ldi	r30, 0x2D	; 45
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 77       	andi	r24, 0x7F	; 127
    14e4:	8c 93       	st	X, r24
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
    14e6:	ae e2       	ldi	r26, 0x2E	; 46
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ee e2       	ldi	r30, 0x2E	; 46
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 68       	ori	r24, 0x80	; 128
    14f2:	8c 93       	st	X, r24
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <buzzer_on>:


void buzzer_on (void)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1504:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1506:	e6 e2       	ldi	r30, 0x26	; 38
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1514:	e8 e2       	ldi	r30, 0x28	; 40
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	80 83       	st	Z, r24
}
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <buzzer_off>:


void buzzer_off (void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	unsigned char port_restore = 0;
    152e:	19 82       	std	Y+1, r1	; 0x01
	port_restore = PINC;
    1530:	e6 e2       	ldi	r30, 0x26	; 38
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	89 83       	std	Y+1, r24	; 0x01
	port_restore = port_restore & 0xF7;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	87 7f       	andi	r24, 0xF7	; 247
    153c:	89 83       	std	Y+1, r24	; 0x01
	PORTC = port_restore;
    153e:	e8 e2       	ldi	r30, 0x28	; 40
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	80 83       	st	Z, r24
}
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
    1556:	e1 ed       	ldi	r30, 0xD1	; 209
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    155c:	e0 ed       	ldi	r30, 0xD0	; 208
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	10 82       	st	Z, r1
 UCSR2C = 0x06;
    1562:	e2 ed       	ldi	r30, 0xD2	; 210
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	86 e0       	ldi	r24, 0x06	; 6
    1568:	80 83       	st	Z, r24
 UBRR2L = 0x5F; //set baud rate lo
    156a:	e4 ed       	ldi	r30, 0xD4	; 212
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8f e5       	ldi	r24, 0x5F	; 95
    1570:	80 83       	st	Z, r24
 UBRR2H = 0x00; //set baud rate hi
    1572:	e5 ed       	ldi	r30, 0xD5	; 213
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	10 82       	st	Z, r1
 UCSR2B = 0x98;
    1578:	e1 ed       	ldi	r30, 0xD1	; 209
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	88 e9       	ldi	r24, 0x98	; 152
    157e:	80 83       	st	Z, r24
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	00 90 5b 00 	lds	r0, 0x005B
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable
    15a8:	e6 ed       	ldi	r30, 0xD6	; 214
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 93 3d 03 	sts	0x033D, r24

	UDR2 = data; 				//echo data back to PC
    15b2:	e6 ed       	ldi	r30, 0xD6	; 214
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 91 3d 03 	lds	r24, 0x033D
    15ba:	80 83       	st	Z, r24

	if(data)
    15bc:	80 91 3d 03 	lds	r24, 0x033D
    15c0:	88 23       	and	r24, r24
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <__vector_51+0x5c>
		serial_ip[z++]=data;
    15c4:	80 91 22 03 	lds	r24, 0x0322
    15c8:	90 91 23 03 	lds	r25, 0x0323
    15cc:	20 91 3d 03 	lds	r18, 0x033D
    15d0:	fc 01       	movw	r30, r24
    15d2:	e2 5c       	subi	r30, 0xC2	; 194
    15d4:	fc 4f       	sbci	r31, 0xFC	; 252
    15d6:	20 83       	st	Z, r18
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	90 93 23 03 	sts	0x0323, r25
    15de:	80 93 22 03 	sts	0x0322, r24
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	00 92 5b 00 	sts	0x005B, r0
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <motion_pin_config>:



//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1608:	a1 e2       	ldi	r26, 0x21	; 33
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e1 e2       	ldi	r30, 0x21	; 33
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 60       	ori	r24, 0x0F	; 15
    1614:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1616:	a2 e2       	ldi	r26, 0x22	; 34
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e2 e2       	ldi	r30, 0x22	; 34
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 7f       	andi	r24, 0xF0	; 240
    1622:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1624:	aa e0       	ldi	r26, 0x0A	; 10
    1626:	b1 e0       	ldi	r27, 0x01	; 1
    1628:	ea e0       	ldi	r30, 0x0A	; 10
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	80 81       	ld	r24, Z
    162e:	88 61       	ori	r24, 0x18	; 24
    1630:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1632:	ab e0       	ldi	r26, 0x0B	; 11
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	eb e0       	ldi	r30, 0x0B	; 11
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	80 81       	ld	r24, Z
    163c:	88 61       	ori	r24, 0x18	; 24
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    164e:	ad e2       	ldi	r26, 0x2D	; 45
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ed e2       	ldi	r30, 0x2D	; 45
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8f 7e       	andi	r24, 0xEF	; 239
    165a:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    165c:	ae e2       	ldi	r26, 0x2E	; 46
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ee e2       	ldi	r30, 0x2E	; 46
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 61       	ori	r24, 0x10	; 16
    1668:	8c 93       	st	X, r24
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1678:	ad e2       	ldi	r26, 0x2D	; 45
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ed e2       	ldi	r30, 0x2D	; 45
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1686:	ae e2       	ldi	r26, 0x2E	; 46
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ee e2       	ldi	r30, 0x2E	; 46
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	8c 93       	st	X, r24
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <port_init1>:

void port_init1(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    16a2:	0e 94 29 0a 	call	0x1452	; 0x1452 <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    16a6:	0e 94 3e 0a 	call	0x147c	; 0x147c <servo2_pin_config>
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <port_init>:

//Function to initialize ports
void port_init()
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
    16b8:	0e 94 00 0b 	call	0x1600	; 0x1600 <motion_pin_config>
 left_encoder_pin_config(); //left encoder pin config
    16bc:	0e 94 23 0b 	call	0x1646	; 0x1646 <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config
    16c0:	0e 94 38 0b 	call	0x1670	; 0x1670 <right_encoder_pin_config>
 lcd_port_config();
    16c4:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_port_config>
 adc_pin_config();
    16c8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <adc_pin_config>
 buzzer_pin_config();
    16cc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <buzzer_pin_config>
 interrupt_switch_config();
    16d0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <interrupt_switch_config>
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <timer1_init>:

void timer1_init(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    16e2:	e1 e8       	ldi	r30, 0x81	; 129
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    16e8:	e5 e8       	ldi	r30, 0x85	; 133
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8c ef       	ldi	r24, 0xFC	; 252
    16ee:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    16f0:	e4 e8       	ldi	r30, 0x84	; 132
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    16f8:	e9 e8       	ldi	r30, 0x89	; 137
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	83 e0       	ldi	r24, 0x03	; 3
    16fe:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1700:	e8 e8       	ldi	r30, 0x88	; 136
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    1708:	eb e8       	ldi	r30, 0x8B	; 139
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1710:	ea e8       	ldi	r30, 0x8A	; 138
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    1718:	ed e8       	ldi	r30, 0x8D	; 141
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1720:	ec e8       	ldi	r30, 0x8C	; 140
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	80 83       	st	Z, r24
 ICR1H  = 0x03;
    1728:	e7 e8       	ldi	r30, 0x87	; 135
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    1730:	e6 e8       	ldi	r30, 0x86	; 134
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1738:	e0 e8       	ldi	r30, 0x80	; 128
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8b ea       	ldi	r24, 0xAB	; 171
    173e:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1740:	e2 e8       	ldi	r30, 0x82	; 130
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1746:	e1 e8       	ldi	r30, 0x81	; 129
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8c e0       	ldi	r24, 0x0C	; 12
    174c:	80 83       	st	Z, r24
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    175c:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    175e:	aa e6       	ldi	r26, 0x6A	; 106
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ea e6       	ldi	r30, 0x6A	; 106
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    176c:	ad e3       	ldi	r26, 0x3D	; 61
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ed e3       	ldi	r30, 0x3D	; 61
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 61       	ori	r24, 0x10	; 16
    1778:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt
    177a:	78 94       	sei
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    178a:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    178c:	aa e6       	ldi	r26, 0x6A	; 106
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ea e6       	ldi	r30, 0x6A	; 106
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	88 60       	ori	r24, 0x08	; 8
    1798:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    179a:	ad e3       	ldi	r26, 0x3D	; 61
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ed e3       	ldi	r30, 0x3D	; 61
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 62       	ori	r24, 0x20	; 32
    17a6:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt
    17a8:	78 94       	sei
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    17ca:	80 91 1e 03 	lds	r24, 0x031E
    17ce:	90 91 1f 03 	lds	r25, 0x031F
    17d2:	a0 91 20 03 	lds	r26, 0x0320
    17d6:	b0 91 21 03 	lds	r27, 0x0321
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	a1 1d       	adc	r26, r1
    17de:	b1 1d       	adc	r27, r1
    17e0:	80 93 1e 03 	sts	0x031E, r24
    17e4:	90 93 1f 03 	sts	0x031F, r25
    17e8:	a0 93 20 03 	sts	0x0320, r26
    17ec:	b0 93 21 03 	sts	0x0321, r27
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	8f 93       	push	r24
    1812:	9f 93       	push	r25
    1814:	af 93       	push	r26
    1816:	bf 93       	push	r27
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    1820:	80 91 1a 03 	lds	r24, 0x031A
    1824:	90 91 1b 03 	lds	r25, 0x031B
    1828:	a0 91 1c 03 	lds	r26, 0x031C
    182c:	b0 91 1d 03 	lds	r27, 0x031D
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	a1 1d       	adc	r26, r1
    1834:	b1 1d       	adc	r27, r1
    1836:	80 93 1a 03 	sts	0x031A, r24
    183a:	90 93 1b 03 	sts	0x031B, r25
    183e:	a0 93 1c 03 	sts	0x031C, r26
    1842:	b0 93 1d 03 	sts	0x031D, r27
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	0f 92       	push	r0
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    186a:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	8f 70       	andi	r24, 0x0F	; 15
    1870:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1872:	e2 e2       	ldi	r30, 0x22	; 34
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	80 7f       	andi	r24, 0xF0	; 240
    187e:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1880:	99 81       	ldd	r25, Y+1	; 0x01
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	89 2b       	or	r24, r25
    1886:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1888:	e2 e2       	ldi	r30, 0x22	; 34
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	80 83       	st	Z, r24
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <forward>:

void forward (void) //both wheels forward
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    18a2:	86 e0       	ldi	r24, 0x06	; 6
    18a4:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <back>:

void back (void) //both wheels backward
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    18b6:	89 e0       	ldi	r24, 0x09	; 9
    18b8:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    18ca:	85 e0       	ldi	r24, 0x05	; 5
    18cc:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    18de:	8a e0       	ldi	r24, 0x0A	; 10
    18e0:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    18f2:	84 e0       	ldi	r24, 0x04	; 4
    18f4:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    192e:	88 e0       	ldi	r24, 0x08	; 8
    1930:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <stop>:

void stop (void)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	0e 94 2e 0c 	call	0x185c	; 0x185c <motion_set>
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1956:	a7 e2       	ldi	r26, 0x27	; 39
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e7 e2       	ldi	r30, 0x27	; 39
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	87 6f       	ori	r24, 0xF7	; 247
    1962:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1964:	a8 e2       	ldi	r26, 0x28	; 40
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e8 e2       	ldi	r30, 0x28	; 40
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 78       	andi	r24, 0x80	; 128
    1970:	8c 93       	st	X, r24
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;
    1980:	e0 e3       	ldi	r30, 0x30	; 48
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	10 82       	st	Z, r1
 PORTF = 0x00;
    1986:	e1 e3       	ldi	r30, 0x31	; 49
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	10 82       	st	Z, r1
 DDRK = 0x00;
    198c:	e7 e0       	ldi	r30, 0x07	; 7
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	10 82       	st	Z, r1
 PORTK = 0x00;
    1992:	e8 e0       	ldi	r30, 0x08	; 8
    1994:	f1 e0       	ldi	r31, 0x01	; 1
    1996:	10 82       	st	Z, r1
}
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    19a6:	e1 e2       	ldi	r30, 0x21	; 33
    19a8:	f1 e0       	ldi	r31, 0x01	; 1
    19aa:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    19ac:	e5 e2       	ldi	r30, 0x25	; 37
    19ae:	f1 e0       	ldi	r31, 0x01	; 1
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    19b4:	e4 e2       	ldi	r30, 0x24	; 36
    19b6:	f1 e0       	ldi	r31, 0x01	; 1
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    19bc:	e9 e2       	ldi	r30, 0x29	; 41
    19be:	f1 e0       	ldi	r31, 0x01	; 1
    19c0:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    19c2:	e8 e2       	ldi	r30, 0x28	; 40
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    19ca:	eb e2       	ldi	r30, 0x2B	; 43
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    19d0:	ea e2       	ldi	r30, 0x2A	; 42
    19d2:	f1 e0       	ldi	r31, 0x01	; 1
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    19d8:	ed e2       	ldi	r30, 0x2D	; 45
    19da:	f1 e0       	ldi	r31, 0x01	; 1
    19dc:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    19de:	ec e2       	ldi	r30, 0x2C	; 44
    19e0:	f1 e0       	ldi	r31, 0x01	; 1
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    19e6:	e0 e2       	ldi	r30, 0x20	; 32
    19e8:	f1 e0       	ldi	r31, 0x01	; 1
    19ea:	89 ea       	ldi	r24, 0xA9	; 169
    19ec:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    19ee:	e1 e2       	ldi	r30, 0x21	; 33
    19f0:	f1 e0       	ldi	r31, 0x01	; 1
    19f2:	8b e0       	ldi	r24, 0x0B	; 11
    19f4:	80 83       	st	Z, r24
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <adc_init>:

void adc_init()
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1a04:	ea e7       	ldi	r30, 0x7A	; 122
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1a0a:	eb e7       	ldi	r30, 0x7B	; 123
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1a10:	ec e7       	ldi	r30, 0x7C	; 124
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 e2       	ldi	r24, 0x20	; 32
    1a16:	80 83       	st	Z, r24
	ACSR = 0x80;
    1a18:	e0 e5       	ldi	r30, 0x50	; 80
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 e8       	ldi	r24, 0x80	; 128
    1a1e:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1a20:	ea e7       	ldi	r30, 0x7A	; 122
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	86 e8       	ldi	r24, 0x86	; 134
    1a26:	80 83       	st	Z, r24
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	0f 92       	push	r0
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	88 30       	cpi	r24, 0x08	; 8
    1a40:	20 f0       	brcs	.+8      	; 0x1a4a <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1a42:	eb e7       	ldi	r30, 0x7B	; 123
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	88 e0       	ldi	r24, 0x08	; 8
    1a48:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	87 70       	andi	r24, 0x07	; 7
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
    1a50:	ec e7       	ldi	r30, 0x7C	; 124
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	80 62       	ori	r24, 0x20	; 32
    1a58:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1a5a:	aa e7       	ldi	r26, 0x7A	; 122
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	ea e7       	ldi	r30, 0x7A	; 122
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 64       	ori	r24, 0x40	; 64
    1a66:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1a68:	ea e7       	ldi	r30, 0x7A	; 122
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	80 71       	andi	r24, 0x10	; 16
    1a74:	90 70       	andi	r25, 0x00	; 0
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	b9 f3       	breq	.-18     	; 0x1a68 <ADC_Conversion+0x3a>
	a=ADCH;
    1a7a:	e9 e7       	ldi	r30, 0x79	; 121
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1a82:	aa e7       	ldi	r26, 0x7A	; 122
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	ea e7       	ldi	r30, 0x7A	; 122
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 61       	ori	r24, 0x10	; 16
    1a8e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1a90:	eb e7       	ldi	r30, 0x7B	; 123
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	10 82       	st	Z, r1
	return a;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <print_sensor+0x6>
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	6a 83       	std	Y+2, r22	; 0x02
    1ab0:	4b 83       	std	Y+3, r20	; 0x03

	ADC_Value = ADC_Conversion(channel);
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    1ab8:	80 93 38 03 	sts	0x0338, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1abc:	80 91 38 03 	lds	r24, 0x0338
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ac8:	a9 01       	movw	r20, r18
    1aca:	23 e0       	ldi	r18, 0x03	; 3
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <angle_rotate>:



//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	9a 87       	std	Y+10, r25	; 0x0a
    1af4:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e0       	ldi	r26, 0x00	; 0
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	af 83       	std	Y+7, r26	; 0x07
    1b04:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1b06:	19 82       	std	Y+1, r1	; 0x01
    1b08:	1a 82       	std	Y+2, r1	; 0x02
    1b0a:	1b 82       	std	Y+3, r1	; 0x03
    1b0c:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	cc 01       	movw	r24, r24
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	28 e4       	ldi	r18, 0x48	; 72
    1b2a:	31 ee       	ldi	r19, 0xE1	; 225
    1b2c:	42 e8       	ldi	r20, 0x82	; 130
    1b2e:	50 e4       	ldi	r21, 0x40	; 64
    1b30:	0e 94 04 3b 	call	0x7608	; 0x7608 <__divsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	af 83       	std	Y+7, r26	; 0x07
    1b3e:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1b40:	6d 81       	ldd	r22, Y+5	; 0x05
    1b42:	7e 81       	ldd	r23, Y+6	; 0x06
    1b44:	8f 81       	ldd	r24, Y+7	; 0x07
    1b46:	98 85       	ldd	r25, Y+8	; 0x08
    1b48:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	cc 01       	movw	r24, r24
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	ab 83       	std	Y+3, r26	; 0x03
    1b5c:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0;
    1b5e:	10 92 1e 03 	sts	0x031E, r1
    1b62:	10 92 1f 03 	sts	0x031F, r1
    1b66:	10 92 20 03 	sts	0x0320, r1
    1b6a:	10 92 21 03 	sts	0x0321, r1
 ShaftCountLeft = 0;
    1b6e:	10 92 1a 03 	sts	0x031A, r1
    1b72:	10 92 1b 03 	sts	0x031B, r1
    1b76:	10 92 1c 03 	sts	0x031C, r1
    1b7a:	10 92 1d 03 	sts	0x031D, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1b7e:	20 91 1e 03 	lds	r18, 0x031E
    1b82:	30 91 1f 03 	lds	r19, 0x031F
    1b86:	40 91 20 03 	lds	r20, 0x0320
    1b8a:	50 91 21 03 	lds	r21, 0x0321
    1b8e:	1c 86       	std	Y+12, r1	; 0x0c
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	ab 81       	ldd	r26, Y+3	; 0x03
    1b96:	bc 81       	ldd	r27, Y+4	; 0x04
    1b98:	28 17       	cp	r18, r24
    1b9a:	39 07       	cpc	r19, r25
    1b9c:	4a 07       	cpc	r20, r26
    1b9e:	5b 07       	cpc	r21, r27
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <angle_rotate+0xc8>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	8c 87       	std	Y+12, r24	; 0x0c
    1ba6:	20 91 1a 03 	lds	r18, 0x031A
    1baa:	30 91 1b 03 	lds	r19, 0x031B
    1bae:	40 91 1c 03 	lds	r20, 0x031C
    1bb2:	50 91 1d 03 	lds	r21, 0x031D
    1bb6:	1b 86       	std	Y+11, r1	; 0x0b
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	ab 81       	ldd	r26, Y+3	; 0x03
    1bbe:	bc 81       	ldd	r27, Y+4	; 0x04
    1bc0:	28 17       	cp	r18, r24
    1bc2:	39 07       	cpc	r19, r25
    1bc4:	4a 07       	cpc	r20, r26
    1bc6:	5b 07       	cpc	r21, r27
    1bc8:	10 f0       	brcs	.+4      	; 0x1bce <angle_rotate+0xf0>
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	9b 87       	std	Y+11, r25	; 0x0b
    1bce:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd2:	89 2b       	or	r24, r25
    1bd4:	88 23       	and	r24, r24
    1bd6:	99 f2       	breq	.-90     	; 0x1b7e <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
    1bd8:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
}
    1bdc:	2c 96       	adiw	r28, 0x0c	; 12
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	2a 97       	sbiw	r28, 0x0a	; 10
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	9a 87       	std	Y+10, r25	; 0x0a
    1c04:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e0       	ldi	r26, 0x00	; 0
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	af 83       	std	Y+7, r26	; 0x07
    1c14:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	1a 82       	std	Y+2, r1	; 0x02
    1c1a:	1b 82       	std	Y+3, r1	; 0x03
    1c1c:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	cc 01       	movw	r24, r24
    1c24:	a0 e0       	ldi	r26, 0x00	; 0
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	25 ee       	ldi	r18, 0xE5	; 229
    1c3a:	30 ed       	ldi	r19, 0xD0	; 208
    1c3c:	4a ea       	ldi	r20, 0xAA	; 170
    1c3e:	50 e4       	ldi	r21, 0x40	; 64
    1c40:	0e 94 04 3b 	call	0x7608	; 0x7608 <__divsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	af 83       	std	Y+7, r26	; 0x07
    1c4e:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1c50:	6d 81       	ldd	r22, Y+5	; 0x05
    1c52:	7e 81       	ldd	r23, Y+6	; 0x06
    1c54:	8f 81       	ldd	r24, Y+7	; 0x07
    1c56:	98 85       	ldd	r25, Y+8	; 0x08
    1c58:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	ab 83       	std	Y+3, r26	; 0x03
    1c66:	bc 83       	std	Y+4, r27	; 0x04

 ShaftCountRight = 0;
    1c68:	10 92 1e 03 	sts	0x031E, r1
    1c6c:	10 92 1f 03 	sts	0x031F, r1
    1c70:	10 92 20 03 	sts	0x0320, r1
    1c74:	10 92 21 03 	sts	0x0321, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
    1c78:	20 91 1e 03 	lds	r18, 0x031E
    1c7c:	30 91 1f 03 	lds	r19, 0x031F
    1c80:	40 91 20 03 	lds	r20, 0x0320
    1c84:	50 91 21 03 	lds	r21, 0x0321
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c90:	82 17       	cp	r24, r18
    1c92:	93 07       	cpc	r25, r19
    1c94:	a4 07       	cpc	r26, r20
    1c96:	b5 07       	cpc	r27, r21
    1c98:	78 f7       	brcc	.-34     	; 0x1c78 <linear_distance_mm+0x8a>
  {
  	break;
  }
 }
 stop(); //Stop robot
    1c9a:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
}
    1c9e:	2a 96       	adiw	r28, 0x0a	; 10
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <velocity>:


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	0f 92       	push	r0
    1cb6:	0f 92       	push	r0
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1cc0:	e8 e2       	ldi	r30, 0x28	; 40
    1cc2:	f1 e0       	ldi	r31, 0x01	; 1
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1cc8:	ea e2       	ldi	r30, 0x2A	; 42
    1cca:	f1 e0       	ldi	r31, 0x01	; 1
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	80 83       	st	Z, r24
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <forward_mm>:



void forward_mm(unsigned int DistanceInMM)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	0f 92       	push	r0
    1ce0:	0f 92       	push	r0
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
 forward();
    1cea:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
 linear_distance_mm(DistanceInMM);
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <linear_distance_mm>
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	0f 92       	push	r0
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
 back();
    1d10:	0e 94 57 0c 	call	0x18ae	; 0x18ae <back>
 linear_distance_mm(DistanceInMM);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <linear_distance_mm>
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	0f 92       	push	r0
    1d2c:	0f 92       	push	r0
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1d36:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <left>

 angle_rotate(Degrees);
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <angle_rotate>
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	0f 92       	push	r0
    1d52:	0f 92       	push	r0
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1d5c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <right>
 angle_rotate(Degrees);
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <angle_rotate>
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	0f 92       	push	r0
    1d78:	0f 92       	push	r0
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
    1d82:	0e 94 75 0c 	call	0x18ea	; 0x18ea <soft_left>
 Degrees=Degrees*2;
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <angle_rotate>
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	0f 92       	push	r0
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
    1db4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <soft_right>
 Degrees=Degrees*2;
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <angle_rotate>
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	0f 92       	push	r0
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
    1de6:	0e 94 89 0c 	call	0x1912	; 0x1912 <soft_left_2>
 Degrees=Degrees*2;
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <angle_rotate>
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	0f 92       	push	r0
    1e0e:	0f 92       	push	r0
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
    1e18:	0e 94 93 0c 	call	0x1926	; 0x1926 <soft_right_2>
 Degrees=Degrees*2;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <angle_rotate>
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <init_devices1>:

void init_devices1(void)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
	cli(); //disable all interrupts
    1e42:	f8 94       	cli
	port_init1();
    1e44:	0e 94 4d 0b 	call	0x169a	; 0x169a <port_init1>
	timer1_init();
    1e48:	0e 94 6d 0b 	call	0x16da	; 0x16da <timer1_init>
	sei(); //re-enable interrupts
    1e4c:	78 94       	sei
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <init_devices>:

void init_devices (void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    1e5c:	f8 94       	cli
	port_init();  //Initializes all the ports
    1e5e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <port_init>
	left_position_encoder_interrupt_init();
    1e62:	0e 94 aa 0b 	call	0x1754	; 0x1754 <left_position_encoder_interrupt_init>
 	right_position_encoder_interrupt_init();
    1e66:	0e 94 c1 0b 	call	0x1782	; 0x1782 <right_position_encoder_interrupt_init>
	adc_init();
    1e6a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <adc_init>
	timer5_init();
    1e6e:	0e 94 cf 0c 	call	0x199e	; 0x199e <timer5_init>
	uart2_init(); //Initailize UART1 for serial communiaction
    1e72:	0e 94 a7 0a 	call	0x154e	; 0x154e <uart2_init>
	port_init();
    1e76:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <port_init>
	//timer1_init();
	sei();   //Enables the global interrupts
    1e7a:	78 94       	sei
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 0.4 degrees
void servo_1(unsigned char degrees)
{
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <servo_1+0xa>
    1e8c:	0f 92       	push	r0
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 e0       	ldi	r26, 0x00	; 0
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	ab 83       	std	Y+3, r26	; 0x03
    1ea4:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 0.4) + 35.0;     //start from an offset of 35
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e0       	ldi	r26, 0x00	; 0
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	2d ec       	ldi	r18, 0xCD	; 205
    1ec2:	3c ec       	ldi	r19, 0xCC	; 204
    1ec4:	4c ec       	ldi	r20, 0xCC	; 204
    1ec6:	5e e3       	ldi	r21, 0x3E	; 62
    1ec8:	0e 94 04 3b 	call	0x7608	; 0x7608 <__divsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4c e0       	ldi	r20, 0x0C	; 12
    1eda:	52 e4       	ldi	r21, 0x42	; 66
    1edc:	0e 94 dd 39 	call	0x73ba	; 0x73ba <__addsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	ab 83       	std	Y+3, r26	; 0x03
    1eea:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    1eec:	e9 e8       	ldi	r30, 0x89	; 137
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    1ef2:	08 e8       	ldi	r16, 0x88	; 136
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	69 81       	ldd	r22, Y+1	; 0x01
    1ef8:	7a 81       	ldd	r23, Y+2	; 0x02
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	80 83       	st	Z, r24
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	08 95       	ret

00001f1e <servo_2>:



//Function to rotate Servo 2 by a specified angle in the multiples of 0.9 degrees
void servo_2(unsigned char degrees)
{
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <servo_2+0xa>
    1f28:	0f 92       	push	r0
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	8d 83       	std	Y+5, r24	; 0x05
	float PositionTiltServo = 0;
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	ab 83       	std	Y+3, r26	; 0x03
    1f40:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 0.9)+40.0;   //start from an offset of 40
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	26 e6       	ldi	r18, 0x66	; 102
    1f5e:	36 e6       	ldi	r19, 0x66	; 102
    1f60:	46 e6       	ldi	r20, 0x66	; 102
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 04 3b 	call	0x7608	; 0x7608 <__divsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	52 e4       	ldi	r21, 0x42	; 66
    1f78:	0e 94 dd 39 	call	0x73ba	; 0x73ba <__addsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	ab 83       	std	Y+3, r26	; 0x03
    1f86:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    1f88:	eb e8       	ldi	r30, 0x8B	; 139
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    1f8e:	0a e8       	ldi	r16, 0x8A	; 138
    1f90:	10 e0       	ldi	r17, 0x00	; 0
    1f92:	69 81       	ldd	r22, Y+1	; 0x01
    1f94:	7a 81       	ldd	r23, Y+2	; 0x02
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	80 83       	st	Z, r24
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <servo_1_free>:

void servo_1_free (void) //makes servo 1 free rotating
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03;
    1fc2:	e9 e8       	ldi	r30, 0x89	; 137
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	80 83       	st	Z, r24
	OCR1AL = 0xFF; //Servo 1 off
    1fca:	e8 e8       	ldi	r30, 0x88	; 136
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	80 83       	st	Z, r24
}
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	OCR1BH = 0x03;
    1fe0:	eb e8       	ldi	r30, 0x8B	; 139
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Servo 2 off
    1fe8:	ea e8       	ldi	r30, 0x8A	; 138
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8f ef       	ldi	r24, 0xFF	; 255
    1fee:	80 83       	st	Z, r24
}
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <nodes>:
char mapping[30][30];


/* Finds all nodes of a given habitat and returns the coordinates of the nearest node from animal location i.e. (x,y) */
int* nodes(int n,int x,int y)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	a8 97       	sbiw	r28, 0x28	; 40
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	9c 8f       	std	Y+28, r25	; 0x1c
    200c:	8b 8f       	std	Y+27, r24	; 0x1b
    200e:	7e 8f       	std	Y+30, r23	; 0x1e
    2010:	6d 8f       	std	Y+29, r22	; 0x1d
    2012:	58 a3       	std	Y+32, r21	; 0x20
    2014:	4f 8f       	std	Y+31, r20	; 0x1f
	Output: temp
	*/

	// find coordinates of bottom left corner of habitat number n
	// ----------------------------------------------------------
	int x0=n%5;
    2016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201a:	25 e0       	ldi	r18, 0x05	; 5
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	b9 01       	movw	r22, r18
    2020:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    2024:	9a 8f       	std	Y+26, r25	; 0x1a
    2026:	89 8f       	std	Y+25, r24	; 0x19
	int y0=n/5;
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	25 e0       	ldi	r18, 0x05	; 5
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	b9 01       	movw	r22, r18
    2032:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    2036:	cb 01       	movw	r24, r22
    2038:	98 8f       	std	Y+24, r25	; 0x18
    203a:	8f 8b       	std	Y+23, r24	; 0x17

	// Calculate coordinates of other 3 nodes of habitat n and returns the closest to animal location
	// ----------------------------------------------------------------------------------------------
	int x1,y1,x2,y2,x3,y3,rx,ry,d1,d2;
	int *temp=(int*) malloc(sizeof(int)*2);
    203c:	84 e0       	ldi	r24, 0x04	; 4
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <malloc>
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	x1=x0+1;
    2048:	89 8d       	ldd	r24, Y+25	; 0x19
    204a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	9e 8b       	std	Y+22, r25	; 0x16
    2050:	8d 8b       	std	Y+21, r24	; 0x15
	x2=x1;
    2052:	8d 89       	ldd	r24, Y+21	; 0x15
    2054:	9e 89       	ldd	r25, Y+22	; 0x16
    2056:	9a 8b       	std	Y+18, r25	; 0x12
    2058:	89 8b       	std	Y+17, r24	; 0x11
	x3=x0;
    205a:	89 8d       	ldd	r24, Y+25	; 0x19
    205c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    205e:	9e 87       	std	Y+14, r25	; 0x0e
    2060:	8d 87       	std	Y+13, r24	; 0x0d
	y1=y0;
    2062:	8f 89       	ldd	r24, Y+23	; 0x17
    2064:	98 8d       	ldd	r25, Y+24	; 0x18
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
	y2=y0+1;
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	98 8b       	std	Y+16, r25	; 0x10
    2072:	8f 87       	std	Y+15, r24	; 0x0f
	y3=y2;
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	98 89       	ldd	r25, Y+16	; 0x10
    2078:	9c 87       	std	Y+12, r25	; 0x0c
    207a:	8b 87       	std	Y+11, r24	; 0x0b
	d1=abs(x-x0);
    207c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    207e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2080:	89 8d       	ldd	r24, Y+25	; 0x19
    2082:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2084:	a9 01       	movw	r20, r18
    2086:	48 1b       	sub	r20, r24
    2088:	59 0b       	sbc	r21, r25
    208a:	ca 01       	movw	r24, r20
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	99 23       	and	r25, r25
    2096:	3c f4       	brge	.+14     	; 0x20a6 <nodes+0xb0>
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	90 95       	com	r25
    209e:	81 95       	neg	r24
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
	d2=abs(x-x1);
    20a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    20a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    20aa:	8d 89       	ldd	r24, Y+21	; 0x15
    20ac:	9e 89       	ldd	r25, Y+22	; 0x16
    20ae:	a9 01       	movw	r20, r18
    20b0:	48 1b       	sub	r20, r24
    20b2:	59 0b       	sbc	r21, r25
    20b4:	ca 01       	movw	r24, r20
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	99 23       	and	r25, r25
    20c0:	3c f4       	brge	.+14     	; 0x20d0 <nodes+0xda>
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	90 95       	com	r25
    20c8:	81 95       	neg	r24
    20ca:	9f 4f       	sbci	r25, 0xFF	; 255
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
	d1>d2?((abs(y-y1)>abs(y-y2)?(rx=x1,ry=y2):(rx=x1,ry=y1))):((abs(y-y0)>abs(y-y3))?(rx=x0,ry=y3):(rx=x0,ry=y0)); // Find node with least distance
    20d0:	2d 81       	ldd	r18, Y+5	; 0x05
    20d2:	3e 81       	ldd	r19, Y+6	; 0x06
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	82 17       	cp	r24, r18
    20da:	93 07       	cpc	r25, r19
    20dc:	0c f0       	brlt	.+2      	; 0x20e0 <nodes+0xea>
    20de:	3f c0       	rjmp	.+126    	; 0x215e <nodes+0x168>
    20e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e2:	98 a1       	ldd	r25, Y+32	; 0x20
    20e4:	2b 89       	ldd	r18, Y+19	; 0x13
    20e6:	3c 89       	ldd	r19, Y+20	; 0x14
    20e8:	82 1b       	sub	r24, r18
    20ea:	93 0b       	sbc	r25, r19
    20ec:	98 a7       	std	Y+40, r25	; 0x28
    20ee:	8f a3       	std	Y+39, r24	; 0x27
    20f0:	8f a1       	ldd	r24, Y+39	; 0x27
    20f2:	98 a5       	ldd	r25, Y+40	; 0x28
    20f4:	99 23       	and	r25, r25
    20f6:	3c f4       	brge	.+14     	; 0x2106 <nodes+0x110>
    20f8:	2f a1       	ldd	r18, Y+39	; 0x27
    20fa:	38 a5       	ldd	r19, Y+40	; 0x28
    20fc:	30 95       	com	r19
    20fe:	21 95       	neg	r18
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
    2102:	38 a7       	std	Y+40, r19	; 0x28
    2104:	2f a3       	std	Y+39, r18	; 0x27
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	98 a1       	ldd	r25, Y+32	; 0x20
    210a:	2f 85       	ldd	r18, Y+15	; 0x0f
    210c:	38 89       	ldd	r19, Y+16	; 0x10
    210e:	82 1b       	sub	r24, r18
    2110:	93 0b       	sbc	r25, r19
    2112:	9e a3       	std	Y+38, r25	; 0x26
    2114:	8d a3       	std	Y+37, r24	; 0x25
    2116:	4d a1       	ldd	r20, Y+37	; 0x25
    2118:	5e a1       	ldd	r21, Y+38	; 0x26
    211a:	55 23       	and	r21, r21
    211c:	3c f4       	brge	.+14     	; 0x212c <nodes+0x136>
    211e:	8d a1       	ldd	r24, Y+37	; 0x25
    2120:	9e a1       	ldd	r25, Y+38	; 0x26
    2122:	90 95       	com	r25
    2124:	81 95       	neg	r24
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	9e a3       	std	Y+38, r25	; 0x26
    212a:	8d a3       	std	Y+37, r24	; 0x25
    212c:	2f a1       	ldd	r18, Y+39	; 0x27
    212e:	38 a5       	ldd	r19, Y+40	; 0x28
    2130:	4d a1       	ldd	r20, Y+37	; 0x25
    2132:	5e a1       	ldd	r21, Y+38	; 0x26
    2134:	42 17       	cp	r20, r18
    2136:	53 07       	cpc	r21, r19
    2138:	4c f4       	brge	.+18     	; 0x214c <nodes+0x156>
    213a:	8d 89       	ldd	r24, Y+21	; 0x15
    213c:	9e 89       	ldd	r25, Y+22	; 0x16
    213e:	9a 87       	std	Y+10, r25	; 0x0a
    2140:	89 87       	std	Y+9, r24	; 0x09
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	98 89       	ldd	r25, Y+16	; 0x10
    2146:	98 87       	std	Y+8, r25	; 0x08
    2148:	8f 83       	std	Y+7, r24	; 0x07
    214a:	47 c0       	rjmp	.+142    	; 0x21da <nodes+0x1e4>
    214c:	8d 89       	ldd	r24, Y+21	; 0x15
    214e:	9e 89       	ldd	r25, Y+22	; 0x16
    2150:	9a 87       	std	Y+10, r25	; 0x0a
    2152:	89 87       	std	Y+9, r24	; 0x09
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	8f 83       	std	Y+7, r24	; 0x07
    215c:	3e c0       	rjmp	.+124    	; 0x21da <nodes+0x1e4>
    215e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2160:	98 a1       	ldd	r25, Y+32	; 0x20
    2162:	2f 89       	ldd	r18, Y+23	; 0x17
    2164:	38 8d       	ldd	r19, Y+24	; 0x18
    2166:	82 1b       	sub	r24, r18
    2168:	93 0b       	sbc	r25, r19
    216a:	9c a3       	std	Y+36, r25	; 0x24
    216c:	8b a3       	std	Y+35, r24	; 0x23
    216e:	8b a1       	ldd	r24, Y+35	; 0x23
    2170:	9c a1       	ldd	r25, Y+36	; 0x24
    2172:	99 23       	and	r25, r25
    2174:	3c f4       	brge	.+14     	; 0x2184 <nodes+0x18e>
    2176:	2b a1       	ldd	r18, Y+35	; 0x23
    2178:	3c a1       	ldd	r19, Y+36	; 0x24
    217a:	30 95       	com	r19
    217c:	21 95       	neg	r18
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	3c a3       	std	Y+36, r19	; 0x24
    2182:	2b a3       	std	Y+35, r18	; 0x23
    2184:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2186:	98 a1       	ldd	r25, Y+32	; 0x20
    2188:	2b 85       	ldd	r18, Y+11	; 0x0b
    218a:	3c 85       	ldd	r19, Y+12	; 0x0c
    218c:	82 1b       	sub	r24, r18
    218e:	93 0b       	sbc	r25, r19
    2190:	9a a3       	std	Y+34, r25	; 0x22
    2192:	89 a3       	std	Y+33, r24	; 0x21
    2194:	49 a1       	ldd	r20, Y+33	; 0x21
    2196:	5a a1       	ldd	r21, Y+34	; 0x22
    2198:	55 23       	and	r21, r21
    219a:	3c f4       	brge	.+14     	; 0x21aa <nodes+0x1b4>
    219c:	89 a1       	ldd	r24, Y+33	; 0x21
    219e:	9a a1       	ldd	r25, Y+34	; 0x22
    21a0:	90 95       	com	r25
    21a2:	81 95       	neg	r24
    21a4:	9f 4f       	sbci	r25, 0xFF	; 255
    21a6:	9a a3       	std	Y+34, r25	; 0x22
    21a8:	89 a3       	std	Y+33, r24	; 0x21
    21aa:	2b a1       	ldd	r18, Y+35	; 0x23
    21ac:	3c a1       	ldd	r19, Y+36	; 0x24
    21ae:	49 a1       	ldd	r20, Y+33	; 0x21
    21b0:	5a a1       	ldd	r21, Y+34	; 0x22
    21b2:	42 17       	cp	r20, r18
    21b4:	53 07       	cpc	r21, r19
    21b6:	4c f4       	brge	.+18     	; 0x21ca <nodes+0x1d4>
    21b8:	89 8d       	ldd	r24, Y+25	; 0x19
    21ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21bc:	9a 87       	std	Y+10, r25	; 0x0a
    21be:	89 87       	std	Y+9, r24	; 0x09
    21c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21c4:	98 87       	std	Y+8, r25	; 0x08
    21c6:	8f 83       	std	Y+7, r24	; 0x07
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <nodes+0x1e4>
    21ca:	89 8d       	ldd	r24, Y+25	; 0x19
    21cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21ce:	9a 87       	std	Y+10, r25	; 0x0a
    21d0:	89 87       	std	Y+9, r24	; 0x09
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	98 87       	std	Y+8, r25	; 0x08
    21d8:	8f 83       	std	Y+7, r24	; 0x07
	// Store coordinates of closest node in temp and return it
	*temp=rx;
    21da:	e9 81       	ldd	r30, Y+1	; 0x01
    21dc:	fa 81       	ldd	r31, Y+2	; 0x02
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
	*(temp+1)=ry;
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	fc 01       	movw	r30, r24
    21ec:	32 96       	adiw	r30, 0x02	; 2
    21ee:	8f 81       	ldd	r24, Y+7	; 0x07
    21f0:	98 85       	ldd	r25, Y+8	; 0x08
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
	return temp;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21fa:	a8 96       	adiw	r28, 0x28	; 40
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <straight>:

/* Follow black line for given number of nodes(d) */
void straight(int d)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	0f 92       	push	r0
    2212:	0f 92       	push	r0
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
	nodetraverse(d);
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <nodetraverse>
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <turn_180>:

/* Rotate 180 degrees from current direction on to black line */
int turn_180()
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	2e 97       	sbiw	r28, 0x0e	; 14
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: turn_180
	Input: None
	Output:a
	*/
	init_devices();
    2242:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
	right_degrees(160);
    2246:	80 ea       	ldi	r24, 0xA0	; 160
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <right_degrees>
	while(1)
	{
		// Adjust position by rotating in steps of 3 degrees until black line is found
		Center_white_line = ADC_Conversion(2);
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    2254:	80 93 18 03 	sts	0x0318, r24
		if(Center_white_line<0x25)
    2258:	80 91 18 03 	lds	r24, 0x0318
    225c:	85 32       	cpi	r24, 0x25	; 37
    225e:	28 f4       	brcc	.+10     	; 0x226a <turn_180+0x3c>
			right_degrees(2);
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <right_degrees>
    2268:	f2 cf       	rjmp	.-28     	; 0x224e <turn_180+0x20>
		else
			break;
	}
	stop();
    226a:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a8 ec       	ldi	r26, 0xC8	; 200
    2274:	b2 e4       	ldi	r27, 0x42	; 66
    2276:	8b 87       	std	Y+11, r24	; 0x0b
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	ad 87       	std	Y+13, r26	; 0x0d
    227c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	26 e6       	ldi	r18, 0x66	; 102
    2288:	36 e6       	ldi	r19, 0x66	; 102
    228a:	46 e6       	ldi	r20, 0x66	; 102
    228c:	55 e4       	ldi	r21, 0x45	; 69
    228e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8f 83       	std	Y+7, r24	; 0x07
    2298:	98 87       	std	Y+8, r25	; 0x08
    229a:	a9 87       	std	Y+9, r26	; 0x09
    229c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <turn_180+0x92>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	3f c0       	rjmp	.+126    	; 0x233e <turn_180+0x110>
	else if (__tmp > 65535)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <turn_180+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <turn_180+0xf2>
    2302:	80 e7       	ldi	r24, 0x70	; 112
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <turn_180+0xe0>
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <turn_180+0xd4>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <turn_180+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <turn_180+0x11c>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	a=a+2;
    2352:	80 91 02 02 	lds	r24, 0x0202
    2356:	90 91 03 02 	lds	r25, 0x0203
    235a:	02 96       	adiw	r24, 0x02	; 2
    235c:	90 93 03 02 	sts	0x0203, r25
    2360:	80 93 02 02 	sts	0x0202, r24
	// Update the direction reference of the robot and return it
	if(a==8||a==0)
    2364:	80 91 02 02 	lds	r24, 0x0202
    2368:	90 91 03 02 	lds	r25, 0x0203
    236c:	88 30       	cpi	r24, 0x08	; 8
    236e:	91 05       	cpc	r25, r1
    2370:	31 f0       	breq	.+12     	; 0x237e <turn_180+0x150>
    2372:	80 91 02 02 	lds	r24, 0x0202
    2376:	90 91 03 02 	lds	r25, 0x0203
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	31 f4       	brne	.+12     	; 0x238a <turn_180+0x15c>
		a=4;
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	90 93 03 02 	sts	0x0203, r25
    2386:	80 93 02 02 	sts	0x0202, r24
	return a;
    238a:	80 91 02 02 	lds	r24, 0x0202
    238e:	90 91 03 02 	lds	r25, 0x0203
}
    2392:	2e 96       	adiw	r28, 0x0e	; 14
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <turn>:

/* Turn the robot by 90 degrees left/right based on parameter value*/
int turn(int f)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	6e 97       	sbiw	r28, 0x1e	; 30
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ba:	8d 8f       	std	Y+29, r24	; 0x1d
	/*
	Function Name: turn
	Input: f
	Output: a
	*/
	init_devices();
    23bc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
	forward_mm(12);
    23c0:	8c e0       	ldi	r24, 0x0C	; 12
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
	stop();
    23c8:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	a8 ec       	ldi	r26, 0xC8	; 200
    23d2:	b2 e4       	ldi	r27, 0x42	; 66
    23d4:	89 8f       	std	Y+25, r24	; 0x19
    23d6:	9a 8f       	std	Y+26, r25	; 0x1a
    23d8:	ab 8f       	std	Y+27, r26	; 0x1b
    23da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	69 8d       	ldd	r22, Y+25	; 0x19
    23de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e4:	26 e6       	ldi	r18, 0x66	; 102
    23e6:	36 e6       	ldi	r19, 0x66	; 102
    23e8:	46 e6       	ldi	r20, 0x66	; 102
    23ea:	55 e4       	ldi	r21, 0x45	; 69
    23ec:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	8d 8b       	std	Y+21, r24	; 0x15
    23f6:	9e 8b       	std	Y+22, r25	; 0x16
    23f8:	af 8b       	std	Y+23, r26	; 0x17
    23fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23fc:	6d 89       	ldd	r22, Y+21	; 0x15
    23fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2400:	8f 89       	ldd	r24, Y+23	; 0x17
    2402:	98 8d       	ldd	r25, Y+24	; 0x18
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	2c f4       	brge	.+10     	; 0x241e <turn+0x7a>
		__ticks = 1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9c 8b       	std	Y+20, r25	; 0x14
    241a:	8b 8b       	std	Y+19, r24	; 0x13
    241c:	3f c0       	rjmp	.+126    	; 0x249c <turn+0xf8>
	else if (__tmp > 65535)
    241e:	6d 89       	ldd	r22, Y+21	; 0x15
    2420:	7e 89       	ldd	r23, Y+22	; 0x16
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	98 8d       	ldd	r25, Y+24	; 0x18
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	4c f5       	brge	.+82     	; 0x2488 <turn+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	69 8d       	ldd	r22, Y+25	; 0x19
    2438:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e2       	ldi	r20, 0x20	; 32
    2444:	51 e4       	ldi	r21, 0x41	; 65
    2446:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	0f c0       	rjmp	.+30     	; 0x247e <turn+0xda>
    2460:	80 e7       	ldi	r24, 0x70	; 112
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	9a 8b       	std	Y+18, r25	; 0x12
    2466:	89 8b       	std	Y+17, r24	; 0x11
    2468:	89 89       	ldd	r24, Y+17	; 0x11
    246a:	9a 89       	ldd	r25, Y+18	; 0x12
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <turn+0xc8>
    2470:	9a 8b       	std	Y+18, r25	; 0x12
    2472:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	8b 89       	ldd	r24, Y+19	; 0x13
    2476:	9c 89       	ldd	r25, Y+20	; 0x14
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	9c 8b       	std	Y+20, r25	; 0x14
    247c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	8b 89       	ldd	r24, Y+19	; 0x13
    2480:	9c 89       	ldd	r25, Y+20	; 0x14
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	69 f7       	brne	.-38     	; 0x2460 <turn+0xbc>
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <turn+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	6d 89       	ldd	r22, Y+21	; 0x15
    248a:	7e 89       	ldd	r23, Y+22	; 0x16
    248c:	8f 89       	ldd	r24, Y+23	; 0x17
    248e:	98 8d       	ldd	r25, Y+24	; 0x18
    2490:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9c 8b       	std	Y+20, r25	; 0x14
    249a:	8b 8b       	std	Y+19, r24	; 0x13
    249c:	8b 89       	ldd	r24, Y+19	; 0x13
    249e:	9c 89       	ldd	r25, Y+20	; 0x14
    24a0:	98 8b       	std	Y+16, r25	; 0x10
    24a2:	8f 87       	std	Y+15, r24	; 0x0f
    24a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a6:	98 89       	ldd	r25, Y+16	; 0x10
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <turn+0x104>
    24ac:	98 8b       	std	Y+16, r25	; 0x10
    24ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	// Rotate right by 90 degrees
	if(f==1)
    24b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	91 05       	cpc	r25, r1
    24b8:	31 f5       	brne	.+76     	; 0x2506 <turn+0x162>
	{
		soft_right_degrees(75);
    24ba:	8b e4       	ldi	r24, 0x4B	; 75
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <soft_right_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    24c8:	80 93 18 03 	sts	0x0318, r24
			Left_white_line = ADC_Conversion(3);
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    24d2:	80 93 17 03 	sts	0x0317, r24
			Right_white_line = ADC_Conversion(1);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    24dc:	80 93 19 03 	sts	0x0319, r24
			if(Center_white_line<0x20)
    24e0:	80 91 18 03 	lds	r24, 0x0318
    24e4:	80 32       	cpi	r24, 0x20	; 32
    24e6:	28 f4       	brcc	.+10     	; 0x24f2 <turn+0x14e>
				soft_right_degrees(2);
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <soft_right_degrees>
    24f0:	e8 cf       	rjmp	.-48     	; 0x24c2 <turn+0x11e>
			else
				break;
		}
		a++;
    24f2:	80 91 02 02 	lds	r24, 0x0202
    24f6:	90 91 03 02 	lds	r25, 0x0203
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	90 93 03 02 	sts	0x0203, r25
    2500:	80 93 02 02 	sts	0x0202, r24
    2504:	1b c0       	rjmp	.+54     	; 0x253c <turn+0x198>
	}

	// Rotate left by 90 degrees
	else
	{
		soft_left_degrees(75);
    2506:	8b e4       	ldi	r24, 0x4B	; 75
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <soft_left_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    2514:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x20)
    2518:	80 91 18 03 	lds	r24, 0x0318
    251c:	80 32       	cpi	r24, 0x20	; 32
    251e:	28 f4       	brcc	.+10     	; 0x252a <turn+0x186>
				soft_left_degrees(2);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <soft_left_degrees>
    2528:	f2 cf       	rjmp	.-28     	; 0x250e <turn+0x16a>
			else
				break;
		}
		a--;
    252a:	80 91 02 02 	lds	r24, 0x0202
    252e:	90 91 03 02 	lds	r25, 0x0203
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	90 93 03 02 	sts	0x0203, r25
    2538:	80 93 02 02 	sts	0x0202, r24
	}
	stop();
    253c:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	a8 ec       	ldi	r26, 0xC8	; 200
    2546:	b2 e4       	ldi	r27, 0x42	; 66
    2548:	8b 87       	std	Y+11, r24	; 0x0b
    254a:	9c 87       	std	Y+12, r25	; 0x0c
    254c:	ad 87       	std	Y+13, r26	; 0x0d
    254e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	6b 85       	ldd	r22, Y+11	; 0x0b
    2552:	7c 85       	ldd	r23, Y+12	; 0x0c
    2554:	8d 85       	ldd	r24, Y+13	; 0x0d
    2556:	9e 85       	ldd	r25, Y+14	; 0x0e
    2558:	26 e6       	ldi	r18, 0x66	; 102
    255a:	36 e6       	ldi	r19, 0x66	; 102
    255c:	46 e6       	ldi	r20, 0x66	; 102
    255e:	55 e4       	ldi	r21, 0x45	; 69
    2560:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8f 83       	std	Y+7, r24	; 0x07
    256a:	98 87       	std	Y+8, r25	; 0x08
    256c:	a9 87       	std	Y+9, r26	; 0x09
    256e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2570:	6f 81       	ldd	r22, Y+7	; 0x07
    2572:	78 85       	ldd	r23, Y+8	; 0x08
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	2c f4       	brge	.+10     	; 0x2592 <turn+0x1ee>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	3f c0       	rjmp	.+126    	; 0x2610 <turn+0x26c>
	else if (__tmp > 65535)
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	78 85       	ldd	r23, Y+8	; 0x08
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	4c f5       	brge	.+82     	; 0x25fc <turn+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <turn+0x24e>
    25d4:	80 e7       	ldi	r24, 0x70	; 112
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	8b 83       	std	Y+3, r24	; 0x03
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <turn+0x23c>
    25e4:	9c 83       	std	Y+4, r25	; 0x04
    25e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9e 81       	ldd	r25, Y+6	; 0x06
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	69 f7       	brne	.-38     	; 0x25d4 <turn+0x230>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <turn+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fc:	6f 81       	ldd	r22, Y+7	; 0x07
    25fe:	78 85       	ldd	r23, Y+8	; 0x08
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	9a 85       	ldd	r25, Y+10	; 0x0a
    2604:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <turn+0x278>
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	// Update direction reference of robot and return it
	if(a==8||a==0)
    2624:	80 91 02 02 	lds	r24, 0x0202
    2628:	90 91 03 02 	lds	r25, 0x0203
    262c:	88 30       	cpi	r24, 0x08	; 8
    262e:	91 05       	cpc	r25, r1
    2630:	31 f0       	breq	.+12     	; 0x263e <turn+0x29a>
    2632:	80 91 02 02 	lds	r24, 0x0202
    2636:	90 91 03 02 	lds	r25, 0x0203
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	31 f4       	brne	.+12     	; 0x264a <turn+0x2a6>
		a=4;
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	90 93 03 02 	sts	0x0203, r25
    2646:	80 93 02 02 	sts	0x0202, r24
	return a;
    264a:	80 91 02 02 	lds	r24, 0x0202
    264e:	90 91 03 02 	lds	r25, 0x0203
}
    2652:	6e 96       	adiw	r28, 0x1e	; 30
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <turnsoft>:

/* Function to perform soft turns(keeping one wheel stationary and other wheel backward) */
int turnsoft(int f)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	6e 97       	sbiw	r28, 0x1e	; 30
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	9e 8f       	std	Y+30, r25	; 0x1e
    267a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*
	Function Name: turnsoft
	Input: f
	Output: a
	*/
	init_devices();
    267c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
	forward_mm(173);
    2680:	8d ea       	ldi	r24, 0xAD	; 173
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
	stop();
    2688:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a8 ec       	ldi	r26, 0xC8	; 200
    2692:	b2 e4       	ldi	r27, 0x42	; 66
    2694:	89 8f       	std	Y+25, r24	; 0x19
    2696:	9a 8f       	std	Y+26, r25	; 0x1a
    2698:	ab 8f       	std	Y+27, r26	; 0x1b
    269a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	69 8d       	ldd	r22, Y+25	; 0x19
    269e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a4:	26 e6       	ldi	r18, 0x66	; 102
    26a6:	36 e6       	ldi	r19, 0x66	; 102
    26a8:	46 e6       	ldi	r20, 0x66	; 102
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8d 8b       	std	Y+21, r24	; 0x15
    26b6:	9e 8b       	std	Y+22, r25	; 0x16
    26b8:	af 8b       	std	Y+23, r26	; 0x17
    26ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <turnsoft+0x7a>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <turnsoft+0xf8>
	else if (__tmp > 65535)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <turnsoft+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	0f c0       	rjmp	.+30     	; 0x273e <turnsoft+0xda>
    2720:	80 e7       	ldi	r24, 0x70	; 112
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	9a 8b       	std	Y+18, r25	; 0x12
    2726:	89 8b       	std	Y+17, r24	; 0x11
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <turnsoft+0xc8>
    2730:	9a 8b       	std	Y+18, r25	; 0x12
    2732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <turnsoft+0xbc>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <turnsoft+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	8b 89       	ldd	r24, Y+19	; 0x13
    275e:	9c 89       	ldd	r25, Y+20	; 0x14
    2760:	98 8b       	std	Y+16, r25	; 0x10
    2762:	8f 87       	std	Y+15, r24	; 0x0f
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	98 89       	ldd	r25, Y+16	; 0x10
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <turnsoft+0x104>
    276c:	98 8b       	std	Y+16, r25	; 0x10
    276e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	if(f==1) // Soft right
    2770:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2772:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2774:	81 30       	cpi	r24, 0x01	; 1
    2776:	91 05       	cpc	r25, r1
    2778:	e1 f4       	brne	.+56     	; 0x27b2 <turnsoft+0x14e>
	{
		soft_right_2_degrees(105);
    277a:	89 e6       	ldi	r24, 0x69	; 105
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <soft_right_2_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    2788:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x40)
    278c:	80 91 18 03 	lds	r24, 0x0318
    2790:	80 34       	cpi	r24, 0x40	; 64
    2792:	28 f4       	brcc	.+10     	; 0x279e <turnsoft+0x13a>
				soft_right_2_degrees(2);
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <soft_right_2_degrees>
    279c:	f2 cf       	rjmp	.-28     	; 0x2782 <turnsoft+0x11e>
			else
				break;
		}
		a++;
    279e:	80 91 02 02 	lds	r24, 0x0202
    27a2:	90 91 03 02 	lds	r25, 0x0203
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	90 93 03 02 	sts	0x0203, r25
    27ac:	80 93 02 02 	sts	0x0202, r24
    27b0:	1b c0       	rjmp	.+54     	; 0x27e8 <turnsoft+0x184>
	}
	else // Soft left
	{
		soft_left_2_degrees(80);
    27b2:	80 e5       	ldi	r24, 0x50	; 80
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <soft_left_2_degrees>
		while(1)
		{
			// Adjust position by rotating in steps of 3 degrees until black line is found
			Center_white_line = ADC_Conversion(2);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    27c0:	80 93 18 03 	sts	0x0318, r24
			if(Center_white_line<0x20)
    27c4:	80 91 18 03 	lds	r24, 0x0318
    27c8:	80 32       	cpi	r24, 0x20	; 32
    27ca:	28 f4       	brcc	.+10     	; 0x27d6 <turnsoft+0x172>
				soft_left_2_degrees(2);
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <soft_left_2_degrees>
    27d4:	f2 cf       	rjmp	.-28     	; 0x27ba <turnsoft+0x156>
			else
				break;
		}
		a--;
    27d6:	80 91 02 02 	lds	r24, 0x0202
    27da:	90 91 03 02 	lds	r25, 0x0203
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	90 93 03 02 	sts	0x0203, r25
    27e4:	80 93 02 02 	sts	0x0202, r24
	}
	stop();
    27e8:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a8 ec       	ldi	r26, 0xC8	; 200
    27f2:	b2 e4       	ldi	r27, 0x42	; 66
    27f4:	8b 87       	std	Y+11, r24	; 0x0b
    27f6:	9c 87       	std	Y+12, r25	; 0x0c
    27f8:	ad 87       	std	Y+13, r26	; 0x0d
    27fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2800:	8d 85       	ldd	r24, Y+13	; 0x0d
    2802:	9e 85       	ldd	r25, Y+14	; 0x0e
    2804:	26 e6       	ldi	r18, 0x66	; 102
    2806:	36 e6       	ldi	r19, 0x66	; 102
    2808:	46 e6       	ldi	r20, 0x66	; 102
    280a:	55 e4       	ldi	r21, 0x45	; 69
    280c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8f 83       	std	Y+7, r24	; 0x07
    2816:	98 87       	std	Y+8, r25	; 0x08
    2818:	a9 87       	std	Y+9, r26	; 0x09
    281a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    281c:	6f 81       	ldd	r22, Y+7	; 0x07
    281e:	78 85       	ldd	r23, Y+8	; 0x08
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <turnsoft+0x1da>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <turnsoft+0x258>
	else if (__tmp > 65535)
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <turnsoft+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6b 85       	ldd	r22, Y+11	; 0x0b
    2858:	7c 85       	ldd	r23, Y+12	; 0x0c
    285a:	8d 85       	ldd	r24, Y+13	; 0x0d
    285c:	9e 85       	ldd	r25, Y+14	; 0x0e
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	0f c0       	rjmp	.+30     	; 0x289e <turnsoft+0x23a>
    2880:	80 e7       	ldi	r24, 0x70	; 112
    2882:	91 e0       	ldi	r25, 0x01	; 1
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <turnsoft+0x228>
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <turnsoft+0x21c>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <turnsoft+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	8d 81       	ldd	r24, Y+5	; 0x05
    28be:	9e 81       	ldd	r25, Y+6	; 0x06
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <turnsoft+0x264>
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	// Update the direction reference and return it
	if(a==8||a==0)
    28d0:	80 91 02 02 	lds	r24, 0x0202
    28d4:	90 91 03 02 	lds	r25, 0x0203
    28d8:	88 30       	cpi	r24, 0x08	; 8
    28da:	91 05       	cpc	r25, r1
    28dc:	31 f0       	breq	.+12     	; 0x28ea <turnsoft+0x286>
    28de:	80 91 02 02 	lds	r24, 0x0202
    28e2:	90 91 03 02 	lds	r25, 0x0203
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	31 f4       	brne	.+12     	; 0x28f6 <turnsoft+0x292>
		a=4;
    28ea:	84 e0       	ldi	r24, 0x04	; 4
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	90 93 03 02 	sts	0x0203, r25
    28f2:	80 93 02 02 	sts	0x0202, r24
	return a;
    28f6:	80 91 02 02 	lds	r24, 0x0202
    28fa:	90 91 03 02 	lds	r25, 0x0203
}
    28fe:	6e 96       	adiw	r28, 0x1e	; 30
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <semiturn>:


/* Function to turn the robot towards its habitat */
void semiturn(int s)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	ea 97       	sbiw	r28, 0x3a	; 58
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	9a af       	std	Y+58, r25	; 0x3a
    2926:	89 af       	std	Y+57, r24	; 0x39
	/*
	Function Name: semiturn
	Input: s
	Output: None
	*/
	init_devices();
    2928:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
	if(s==1)
    292c:	89 ad       	ldd	r24, Y+57	; 0x39
    292e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	91 05       	cpc	r25, r1
    2934:	29 f4       	brne	.+10     	; 0x2940 <semiturn+0x30>
	{
		right_degrees(60);		
    2936:	8c e3       	ldi	r24, 0x3C	; 60
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <right_degrees>
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <semiturn+0x38>
		//soft_right_degrees(deg);
	}	
	else
		left_degrees(52);
    2940:	84 e3       	ldi	r24, 0x34	; 52
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <left_degrees>

	/* Move inside the habitat, drop the animal and come back */
	stop();
    2948:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a8 ec       	ldi	r26, 0xC8	; 200
    2952:	b2 e4       	ldi	r27, 0x42	; 66
    2954:	8d ab       	std	Y+53, r24	; 0x35
    2956:	9e ab       	std	Y+54, r25	; 0x36
    2958:	af ab       	std	Y+55, r26	; 0x37
    295a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6d a9       	ldd	r22, Y+53	; 0x35
    295e:	7e a9       	ldd	r23, Y+54	; 0x36
    2960:	8f a9       	ldd	r24, Y+55	; 0x37
    2962:	98 ad       	ldd	r25, Y+56	; 0x38
    2964:	26 e6       	ldi	r18, 0x66	; 102
    2966:	36 e6       	ldi	r19, 0x66	; 102
    2968:	46 e6       	ldi	r20, 0x66	; 102
    296a:	55 e4       	ldi	r21, 0x45	; 69
    296c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	89 ab       	std	Y+49, r24	; 0x31
    2976:	9a ab       	std	Y+50, r25	; 0x32
    2978:	ab ab       	std	Y+51, r26	; 0x33
    297a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    297c:	69 a9       	ldd	r22, Y+49	; 0x31
    297e:	7a a9       	ldd	r23, Y+50	; 0x32
    2980:	8b a9       	ldd	r24, Y+51	; 0x33
    2982:	9c a9       	ldd	r25, Y+52	; 0x34
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <semiturn+0x8e>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	98 ab       	std	Y+48, r25	; 0x30
    299a:	8f a7       	std	Y+47, r24	; 0x2f
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <semiturn+0x10c>
	else if (__tmp > 65535)
    299e:	69 a9       	ldd	r22, Y+49	; 0x31
    29a0:	7a a9       	ldd	r23, Y+50	; 0x32
    29a2:	8b a9       	ldd	r24, Y+51	; 0x33
    29a4:	9c a9       	ldd	r25, Y+52	; 0x34
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <semiturn+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6d a9       	ldd	r22, Y+53	; 0x35
    29b8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ba:	8f a9       	ldd	r24, Y+55	; 0x37
    29bc:	98 ad       	ldd	r25, Y+56	; 0x38
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	98 ab       	std	Y+48, r25	; 0x30
    29dc:	8f a7       	std	Y+47, r24	; 0x2f
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <semiturn+0xee>
    29e0:	80 e7       	ldi	r24, 0x70	; 112
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	9e a7       	std	Y+46, r25	; 0x2e
    29e6:	8d a7       	std	Y+45, r24	; 0x2d
    29e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <semiturn+0xdc>
    29f0:	9e a7       	std	Y+46, r25	; 0x2e
    29f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f6:	98 a9       	ldd	r25, Y+48	; 0x30
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	98 ab       	std	Y+48, r25	; 0x30
    29fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a00:	98 a9       	ldd	r25, Y+48	; 0x30
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <semiturn+0xd0>
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <semiturn+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a10:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	98 ab       	std	Y+48, r25	; 0x30
    2a1a:	8f a7       	std	Y+47, r24	; 0x2f
    2a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a20:	9c a7       	std	Y+44, r25	; 0x2c
    2a22:	8b a7       	std	Y+43, r24	; 0x2b
    2a24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a26:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <semiturn+0x118>
    2a2c:	9c a7       	std	Y+44, r25	; 0x2c
    2a2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	if(b==1)		//If 2 animals have the same habitat
    2a30:	80 91 26 03 	lds	r24, 0x0326
    2a34:	90 91 27 03 	lds	r25, 0x0327
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	29 f4       	brne	.+10     	; 0x2a48 <semiturn+0x138>
	    forward_mm(55);
    2a3e:	87 e3       	ldi	r24, 0x37	; 55
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <semiturn+0x140>
	else
	    forward_mm(60);
    2a48:	8c e3       	ldi	r24, 0x3C	; 60
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
	drop();
    2a50:	0e 94 2a 31 	call	0x6254	; 0x6254 <drop>
	if(b==1)
    2a54:	80 91 26 03 	lds	r24, 0x0326
    2a58:	90 91 27 03 	lds	r25, 0x0327
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	91 05       	cpc	r25, r1
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <semiturn+0x15c>
	   back_mm(60);
    2a62:	8c e3       	ldi	r24, 0x3C	; 60
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <semiturn+0x164>
	else
	   back_mm(70);
    2a6c:	86 e4       	ldi	r24, 0x46	; 70
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
	stop();
    2a74:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a2 ed       	ldi	r26, 0xD2	; 210
    2a7e:	b2 e4       	ldi	r27, 0x42	; 66
    2a80:	8f a3       	std	Y+39, r24	; 0x27
    2a82:	98 a7       	std	Y+40, r25	; 0x28
    2a84:	a9 a7       	std	Y+41, r26	; 0x29
    2a86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	6f a1       	ldd	r22, Y+39	; 0x27
    2a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a90:	26 e6       	ldi	r18, 0x66	; 102
    2a92:	36 e6       	ldi	r19, 0x66	; 102
    2a94:	46 e6       	ldi	r20, 0x66	; 102
    2a96:	55 e4       	ldi	r21, 0x45	; 69
    2a98:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	8b a3       	std	Y+35, r24	; 0x23
    2aa2:	9c a3       	std	Y+36, r25	; 0x24
    2aa4:	ad a3       	std	Y+37, r26	; 0x25
    2aa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    2aac:	8d a1       	ldd	r24, Y+37	; 0x25
    2aae:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <semiturn+0x1ba>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9a a3       	std	Y+34, r25	; 0x22
    2ac6:	89 a3       	std	Y+33, r24	; 0x21
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <semiturn+0x238>
	else if (__tmp > 65535)
    2aca:	6b a1       	ldd	r22, Y+35	; 0x23
    2acc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ace:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <semiturn+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ae8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a a3       	std	Y+34, r25	; 0x22
    2b08:	89 a3       	std	Y+33, r24	; 0x21
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <semiturn+0x21a>
    2b0c:	80 e7       	ldi	r24, 0x70	; 112
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	98 a3       	std	Y+32, r25	; 0x20
    2b12:	8f 8f       	std	Y+31, r24	; 0x1f
    2b14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b16:	98 a1       	ldd	r25, Y+32	; 0x20
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <semiturn+0x208>
    2b1c:	98 a3       	std	Y+32, r25	; 0x20
    2b1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	89 a1       	ldd	r24, Y+33	; 0x21
    2b22:	9a a1       	ldd	r25, Y+34	; 0x22
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	9a a3       	std	Y+34, r25	; 0x22
    2b28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <semiturn+0x1fc>
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <semiturn+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	6b a1       	ldd	r22, Y+35	; 0x23
    2b36:	7c a1       	ldd	r23, Y+36	; 0x24
    2b38:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9a a3       	std	Y+34, r25	; 0x22
    2b46:	89 a3       	std	Y+33, r24	; 0x21
    2b48:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <semiturn+0x244>
    2b58:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(105);
	if(s==1)
    2b5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	91 05       	cpc	r25, r1
    2b64:	29 f4       	brne	.+10     	; 0x2b70 <semiturn+0x260>
	{  
		left_degrees(35);	
    2b66:	83 e2       	ldi	r24, 0x23	; 35
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <left_degrees>
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <semiturn+0x268>
	}		
	else
		right_degrees(37);
    2b70:	85 e2       	ldi	r24, 0x25	; 37
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <right_degrees>
	stop();
    2b78:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a8 e4       	ldi	r26, 0x48	; 72
    2b82:	b2 e4       	ldi	r27, 0x42	; 66
    2b84:	89 8f       	std	Y+25, r24	; 0x19
    2b86:	9a 8f       	std	Y+26, r25	; 0x1a
    2b88:	ab 8f       	std	Y+27, r26	; 0x1b
    2b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b94:	26 e6       	ldi	r18, 0x66	; 102
    2b96:	36 e6       	ldi	r19, 0x66	; 102
    2b98:	46 e6       	ldi	r20, 0x66	; 102
    2b9a:	55 e4       	ldi	r21, 0x45	; 69
    2b9c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8d 8b       	std	Y+21, r24	; 0x15
    2ba6:	9e 8b       	std	Y+22, r25	; 0x16
    2ba8:	af 8b       	std	Y+23, r26	; 0x17
    2baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bac:	6d 89       	ldd	r22, Y+21	; 0x15
    2bae:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <semiturn+0x2be>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <semiturn+0x33c>
	else if (__tmp > 65535)
    2bce:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <semiturn+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	69 8d       	ldd	r22, Y+25	; 0x19
    2be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <semiturn+0x31e>
    2c10:	80 e7       	ldi	r24, 0x70	; 112
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	9a 8b       	std	Y+18, r25	; 0x12
    2c16:	89 8b       	std	Y+17, r24	; 0x11
    2c18:	89 89       	ldd	r24, Y+17	; 0x11
    2c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <semiturn+0x30c>
    2c20:	9a 8b       	std	Y+18, r25	; 0x12
    2c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9c 8b       	std	Y+20, r25	; 0x14
    2c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c30:	9c 89       	ldd	r25, Y+20	; 0x14
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <semiturn+0x300>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <semiturn+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c50:	98 8b       	std	Y+16, r25	; 0x10
    2c52:	8f 87       	std	Y+15, r24	; 0x0f
    2c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c56:	98 89       	ldd	r25, Y+16	; 0x10
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <semiturn+0x348>
    2c5c:	98 8b       	std	Y+16, r25	; 0x10
    2c5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	back_mm(21);
    2c60:	85 e1       	ldi	r24, 0x15	; 21
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
	stop();
    2c68:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	a8 e4       	ldi	r26, 0x48	; 72
    2c72:	b2 e4       	ldi	r27, 0x42	; 66
    2c74:	8b 87       	std	Y+11, r24	; 0x0b
    2c76:	9c 87       	std	Y+12, r25	; 0x0c
    2c78:	ad 87       	std	Y+13, r26	; 0x0d
    2c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c84:	26 e6       	ldi	r18, 0x66	; 102
    2c86:	36 e6       	ldi	r19, 0x66	; 102
    2c88:	46 e6       	ldi	r20, 0x66	; 102
    2c8a:	55 e4       	ldi	r21, 0x45	; 69
    2c8c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	8f 83       	std	Y+7, r24	; 0x07
    2c96:	98 87       	std	Y+8, r25	; 0x08
    2c98:	a9 87       	std	Y+9, r26	; 0x09
    2c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e8       	ldi	r20, 0x80	; 128
    2caa:	5f e3       	ldi	r21, 0x3F	; 63
    2cac:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    2cb0:	88 23       	and	r24, r24
    2cb2:	2c f4       	brge	.+10     	; 0x2cbe <semiturn+0x3ae>
		__ticks = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	3f c0       	rjmp	.+126    	; 0x2d3c <semiturn+0x42c>
	else if (__tmp > 65535)
    2cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc0:	78 85       	ldd	r23, Y+8	; 0x08
    2cc2:	89 85       	ldd	r24, Y+9	; 0x09
    2cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	3f ef       	ldi	r19, 0xFF	; 255
    2cca:	4f e7       	ldi	r20, 0x7F	; 127
    2ccc:	57 e4       	ldi	r21, 0x47	; 71
    2cce:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    2cd2:	18 16       	cp	r1, r24
    2cd4:	4c f5       	brge	.+82     	; 0x2d28 <semiturn+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e2       	ldi	r20, 0x20	; 32
    2ce4:	51 e4       	ldi	r21, 0x41	; 65
    2ce6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	0f c0       	rjmp	.+30     	; 0x2d1e <semiturn+0x40e>
    2d00:	80 e7       	ldi	r24, 0x70	; 112
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	9c 83       	std	Y+4, r25	; 0x04
    2d06:	8b 83       	std	Y+3, r24	; 0x03
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <semiturn+0x3fc>
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	69 f7       	brne	.-38     	; 0x2d00 <semiturn+0x3f0>
    2d26:	14 c0       	rjmp	.+40     	; 0x2d50 <semiturn+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d28:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2a:	78 85       	ldd	r23, Y+8	; 0x08
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	9a 81       	ldd	r25, Y+2	; 0x02
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <semiturn+0x438>
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	q=0;		//Make node-count flag to 0 after each drop
    2d50:	10 92 2f 03 	sts	0x032F, r1
    2d54:	10 92 2e 03 	sts	0x032E, r1
	return;
}
    2d58:	ea 96       	adiw	r28, 0x3a	; 58
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	cf 91       	pop	r28
    2d66:	df 91       	pop	r29
    2d68:	08 95       	ret

00002d6a <facing>:

/* Updates the direction flags based on direction reference value passed*/
void facing(int a)
{
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	0f 92       	push	r0
    2d70:	0f 92       	push	r0
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	9a 83       	std	Y+2, r25	; 0x02
    2d78:	89 83       	std	Y+1, r24	; 0x01
	/*
	Function Name: facing
	Input: a
	Output: None
	*/
	if(a%4==0) // facing front
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	83 70       	andi	r24, 0x03	; 3
    2d80:	90 70       	andi	r25, 0x00	; 0
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	b9 f4       	brne	.+46     	; 0x2db4 <facing+0x4a>
	{
		l=0;
    2d86:	10 92 2b 03 	sts	0x032B, r1
    2d8a:	10 92 2a 03 	sts	0x032A, r1
		f=1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	90 93 01 02 	sts	0x0201, r25
    2d96:	80 93 00 02 	sts	0x0200, r24
		r=b=0;
    2d9a:	10 92 27 03 	sts	0x0327, r1
    2d9e:	10 92 26 03 	sts	0x0326, r1
    2da2:	80 91 26 03 	lds	r24, 0x0326
    2da6:	90 91 27 03 	lds	r25, 0x0327
    2daa:	90 93 29 03 	sts	0x0329, r25
    2dae:	80 93 28 03 	sts	0x0328, r24
    2db2:	6e c0       	rjmp	.+220    	; 0x2e90 <facing+0x126>
	}
	else if(a%4==2) // facing back
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	24 e0       	ldi	r18, 0x04	; 4
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	d9 f4       	brne	.+54     	; 0x2dfe <facing+0x94>
	{
		l=f=r=0;
    2dc8:	10 92 29 03 	sts	0x0329, r1
    2dcc:	10 92 28 03 	sts	0x0328, r1
    2dd0:	80 91 28 03 	lds	r24, 0x0328
    2dd4:	90 91 29 03 	lds	r25, 0x0329
    2dd8:	90 93 01 02 	sts	0x0201, r25
    2ddc:	80 93 00 02 	sts	0x0200, r24
    2de0:	80 91 00 02 	lds	r24, 0x0200
    2de4:	90 91 01 02 	lds	r25, 0x0201
    2de8:	90 93 2b 03 	sts	0x032B, r25
    2dec:	80 93 2a 03 	sts	0x032A, r24
		b=1;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	90 93 27 03 	sts	0x0327, r25
    2df8:	80 93 26 03 	sts	0x0326, r24
    2dfc:	49 c0       	rjmp	.+146    	; 0x2e90 <facing+0x126>
	}
	else if(a%4==1) // facing right
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	9a 81       	ldd	r25, Y+2	; 0x02
    2e02:	24 e0       	ldi	r18, 0x04	; 4
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	b9 01       	movw	r22, r18
    2e08:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	91 05       	cpc	r25, r1
    2e10:	d9 f4       	brne	.+54     	; 0x2e48 <facing+0xde>
	{
		r=1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	90 93 29 03 	sts	0x0329, r25
    2e1a:	80 93 28 03 	sts	0x0328, r24
		f=b=l=0;
    2e1e:	10 92 2b 03 	sts	0x032B, r1
    2e22:	10 92 2a 03 	sts	0x032A, r1
    2e26:	80 91 2a 03 	lds	r24, 0x032A
    2e2a:	90 91 2b 03 	lds	r25, 0x032B
    2e2e:	90 93 27 03 	sts	0x0327, r25
    2e32:	80 93 26 03 	sts	0x0326, r24
    2e36:	80 91 26 03 	lds	r24, 0x0326
    2e3a:	90 91 27 03 	lds	r25, 0x0327
    2e3e:	90 93 01 02 	sts	0x0201, r25
    2e42:	80 93 00 02 	sts	0x0200, r24
    2e46:	24 c0       	rjmp	.+72     	; 0x2e90 <facing+0x126>
	}
	else if(a%4==3) // facing left
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	24 e0       	ldi	r18, 0x04	; 4
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	b9 01       	movw	r22, r18
    2e52:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    2e56:	83 30       	cpi	r24, 0x03	; 3
    2e58:	91 05       	cpc	r25, r1
    2e5a:	d1 f4       	brne	.+52     	; 0x2e90 <facing+0x126>
	{
		l=1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	90 93 2b 03 	sts	0x032B, r25
    2e64:	80 93 2a 03 	sts	0x032A, r24
		f=b=r=0;
    2e68:	10 92 29 03 	sts	0x0329, r1
    2e6c:	10 92 28 03 	sts	0x0328, r1
    2e70:	80 91 28 03 	lds	r24, 0x0328
    2e74:	90 91 29 03 	lds	r25, 0x0329
    2e78:	90 93 27 03 	sts	0x0327, r25
    2e7c:	80 93 26 03 	sts	0x0326, r24
    2e80:	80 91 26 03 	lds	r24, 0x0326
    2e84:	90 91 27 03 	lds	r25, 0x0327
    2e88:	90 93 01 02 	sts	0x0201, r25
    2e8c:	80 93 00 02 	sts	0x0200, r24
	}
	return;
}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <path>:


/* Move the robot from source(x,y) to destination (rx,ry)*/
void path(int x,int y,int rx,int ry)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	28 97       	sbiw	r28, 0x08	; 8
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	9a 83       	std	Y+2, r25	; 0x02
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	7c 83       	std	Y+4, r23	; 0x04
    2eb4:	6b 83       	std	Y+3, r22	; 0x03
    2eb6:	5e 83       	std	Y+6, r21	; 0x06
    2eb8:	4d 83       	std	Y+5, r20	; 0x05
    2eba:	38 87       	std	Y+8, r19	; 0x08
    2ebc:	2f 83       	std	Y+7, r18	; 0x07
	/*
	Function Name: path
	Input: x,y,rx,ry
	Output: None
	*/
	if(b==1) // Swap the direction flags if robot is facing backward
    2ebe:	80 91 26 03 	lds	r24, 0x0326
    2ec2:	90 91 27 03 	lds	r25, 0x0327
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	91 05       	cpc	r25, r1
    2eca:	c1 f4       	brne	.+48     	; 0x2efc <path+0x62>
	{
		p=r;r=l;l=p;
    2ecc:	80 91 28 03 	lds	r24, 0x0328
    2ed0:	90 91 29 03 	lds	r25, 0x0329
    2ed4:	90 93 2d 03 	sts	0x032D, r25
    2ed8:	80 93 2c 03 	sts	0x032C, r24
    2edc:	80 91 2a 03 	lds	r24, 0x032A
    2ee0:	90 91 2b 03 	lds	r25, 0x032B
    2ee4:	90 93 29 03 	sts	0x0329, r25
    2ee8:	80 93 28 03 	sts	0x0328, r24
    2eec:	80 91 2c 03 	lds	r24, 0x032C
    2ef0:	90 91 2d 03 	lds	r25, 0x032D
    2ef4:	90 93 2b 03 	sts	0x032B, r25
    2ef8:	80 93 2a 03 	sts	0x032A, r24
	}
	if(x==rx) // If destination has the same x-coordinate as source
    2efc:	29 81       	ldd	r18, Y+1	; 0x01
    2efe:	3a 81       	ldd	r19, Y+2	; 0x02
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
    2f02:	9e 81       	ldd	r25, Y+6	; 0x06
    2f04:	28 17       	cp	r18, r24
    2f06:	39 07       	cpc	r19, r25
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <path+0x72>
    2f0a:	85 c0       	rjmp	.+266    	; 0x3016 <path+0x17c>
	{
		if(ry>y) // If destination y-coordinate is greater than source
    2f0c:	2f 81       	ldd	r18, Y+7	; 0x07
    2f0e:	38 85       	ldd	r19, Y+8	; 0x08
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	82 17       	cp	r24, r18
    2f16:	93 07       	cpc	r25, r19
    2f18:	dc f5       	brge	.+118    	; 0x2f90 <path+0xf6>
		{
			/* Turn the robot along y-direction */
			if(r==1 || l==1)
    2f1a:	80 91 28 03 	lds	r24, 0x0328
    2f1e:	90 91 29 03 	lds	r25, 0x0329
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	91 05       	cpc	r25, r1
    2f26:	39 f0       	breq	.+14     	; 0x2f36 <path+0x9c>
    2f28:	80 91 2a 03 	lds	r24, 0x032A
    2f2c:	90 91 2b 03 	lds	r25, 0x032B
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	91 05       	cpc	r25, r1
    2f34:	89 f4       	brne	.+34     	; 0x2f58 <path+0xbe>
			{
				a=turn(l);
    2f36:	80 91 2a 03 	lds	r24, 0x032A
    2f3a:	90 91 2b 03 	lds	r25, 0x032B
    2f3e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    2f42:	90 93 03 02 	sts	0x0203, r25
    2f46:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2f4a:	80 91 02 02 	lds	r24, 0x0202
    2f4e:	90 91 03 02 	lds	r25, 0x0203
    2f52:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
    2f56:	13 c0       	rjmp	.+38     	; 0x2f7e <path+0xe4>
			}
			else if(b==1)
    2f58:	80 91 26 03 	lds	r24, 0x0326
    2f5c:	90 91 27 03 	lds	r25, 0x0327
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	91 05       	cpc	r25, r1
    2f64:	61 f4       	brne	.+24     	; 0x2f7e <path+0xe4>
			{
				a=turn_180();
    2f66:	0e 94 17 11 	call	0x222e	; 0x222e <turn_180>
    2f6a:	90 93 03 02 	sts	0x0203, r25
    2f6e:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2f72:	80 91 02 02 	lds	r24, 0x0202
    2f76:	90 91 03 02 	lds	r25, 0x0203
    2f7a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
			}

			// Move straight for ry-y nodes
			straight(ry-y);
    2f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f80:	98 85       	ldd	r25, Y+8	; 0x08
    2f82:	2b 81       	ldd	r18, Y+3	; 0x03
    2f84:	3c 81       	ldd	r19, Y+4	; 0x04
    2f86:	82 1b       	sub	r24, r18
    2f88:	93 0b       	sbc	r25, r19
    2f8a:	0e 94 06 11 	call	0x220c	; 0x220c <straight>
    2f8e:	d8 c0       	rjmp	.+432    	; 0x3140 <path+0x2a6>
		}
		else if(ry<y) // If destination y-coordinate is lesser than source
    2f90:	2f 81       	ldd	r18, Y+7	; 0x07
    2f92:	38 85       	ldd	r19, Y+8	; 0x08
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	28 17       	cp	r18, r24
    2f9a:	39 07       	cpc	r19, r25
    2f9c:	0c f0       	brlt	.+2      	; 0x2fa0 <path+0x106>
    2f9e:	d0 c0       	rjmp	.+416    	; 0x3140 <path+0x2a6>
		{
			/* Turn the robot along y-direction */
			if(r==1 || l==1)
    2fa0:	80 91 28 03 	lds	r24, 0x0328
    2fa4:	90 91 29 03 	lds	r25, 0x0329
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	91 05       	cpc	r25, r1
    2fac:	39 f0       	breq	.+14     	; 0x2fbc <path+0x122>
    2fae:	80 91 2a 03 	lds	r24, 0x032A
    2fb2:	90 91 2b 03 	lds	r25, 0x032B
    2fb6:	81 30       	cpi	r24, 0x01	; 1
    2fb8:	91 05       	cpc	r25, r1
    2fba:	89 f4       	brne	.+34     	; 0x2fde <path+0x144>
			{
				a=turn(r);
    2fbc:	80 91 28 03 	lds	r24, 0x0328
    2fc0:	90 91 29 03 	lds	r25, 0x0329
    2fc4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    2fc8:	90 93 03 02 	sts	0x0203, r25
    2fcc:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2fd0:	80 91 02 02 	lds	r24, 0x0202
    2fd4:	90 91 03 02 	lds	r25, 0x0203
    2fd8:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
    2fdc:	13 c0       	rjmp	.+38     	; 0x3004 <path+0x16a>
			}
			else if(f==1)
    2fde:	80 91 00 02 	lds	r24, 0x0200
    2fe2:	90 91 01 02 	lds	r25, 0x0201
    2fe6:	81 30       	cpi	r24, 0x01	; 1
    2fe8:	91 05       	cpc	r25, r1
    2fea:	61 f4       	brne	.+24     	; 0x3004 <path+0x16a>
			{
				a=turn_180();
    2fec:	0e 94 17 11 	call	0x222e	; 0x222e <turn_180>
    2ff0:	90 93 03 02 	sts	0x0203, r25
    2ff4:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    2ff8:	80 91 02 02 	lds	r24, 0x0202
    2ffc:	90 91 03 02 	lds	r25, 0x0203
    3000:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
			}

			// Move straight for y-ry nodes
			straight(y-ry);
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	2f 81       	ldd	r18, Y+7	; 0x07
    300a:	38 85       	ldd	r19, Y+8	; 0x08
    300c:	82 1b       	sub	r24, r18
    300e:	93 0b       	sbc	r25, r19
    3010:	0e 94 06 11 	call	0x220c	; 0x220c <straight>
    3014:	95 c0       	rjmp	.+298    	; 0x3140 <path+0x2a6>
		}
	}
	else if(rx>x) // If destination x-coordinate is greater than source
    3016:	2d 81       	ldd	r18, Y+5	; 0x05
    3018:	3e 81       	ldd	r19, Y+6	; 0x06
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	82 17       	cp	r24, r18
    3020:	93 07       	cpc	r25, r19
    3022:	0c f0       	brlt	.+2      	; 0x3026 <path+0x18c>
    3024:	47 c0       	rjmp	.+142    	; 0x30b4 <path+0x21a>
	{
		/* Turn the robot along x direction */
		if(r==0 && l==0)
    3026:	80 91 28 03 	lds	r24, 0x0328
    302a:	90 91 29 03 	lds	r25, 0x0329
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	b9 f4       	brne	.+46     	; 0x3060 <path+0x1c6>
    3032:	80 91 2a 03 	lds	r24, 0x032A
    3036:	90 91 2b 03 	lds	r25, 0x032B
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	89 f4       	brne	.+34     	; 0x3060 <path+0x1c6>
		{
			a=turn(f);
    303e:	80 91 00 02 	lds	r24, 0x0200
    3042:	90 91 01 02 	lds	r25, 0x0201
    3046:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    304a:	90 93 03 02 	sts	0x0203, r25
    304e:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    3052:	80 91 02 02 	lds	r24, 0x0202
    3056:	90 91 03 02 	lds	r25, 0x0203
    305a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
    305e:	13 c0       	rjmp	.+38     	; 0x3086 <path+0x1ec>
		}
		else if(l==1)
    3060:	80 91 2a 03 	lds	r24, 0x032A
    3064:	90 91 2b 03 	lds	r25, 0x032B
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	91 05       	cpc	r25, r1
    306c:	61 f4       	brne	.+24     	; 0x3086 <path+0x1ec>
		{
			a=turn_180();
    306e:	0e 94 17 11 	call	0x222e	; 0x222e <turn_180>
    3072:	90 93 03 02 	sts	0x0203, r25
    3076:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    307a:	80 91 02 02 	lds	r24, 0x0202
    307e:	90 91 03 02 	lds	r25, 0x0203
    3082:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
		}

		// Move straight for rx-x nodes
		straight(rx-x);
    3086:	2d 81       	ldd	r18, Y+5	; 0x05
    3088:	3e 81       	ldd	r19, Y+6	; 0x06
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	9a 81       	ldd	r25, Y+2	; 0x02
    308e:	a9 01       	movw	r20, r18
    3090:	48 1b       	sub	r20, r24
    3092:	59 0b       	sbc	r21, r25
    3094:	ca 01       	movw	r24, r20
    3096:	0e 94 06 11 	call	0x220c	; 0x220c <straight>
		// Recursively call the path function
		path(rx,y,rx,ry);
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	2b 81       	ldd	r18, Y+3	; 0x03
    30a0:	3c 81       	ldd	r19, Y+4	; 0x04
    30a2:	4d 81       	ldd	r20, Y+5	; 0x05
    30a4:	5e 81       	ldd	r21, Y+6	; 0x06
    30a6:	ef 81       	ldd	r30, Y+7	; 0x07
    30a8:	f8 85       	ldd	r31, Y+8	; 0x08
    30aa:	b9 01       	movw	r22, r18
    30ac:	9f 01       	movw	r18, r30
    30ae:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <path>
    30b2:	46 c0       	rjmp	.+140    	; 0x3140 <path+0x2a6>
	}
	else // If destination x-coordinate is lesser than source
	{
		/* Turn the robot along x direction */
		if(r==0 && l==0)
    30b4:	80 91 28 03 	lds	r24, 0x0328
    30b8:	90 91 29 03 	lds	r25, 0x0329
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	b9 f4       	brne	.+46     	; 0x30ee <path+0x254>
    30c0:	80 91 2a 03 	lds	r24, 0x032A
    30c4:	90 91 2b 03 	lds	r25, 0x032B
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	89 f4       	brne	.+34     	; 0x30ee <path+0x254>
		{
			a=turn(b);
    30cc:	80 91 26 03 	lds	r24, 0x0326
    30d0:	90 91 27 03 	lds	r25, 0x0327
    30d4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    30d8:	90 93 03 02 	sts	0x0203, r25
    30dc:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    30e0:	80 91 02 02 	lds	r24, 0x0202
    30e4:	90 91 03 02 	lds	r25, 0x0203
    30e8:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
    30ec:	13 c0       	rjmp	.+38     	; 0x3114 <path+0x27a>
		}
		else if(r==1)
    30ee:	80 91 28 03 	lds	r24, 0x0328
    30f2:	90 91 29 03 	lds	r25, 0x0329
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	91 05       	cpc	r25, r1
    30fa:	61 f4       	brne	.+24     	; 0x3114 <path+0x27a>
		{
			a=turn_180();
    30fc:	0e 94 17 11 	call	0x222e	; 0x222e <turn_180>
    3100:	90 93 03 02 	sts	0x0203, r25
    3104:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    3108:	80 91 02 02 	lds	r24, 0x0202
    310c:	90 91 03 02 	lds	r25, 0x0203
    3110:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
		}

		// Move straight for x-rx nodes
		straight(x-rx);
    3114:	29 81       	ldd	r18, Y+1	; 0x01
    3116:	3a 81       	ldd	r19, Y+2	; 0x02
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	a9 01       	movw	r20, r18
    311e:	48 1b       	sub	r20, r24
    3120:	59 0b       	sbc	r21, r25
    3122:	ca 01       	movw	r24, r20
    3124:	0e 94 06 11 	call	0x220c	; 0x220c <straight>
		// Recursively call the path function
		path(rx,y,rx,ry);
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	4d 81       	ldd	r20, Y+5	; 0x05
    3132:	5e 81       	ldd	r21, Y+6	; 0x06
    3134:	ef 81       	ldd	r30, Y+7	; 0x07
    3136:	f8 85       	ldd	r31, Y+8	; 0x08
    3138:	b9 01       	movw	r22, r18
    313a:	9f 01       	movw	r18, r30
    313c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <path>
	}
	return;
}
    3140:	28 96       	adiw	r28, 0x08	; 8
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <habidrop>:


/* Function to place the animals at their respective habitats */
void habidrop(int n,int x,int y)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	2c 97       	sbiw	r28, 0x0c	; 12
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	98 87       	std	Y+8, r25	; 0x08
    3168:	8f 83       	std	Y+7, r24	; 0x07
    316a:	7a 87       	std	Y+10, r23	; 0x0a
    316c:	69 87       	std	Y+9, r22	; 0x09
    316e:	5c 87       	std	Y+12, r21	; 0x0c
    3170:	4b 87       	std	Y+11, r20	; 0x0b
	/*
	Function Name: Habidrop
	Input: n,x,y
	Output: None
	*/
	int x11=n%5;
    3172:	8f 81       	ldd	r24, Y+7	; 0x07
    3174:	98 85       	ldd	r25, Y+8	; 0x08
    3176:	25 e0       	ldi	r18, 0x05	; 5
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	b9 01       	movw	r22, r18
    317c:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
	int y11=n/5;
    3184:	8f 81       	ldd	r24, Y+7	; 0x07
    3186:	98 85       	ldd	r25, Y+8	; 0x08
    3188:	25 e0       	ldi	r18, 0x05	; 5
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	b9 01       	movw	r22, r18
    318e:	0e 94 88 40 	call	0x8110	; 0x8110 <__divmodhi4>
    3192:	cb 01       	movw	r24, r22
    3194:	9c 83       	std	Y+4, r25	; 0x04
    3196:	8b 83       	std	Y+3, r24	; 0x03
	int node=0;
    3198:	1a 82       	std	Y+2, r1	; 0x02
    319a:	19 82       	std	Y+1, r1	; 0x01
	if(x==x11)
    319c:	29 85       	ldd	r18, Y+9	; 0x09
    319e:	3a 85       	ldd	r19, Y+10	; 0x0a
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	28 17       	cp	r18, r24
    31a6:	39 07       	cpc	r19, r25
    31a8:	09 f0       	breq	.+2      	; 0x31ac <habidrop+0x5a>
    31aa:	7b c0       	rjmp	.+246    	; 0x32a2 <habidrop+0x150>
	{
		if(y==y11) // Nearest node is bottom left corner of habitat
    31ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    31ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	28 17       	cp	r18, r24
    31b6:	39 07       	cpc	r19, r25
    31b8:	d1 f5       	brne	.+116    	; 0x322e <habidrop+0xdc>
		{
			node=1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
			/* Turn the robot towards the habitat */
			if(f==1)
    31c2:	80 91 00 02 	lds	r24, 0x0200
    31c6:	90 91 01 02 	lds	r25, 0x0201
    31ca:	81 30       	cpi	r24, 0x01	; 1
    31cc:	91 05       	cpc	r25, r1
    31ce:	39 f4       	brne	.+14     	; 0x31de <habidrop+0x8c>
				semiturn(f);
    31d0:	80 91 00 02 	lds	r24, 0x0200
    31d4:	90 91 01 02 	lds	r25, 0x0201
    31d8:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    31dc:	dc c0       	rjmp	.+440    	; 0x3396 <habidrop+0x244>
			else if(r==1)
    31de:	80 91 28 03 	lds	r24, 0x0328
    31e2:	90 91 29 03 	lds	r25, 0x0329
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	91 05       	cpc	r25, r1
    31ea:	39 f4       	brne	.+14     	; 0x31fa <habidrop+0xa8>
				semiturn(l);
    31ec:	80 91 2a 03 	lds	r24, 0x032A
    31f0:	90 91 2b 03 	lds	r25, 0x032B
    31f4:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    31f8:	ce c0       	rjmp	.+412    	; 0x3396 <habidrop+0x244>
			else
			{
				a=turn(l);
    31fa:	80 91 2a 03 	lds	r24, 0x032A
    31fe:	90 91 2b 03 	lds	r25, 0x032B
    3202:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    3206:	90 93 03 02 	sts	0x0203, r25
    320a:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    320e:	80 91 02 02 	lds	r24, 0x0202
    3212:	90 91 03 02 	lds	r25, 0x0203
    3216:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
				habidrop(n,x,y);
    321a:	8f 81       	ldd	r24, Y+7	; 0x07
    321c:	98 85       	ldd	r25, Y+8	; 0x08
    321e:	29 85       	ldd	r18, Y+9	; 0x09
    3220:	3a 85       	ldd	r19, Y+10	; 0x0a
    3222:	4b 85       	ldd	r20, Y+11	; 0x0b
    3224:	5c 85       	ldd	r21, Y+12	; 0x0c
    3226:	b9 01       	movw	r22, r18
    3228:	0e 94 a9 18 	call	0x3152	; 0x3152 <habidrop>
    322c:	b4 c0       	rjmp	.+360    	; 0x3396 <habidrop+0x244>
			}
		}
		else // Nearest node is top-left corner of habitat
		{
			node=4;
    322e:	84 e0       	ldi	r24, 0x04	; 4
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
			/* Turn the robot towards the habitat */
			if(b==1)
    3236:	80 91 26 03 	lds	r24, 0x0326
    323a:	90 91 27 03 	lds	r25, 0x0327
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	91 05       	cpc	r25, r1
    3242:	39 f4       	brne	.+14     	; 0x3252 <habidrop+0x100>
				semiturn(f);
    3244:	80 91 00 02 	lds	r24, 0x0200
    3248:	90 91 01 02 	lds	r25, 0x0201
    324c:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    3250:	a2 c0       	rjmp	.+324    	; 0x3396 <habidrop+0x244>
			else if(r==1)
    3252:	80 91 28 03 	lds	r24, 0x0328
    3256:	90 91 29 03 	lds	r25, 0x0329
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	91 05       	cpc	r25, r1
    325e:	39 f4       	brne	.+14     	; 0x326e <habidrop+0x11c>
				semiturn(r);
    3260:	80 91 28 03 	lds	r24, 0x0328
    3264:	90 91 29 03 	lds	r25, 0x0329
    3268:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    326c:	94 c0       	rjmp	.+296    	; 0x3396 <habidrop+0x244>
			else
			{
				a=turn(r);
    326e:	80 91 28 03 	lds	r24, 0x0328
    3272:	90 91 29 03 	lds	r25, 0x0329
    3276:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    327a:	90 93 03 02 	sts	0x0203, r25
    327e:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    3282:	80 91 02 02 	lds	r24, 0x0202
    3286:	90 91 03 02 	lds	r25, 0x0203
    328a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
				habidrop(n,x,y);
    328e:	8f 81       	ldd	r24, Y+7	; 0x07
    3290:	98 85       	ldd	r25, Y+8	; 0x08
    3292:	29 85       	ldd	r18, Y+9	; 0x09
    3294:	3a 85       	ldd	r19, Y+10	; 0x0a
    3296:	4b 85       	ldd	r20, Y+11	; 0x0b
    3298:	5c 85       	ldd	r21, Y+12	; 0x0c
    329a:	b9 01       	movw	r22, r18
    329c:	0e 94 a9 18 	call	0x3152	; 0x3152 <habidrop>
    32a0:	7a c0       	rjmp	.+244    	; 0x3396 <habidrop+0x244>
			}
		}
	}
	else
	{
		if(y==y11) // Nearest node is at bottom-right corner of habitat
    32a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    32a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	28 17       	cp	r18, r24
    32ac:	39 07       	cpc	r19, r25
    32ae:	d1 f5       	brne	.+116    	; 0x3324 <habidrop+0x1d2>
		{
			node=2;
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
			/* Turn the robot towards the habitat */
			if(l==1)
    32b8:	80 91 2a 03 	lds	r24, 0x032A
    32bc:	90 91 2b 03 	lds	r25, 0x032B
    32c0:	81 30       	cpi	r24, 0x01	; 1
    32c2:	91 05       	cpc	r25, r1
    32c4:	39 f4       	brne	.+14     	; 0x32d4 <habidrop+0x182>
				semiturn(l);
    32c6:	80 91 2a 03 	lds	r24, 0x032A
    32ca:	90 91 2b 03 	lds	r25, 0x032B
    32ce:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    32d2:	61 c0       	rjmp	.+194    	; 0x3396 <habidrop+0x244>
			else if(f==1)
    32d4:	80 91 00 02 	lds	r24, 0x0200
    32d8:	90 91 01 02 	lds	r25, 0x0201
    32dc:	81 30       	cpi	r24, 0x01	; 1
    32de:	91 05       	cpc	r25, r1
    32e0:	39 f4       	brne	.+14     	; 0x32f0 <habidrop+0x19e>
				semiturn(b);
    32e2:	80 91 26 03 	lds	r24, 0x0326
    32e6:	90 91 27 03 	lds	r25, 0x0327
    32ea:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    32ee:	53 c0       	rjmp	.+166    	; 0x3396 <habidrop+0x244>
			else
			{
				a=turn(b);
    32f0:	80 91 26 03 	lds	r24, 0x0326
    32f4:	90 91 27 03 	lds	r25, 0x0327
    32f8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    32fc:	90 93 03 02 	sts	0x0203, r25
    3300:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    3304:	80 91 02 02 	lds	r24, 0x0202
    3308:	90 91 03 02 	lds	r25, 0x0203
    330c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
				habidrop(n,x,y);
    3310:	8f 81       	ldd	r24, Y+7	; 0x07
    3312:	98 85       	ldd	r25, Y+8	; 0x08
    3314:	29 85       	ldd	r18, Y+9	; 0x09
    3316:	3a 85       	ldd	r19, Y+10	; 0x0a
    3318:	4b 85       	ldd	r20, Y+11	; 0x0b
    331a:	5c 85       	ldd	r21, Y+12	; 0x0c
    331c:	b9 01       	movw	r22, r18
    331e:	0e 94 a9 18 	call	0x3152	; 0x3152 <habidrop>
    3322:	39 c0       	rjmp	.+114    	; 0x3396 <habidrop+0x244>
			}
		}
		else // Nearest node is at top-right corner of habitat
		{
			node=3;
    3324:	83 e0       	ldi	r24, 0x03	; 3
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	9a 83       	std	Y+2, r25	; 0x02
    332a:	89 83       	std	Y+1, r24	; 0x01
			/* Turn the robot towards the habitat */
			if(b==1)
    332c:	80 91 26 03 	lds	r24, 0x0326
    3330:	90 91 27 03 	lds	r25, 0x0327
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	91 05       	cpc	r25, r1
    3338:	39 f4       	brne	.+14     	; 0x3348 <habidrop+0x1f6>
				semiturn(b);
    333a:	80 91 26 03 	lds	r24, 0x0326
    333e:	90 91 27 03 	lds	r25, 0x0327
    3342:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    3346:	27 c0       	rjmp	.+78     	; 0x3396 <habidrop+0x244>
			else if(l==1)
    3348:	80 91 2a 03 	lds	r24, 0x032A
    334c:	90 91 2b 03 	lds	r25, 0x032B
    3350:	81 30       	cpi	r24, 0x01	; 1
    3352:	91 05       	cpc	r25, r1
    3354:	39 f4       	brne	.+14     	; 0x3364 <habidrop+0x212>
				semiturn(r);
    3356:	80 91 28 03 	lds	r24, 0x0328
    335a:	90 91 29 03 	lds	r25, 0x0329
    335e:	0e 94 88 14 	call	0x2910	; 0x2910 <semiturn>
    3362:	19 c0       	rjmp	.+50     	; 0x3396 <habidrop+0x244>
			else
			{
				a=turn(b);
    3364:	80 91 26 03 	lds	r24, 0x0326
    3368:	90 91 27 03 	lds	r25, 0x0327
    336c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <turn>
    3370:	90 93 03 02 	sts	0x0203, r25
    3374:	80 93 02 02 	sts	0x0202, r24
				facing(a);
    3378:	80 91 02 02 	lds	r24, 0x0202
    337c:	90 91 03 02 	lds	r25, 0x0203
    3380:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
				habidrop(n,x,y);
    3384:	8f 81       	ldd	r24, Y+7	; 0x07
    3386:	98 85       	ldd	r25, Y+8	; 0x08
    3388:	29 85       	ldd	r18, Y+9	; 0x09
    338a:	3a 85       	ldd	r19, Y+10	; 0x0a
    338c:	4b 85       	ldd	r20, Y+11	; 0x0b
    338e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3390:	b9 01       	movw	r22, r18
    3392:	0e 94 a9 18 	call	0x3152	; 0x3152 <habidrop>
			}
		}
	}
	return;
}
    3396:	2c 96       	adiw	r28, 0x0c	; 12
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <anipick>:



/* Function to pick the animals at given location (pos) */
void anipick(char* pos)
{
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	ca 58       	subi	r28, 0x8A	; 138
    33b6:	d1 40       	sbci	r29, 0x01	; 1
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	fe 01       	movw	r30, r28
    33c4:	e7 57       	subi	r30, 0x77	; 119
    33c6:	fe 4f       	sbci	r31, 0xFE	; 254
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	80 83       	st	Z, r24
	/*
	Function Name: anipick
	Input: pos
	Output: None
	*/
	init_devices();
    33cc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
	if(pos[0]=='A') // If animal is at left side of arena
    33d0:	fe 01       	movw	r30, r28
    33d2:	e7 57       	subi	r30, 0x77	; 119
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	01 90       	ld	r0, Z+
    33d8:	f0 81       	ld	r31, Z
    33da:	e0 2d       	mov	r30, r0
    33dc:	80 81       	ld	r24, Z
    33de:	81 34       	cpi	r24, 0x41	; 65
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <anipick+0x3c>
    33e2:	9b c7       	rjmp	.+3894   	; 0x431a <anipick+0xf72>
	{
		if(b==1 || f==1)
    33e4:	80 91 26 03 	lds	r24, 0x0326
    33e8:	90 91 27 03 	lds	r25, 0x0327
    33ec:	81 30       	cpi	r24, 0x01	; 1
    33ee:	91 05       	cpc	r25, r1
    33f0:	41 f0       	breq	.+16     	; 0x3402 <anipick+0x5a>
    33f2:	80 91 00 02 	lds	r24, 0x0200
    33f6:	90 91 01 02 	lds	r25, 0x0201
    33fa:	81 30       	cpi	r24, 0x01	; 1
    33fc:	91 05       	cpc	r25, r1
    33fe:	09 f0       	breq	.+2      	; 0x3402 <anipick+0x5a>
    3400:	14 c6       	rjmp	.+3112   	; 0x402a <anipick+0xc82>
		{  
			if(pos[1]!='1')		// Normal cases
    3402:	fe 01       	movw	r30, r28
    3404:	e7 57       	subi	r30, 0x77	; 119
    3406:	fe 4f       	sbci	r31, 0xFE	; 254
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	fc 01       	movw	r30, r24
    340e:	31 96       	adiw	r30, 0x01	; 1
    3410:	80 81       	ld	r24, Z
    3412:	81 33       	cpi	r24, 0x31	; 49
    3414:	09 f4       	brne	.+2      	; 0x3418 <anipick+0x70>
    3416:	88 c1       	rjmp	.+784    	; 0x3728 <anipick+0x380>
			{
			   a=turnsoft(b);
    3418:	80 91 26 03 	lds	r24, 0x0326
    341c:	90 91 27 03 	lds	r25, 0x0327
    3420:	0e 94 32 13 	call	0x2664	; 0x2664 <turnsoft>
    3424:	90 93 03 02 	sts	0x0203, r25
    3428:	80 93 02 02 	sts	0x0202, r24
			   facing(a);
    342c:	80 91 02 02 	lds	r24, 0x0202
    3430:	90 91 03 02 	lds	r25, 0x0203
    3434:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
			   forward_mm(25);
    3438:	89 e1       	ldi	r24, 0x19	; 25
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
			   stop();
    3440:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    3444:	fe 01       	movw	r30, r28
    3446:	eb 57       	subi	r30, 0x7B	; 123
    3448:	fe 4f       	sbci	r31, 0xFE	; 254
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a8 e4       	ldi	r26, 0x48	; 72
    3450:	b2 e4       	ldi	r27, 0x42	; 66
    3452:	80 83       	st	Z, r24
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	a2 83       	std	Z+2, r26	; 0x02
    3458:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345a:	8e 01       	movw	r16, r28
    345c:	0f 57       	subi	r16, 0x7F	; 127
    345e:	1e 4f       	sbci	r17, 0xFE	; 254
    3460:	fe 01       	movw	r30, r28
    3462:	eb 57       	subi	r30, 0x7B	; 123
    3464:	fe 4f       	sbci	r31, 0xFE	; 254
    3466:	60 81       	ld	r22, Z
    3468:	71 81       	ldd	r23, Z+1	; 0x01
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	93 81       	ldd	r25, Z+3	; 0x03
    346e:	26 e6       	ldi	r18, 0x66	; 102
    3470:	36 e6       	ldi	r19, 0x66	; 102
    3472:	46 e6       	ldi	r20, 0x66	; 102
    3474:	55 e4       	ldi	r21, 0x45	; 69
    3476:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	f8 01       	movw	r30, r16
    3480:	80 83       	st	Z, r24
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	a2 83       	std	Z+2, r26	; 0x02
    3486:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3488:	fe 01       	movw	r30, r28
    348a:	ef 57       	subi	r30, 0x7F	; 127
    348c:	fe 4f       	sbci	r31, 0xFE	; 254
    348e:	60 81       	ld	r22, Z
    3490:	71 81       	ldd	r23, Z+1	; 0x01
    3492:	82 81       	ldd	r24, Z+2	; 0x02
    3494:	93 81       	ldd	r25, Z+3	; 0x03
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	44 f4       	brge	.+16     	; 0x34b6 <anipick+0x10e>
		__ticks = 1;
    34a6:	fe 01       	movw	r30, r28
    34a8:	e1 58       	subi	r30, 0x81	; 129
    34aa:	fe 4f       	sbci	r31, 0xFE	; 254
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
    34b4:	64 c0       	rjmp	.+200    	; 0x357e <anipick+0x1d6>
	else if (__tmp > 65535)
    34b6:	fe 01       	movw	r30, r28
    34b8:	ef 57       	subi	r30, 0x7F	; 127
    34ba:	fe 4f       	sbci	r31, 0xFE	; 254
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	3f ef       	ldi	r19, 0xFF	; 255
    34c8:	4f e7       	ldi	r20, 0x7F	; 127
    34ca:	57 e4       	ldi	r21, 0x47	; 71
    34cc:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    34d0:	18 16       	cp	r1, r24
    34d2:	0c f0       	brlt	.+2      	; 0x34d6 <anipick+0x12e>
    34d4:	43 c0       	rjmp	.+134    	; 0x355c <anipick+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	fe 01       	movw	r30, r28
    34d8:	eb 57       	subi	r30, 0x7B	; 123
    34da:	fe 4f       	sbci	r31, 0xFE	; 254
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e2       	ldi	r20, 0x20	; 32
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8e 01       	movw	r16, r28
    34f6:	01 58       	subi	r16, 0x81	; 129
    34f8:	1e 4f       	sbci	r17, 0xFE	; 254
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	f8 01       	movw	r30, r16
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	80 83       	st	Z, r24
    350c:	1f c0       	rjmp	.+62     	; 0x354c <anipick+0x1a4>
    350e:	fe 01       	movw	r30, r28
    3510:	e3 58       	subi	r30, 0x83	; 131
    3512:	fe 4f       	sbci	r31, 0xFE	; 254
    3514:	80 e7       	ldi	r24, 0x70	; 112
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	fe 01       	movw	r30, r28
    351e:	e3 58       	subi	r30, 0x83	; 131
    3520:	fe 4f       	sbci	r31, 0xFE	; 254
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <anipick+0x17e>
    352a:	fe 01       	movw	r30, r28
    352c:	e3 58       	subi	r30, 0x83	; 131
    352e:	fe 4f       	sbci	r31, 0xFE	; 254
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3534:	de 01       	movw	r26, r28
    3536:	a1 58       	subi	r26, 0x81	; 129
    3538:	be 4f       	sbci	r27, 0xFE	; 254
    353a:	fe 01       	movw	r30, r28
    353c:	e1 58       	subi	r30, 0x81	; 129
    353e:	fe 4f       	sbci	r31, 0xFE	; 254
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	11 96       	adiw	r26, 0x01	; 1
    3548:	9c 93       	st	X, r25
    354a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	fe 01       	movw	r30, r28
    354e:	e1 58       	subi	r30, 0x81	; 129
    3550:	fe 4f       	sbci	r31, 0xFE	; 254
    3552:	80 81       	ld	r24, Z
    3554:	91 81       	ldd	r25, Z+1	; 0x01
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	d1 f6       	brne	.-76     	; 0x350e <anipick+0x166>
    355a:	27 c0       	rjmp	.+78     	; 0x35aa <anipick+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355c:	8e 01       	movw	r16, r28
    355e:	01 58       	subi	r16, 0x81	; 129
    3560:	1e 4f       	sbci	r17, 0xFE	; 254
    3562:	fe 01       	movw	r30, r28
    3564:	ef 57       	subi	r30, 0x7F	; 127
    3566:	fe 4f       	sbci	r31, 0xFE	; 254
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	f8 01       	movw	r30, r16
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	80 83       	st	Z, r24
    357e:	de 01       	movw	r26, r28
    3580:	a5 58       	subi	r26, 0x85	; 133
    3582:	be 4f       	sbci	r27, 0xFE	; 254
    3584:	fe 01       	movw	r30, r28
    3586:	e1 58       	subi	r30, 0x81	; 129
    3588:	fe 4f       	sbci	r31, 0xFE	; 254
    358a:	80 81       	ld	r24, Z
    358c:	91 81       	ldd	r25, Z+1	; 0x01
    358e:	8d 93       	st	X+, r24
    3590:	9c 93       	st	X, r25
    3592:	fe 01       	movw	r30, r28
    3594:	e5 58       	subi	r30, 0x85	; 133
    3596:	fe 4f       	sbci	r31, 0xFE	; 254
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <anipick+0x1f4>
    35a0:	fe 01       	movw	r30, r28
    35a2:	e5 58       	subi	r30, 0x85	; 133
    35a4:	fe 4f       	sbci	r31, 0xFE	; 254
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
			   _delay_ms(50);
			   pick();
    35aa:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
			   back_mm(85);
    35ae:	85 e5       	ldi	r24, 0x55	; 85
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
			   stop();
    35b6:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    35ba:	fe 01       	movw	r30, r28
    35bc:	e9 58       	subi	r30, 0x89	; 137
    35be:	fe 4f       	sbci	r31, 0xFE	; 254
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	a8 e4       	ldi	r26, 0x48	; 72
    35c6:	b2 e4       	ldi	r27, 0x42	; 66
    35c8:	80 83       	st	Z, r24
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	a2 83       	std	Z+2, r26	; 0x02
    35ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d0:	8e 01       	movw	r16, r28
    35d2:	0d 58       	subi	r16, 0x8D	; 141
    35d4:	1e 4f       	sbci	r17, 0xFE	; 254
    35d6:	fe 01       	movw	r30, r28
    35d8:	e9 58       	subi	r30, 0x89	; 137
    35da:	fe 4f       	sbci	r31, 0xFE	; 254
    35dc:	60 81       	ld	r22, Z
    35de:	71 81       	ldd	r23, Z+1	; 0x01
    35e0:	82 81       	ldd	r24, Z+2	; 0x02
    35e2:	93 81       	ldd	r25, Z+3	; 0x03
    35e4:	26 e6       	ldi	r18, 0x66	; 102
    35e6:	36 e6       	ldi	r19, 0x66	; 102
    35e8:	46 e6       	ldi	r20, 0x66	; 102
    35ea:	55 e4       	ldi	r21, 0x45	; 69
    35ec:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	f8 01       	movw	r30, r16
    35f6:	80 83       	st	Z, r24
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	a2 83       	std	Z+2, r26	; 0x02
    35fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35fe:	fe 01       	movw	r30, r28
    3600:	ed 58       	subi	r30, 0x8D	; 141
    3602:	fe 4f       	sbci	r31, 0xFE	; 254
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	44 f4       	brge	.+16     	; 0x362c <anipick+0x284>
		__ticks = 1;
    361c:	fe 01       	movw	r30, r28
    361e:	ef 58       	subi	r30, 0x8F	; 143
    3620:	fe 4f       	sbci	r31, 0xFE	; 254
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
    362a:	65 c0       	rjmp	.+202    	; 0x36f6 <anipick+0x34e>
	else if (__tmp > 65535)
    362c:	fe 01       	movw	r30, r28
    362e:	ed 58       	subi	r30, 0x8D	; 141
    3630:	fe 4f       	sbci	r31, 0xFE	; 254
    3632:	60 81       	ld	r22, Z
    3634:	71 81       	ldd	r23, Z+1	; 0x01
    3636:	82 81       	ldd	r24, Z+2	; 0x02
    3638:	93 81       	ldd	r25, Z+3	; 0x03
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	0c f0       	brlt	.+2      	; 0x364c <anipick+0x2a4>
    364a:	44 c0       	rjmp	.+136    	; 0x36d4 <anipick+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364c:	fe 01       	movw	r30, r28
    364e:	e9 58       	subi	r30, 0x89	; 137
    3650:	fe 4f       	sbci	r31, 0xFE	; 254
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	40 e2       	ldi	r20, 0x20	; 32
    3660:	51 e4       	ldi	r21, 0x41	; 65
    3662:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	8e 01       	movw	r16, r28
    366c:	0f 58       	subi	r16, 0x8F	; 143
    366e:	1e 4f       	sbci	r17, 0xFE	; 254
    3670:	bc 01       	movw	r22, r24
    3672:	cd 01       	movw	r24, r26
    3674:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	f8 01       	movw	r30, r16
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
    3682:	1f c0       	rjmp	.+62     	; 0x36c2 <anipick+0x31a>
    3684:	fe 01       	movw	r30, r28
    3686:	e1 59       	subi	r30, 0x91	; 145
    3688:	fe 4f       	sbci	r31, 0xFE	; 254
    368a:	80 e7       	ldi	r24, 0x70	; 112
    368c:	91 e0       	ldi	r25, 0x01	; 1
    368e:	91 83       	std	Z+1, r25	; 0x01
    3690:	80 83       	st	Z, r24
    3692:	fe 01       	movw	r30, r28
    3694:	e1 59       	subi	r30, 0x91	; 145
    3696:	fe 4f       	sbci	r31, 0xFE	; 254
    3698:	80 81       	ld	r24, Z
    369a:	91 81       	ldd	r25, Z+1	; 0x01
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	f1 f7       	brne	.-4      	; 0x369c <anipick+0x2f4>
    36a0:	fe 01       	movw	r30, r28
    36a2:	e1 59       	subi	r30, 0x91	; 145
    36a4:	fe 4f       	sbci	r31, 0xFE	; 254
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36aa:	de 01       	movw	r26, r28
    36ac:	af 58       	subi	r26, 0x8F	; 143
    36ae:	be 4f       	sbci	r27, 0xFE	; 254
    36b0:	fe 01       	movw	r30, r28
    36b2:	ef 58       	subi	r30, 0x8F	; 143
    36b4:	fe 4f       	sbci	r31, 0xFE	; 254
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	11 96       	adiw	r26, 0x01	; 1
    36be:	9c 93       	st	X, r25
    36c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c2:	fe 01       	movw	r30, r28
    36c4:	ef 58       	subi	r30, 0x8F	; 143
    36c6:	fe 4f       	sbci	r31, 0xFE	; 254
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	d1 f6       	brne	.-76     	; 0x3684 <anipick+0x2dc>
    36d0:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	8e 01       	movw	r16, r28
    36d6:	0f 58       	subi	r16, 0x8F	; 143
    36d8:	1e 4f       	sbci	r17, 0xFE	; 254
    36da:	fe 01       	movw	r30, r28
    36dc:	ed 58       	subi	r30, 0x8D	; 141
    36de:	fe 4f       	sbci	r31, 0xFE	; 254
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	f8 01       	movw	r30, r16
    36f2:	91 83       	std	Z+1, r25	; 0x01
    36f4:	80 83       	st	Z, r24
    36f6:	de 01       	movw	r26, r28
    36f8:	a3 59       	subi	r26, 0x93	; 147
    36fa:	be 4f       	sbci	r27, 0xFE	; 254
    36fc:	fe 01       	movw	r30, r28
    36fe:	ef 58       	subi	r30, 0x8F	; 143
    3700:	fe 4f       	sbci	r31, 0xFE	; 254
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	11 96       	adiw	r26, 0x01	; 1
    3708:	9c 93       	st	X, r25
    370a:	8e 93       	st	-X, r24
    370c:	fe 01       	movw	r30, r28
    370e:	e3 59       	subi	r30, 0x93	; 147
    3710:	fe 4f       	sbci	r31, 0xFE	; 254
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	f1 f7       	brne	.-4      	; 0x3716 <anipick+0x36e>
    371a:	fe 01       	movw	r30, r28
    371c:	e3 59       	subi	r30, 0x93	; 147
    371e:	fe 4f       	sbci	r31, 0xFE	; 254
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	80 83       	st	Z, r24
    3724:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			   _delay_ms(50);
			}			 
			/* Handling corner cases */
			else if(pos[1]=='6')
    3728:	fe 01       	movw	r30, r28
    372a:	e7 57       	subi	r30, 0x77	; 119
    372c:	fe 4f       	sbci	r31, 0xFE	; 254
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	fc 01       	movw	r30, r24
    3734:	31 96       	adiw	r30, 0x01	; 1
    3736:	80 81       	ld	r24, Z
    3738:	86 33       	cpi	r24, 0x36	; 54
    373a:	09 f0       	breq	.+2      	; 0x373e <anipick+0x396>
    373c:	c7 c0       	rjmp	.+398    	; 0x38cc <anipick+0x524>
			{
				soft_right_2_degrees(15);
    373e:	8f e0       	ldi	r24, 0x0F	; 15
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <soft_right_2_degrees>
				forward_mm(50);
    3746:	82 e3       	ldi	r24, 0x32	; 50
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				pick();
    374e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
				back_mm(35);
    3752:	83 e2       	ldi	r24, 0x23	; 35
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    375a:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    375e:	fe 01       	movw	r30, r28
    3760:	e7 59       	subi	r30, 0x97	; 151
    3762:	fe 4f       	sbci	r31, 0xFE	; 254
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	a8 ec       	ldi	r26, 0xC8	; 200
    376a:	b2 e4       	ldi	r27, 0x42	; 66
    376c:	80 83       	st	Z, r24
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	a2 83       	std	Z+2, r26	; 0x02
    3772:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3774:	8e 01       	movw	r16, r28
    3776:	0b 59       	subi	r16, 0x9B	; 155
    3778:	1e 4f       	sbci	r17, 0xFE	; 254
    377a:	fe 01       	movw	r30, r28
    377c:	e7 59       	subi	r30, 0x97	; 151
    377e:	fe 4f       	sbci	r31, 0xFE	; 254
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	26 e6       	ldi	r18, 0x66	; 102
    378a:	36 e6       	ldi	r19, 0x66	; 102
    378c:	46 e6       	ldi	r20, 0x66	; 102
    378e:	55 e4       	ldi	r21, 0x45	; 69
    3790:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	f8 01       	movw	r30, r16
    379a:	80 83       	st	Z, r24
    379c:	91 83       	std	Z+1, r25	; 0x01
    379e:	a2 83       	std	Z+2, r26	; 0x02
    37a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37a2:	fe 01       	movw	r30, r28
    37a4:	eb 59       	subi	r30, 0x9B	; 155
    37a6:	fe 4f       	sbci	r31, 0xFE	; 254
    37a8:	60 81       	ld	r22, Z
    37aa:	71 81       	ldd	r23, Z+1	; 0x01
    37ac:	82 81       	ldd	r24, Z+2	; 0x02
    37ae:	93 81       	ldd	r25, Z+3	; 0x03
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    37bc:	88 23       	and	r24, r24
    37be:	44 f4       	brge	.+16     	; 0x37d0 <anipick+0x428>
		__ticks = 1;
    37c0:	fe 01       	movw	r30, r28
    37c2:	ed 59       	subi	r30, 0x9D	; 157
    37c4:	fe 4f       	sbci	r31, 0xFE	; 254
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
    37ce:	65 c0       	rjmp	.+202    	; 0x389a <anipick+0x4f2>
	else if (__tmp > 65535)
    37d0:	fe 01       	movw	r30, r28
    37d2:	eb 59       	subi	r30, 0x9B	; 155
    37d4:	fe 4f       	sbci	r31, 0xFE	; 254
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	4f e7       	ldi	r20, 0x7F	; 127
    37e4:	57 e4       	ldi	r21, 0x47	; 71
    37e6:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	0c f0       	brlt	.+2      	; 0x37f0 <anipick+0x448>
    37ee:	44 c0       	rjmp	.+136    	; 0x3878 <anipick+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f0:	fe 01       	movw	r30, r28
    37f2:	e7 59       	subi	r30, 0x97	; 151
    37f4:	fe 4f       	sbci	r31, 0xFE	; 254
    37f6:	60 81       	ld	r22, Z
    37f8:	71 81       	ldd	r23, Z+1	; 0x01
    37fa:	82 81       	ldd	r24, Z+2	; 0x02
    37fc:	93 81       	ldd	r25, Z+3	; 0x03
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e2       	ldi	r20, 0x20	; 32
    3804:	51 e4       	ldi	r21, 0x41	; 65
    3806:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8e 01       	movw	r16, r28
    3810:	0d 59       	subi	r16, 0x9D	; 157
    3812:	1e 4f       	sbci	r17, 0xFE	; 254
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	f8 01       	movw	r30, r16
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	1f c0       	rjmp	.+62     	; 0x3866 <anipick+0x4be>
    3828:	fe 01       	movw	r30, r28
    382a:	ef 59       	subi	r30, 0x9F	; 159
    382c:	fe 4f       	sbci	r31, 0xFE	; 254
    382e:	80 e7       	ldi	r24, 0x70	; 112
    3830:	91 e0       	ldi	r25, 0x01	; 1
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	fe 01       	movw	r30, r28
    3838:	ef 59       	subi	r30, 0x9F	; 159
    383a:	fe 4f       	sbci	r31, 0xFE	; 254
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <anipick+0x498>
    3844:	fe 01       	movw	r30, r28
    3846:	ef 59       	subi	r30, 0x9F	; 159
    3848:	fe 4f       	sbci	r31, 0xFE	; 254
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	de 01       	movw	r26, r28
    3850:	ad 59       	subi	r26, 0x9D	; 157
    3852:	be 4f       	sbci	r27, 0xFE	; 254
    3854:	fe 01       	movw	r30, r28
    3856:	ed 59       	subi	r30, 0x9D	; 157
    3858:	fe 4f       	sbci	r31, 0xFE	; 254
    385a:	80 81       	ld	r24, Z
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	11 96       	adiw	r26, 0x01	; 1
    3862:	9c 93       	st	X, r25
    3864:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3866:	fe 01       	movw	r30, r28
    3868:	ed 59       	subi	r30, 0x9D	; 157
    386a:	fe 4f       	sbci	r31, 0xFE	; 254
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	d1 f6       	brne	.-76     	; 0x3828 <anipick+0x480>
    3874:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3878:	8e 01       	movw	r16, r28
    387a:	0d 59       	subi	r16, 0x9D	; 157
    387c:	1e 4f       	sbci	r17, 0xFE	; 254
    387e:	fe 01       	movw	r30, r28
    3880:	eb 59       	subi	r30, 0x9B	; 155
    3882:	fe 4f       	sbci	r31, 0xFE	; 254
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	f8 01       	movw	r30, r16
    3896:	91 83       	std	Z+1, r25	; 0x01
    3898:	80 83       	st	Z, r24
    389a:	de 01       	movw	r26, r28
    389c:	a1 5a       	subi	r26, 0xA1	; 161
    389e:	be 4f       	sbci	r27, 0xFE	; 254
    38a0:	fe 01       	movw	r30, r28
    38a2:	ed 59       	subi	r30, 0x9D	; 157
    38a4:	fe 4f       	sbci	r31, 0xFE	; 254
    38a6:	80 81       	ld	r24, Z
    38a8:	91 81       	ldd	r25, Z+1	; 0x01
    38aa:	11 96       	adiw	r26, 0x01	; 1
    38ac:	9c 93       	st	X, r25
    38ae:	8e 93       	st	-X, r24
    38b0:	fe 01       	movw	r30, r28
    38b2:	e1 5a       	subi	r30, 0xA1	; 161
    38b4:	fe 4f       	sbci	r31, 0xFE	; 254
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <anipick+0x512>
    38be:	fe 01       	movw	r30, r28
    38c0:	e1 5a       	subi	r30, 0xA1	; 161
    38c2:	fe 4f       	sbci	r31, 0xFE	; 254
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
				_delay_ms(100);
			}
			else if(pos[1]=='1')
    38cc:	fe 01       	movw	r30, r28
    38ce:	e7 57       	subi	r30, 0x77	; 119
    38d0:	fe 4f       	sbci	r31, 0xFE	; 254
    38d2:	80 81       	ld	r24, Z
    38d4:	91 81       	ldd	r25, Z+1	; 0x01
    38d6:	fc 01       	movw	r30, r24
    38d8:	31 96       	adiw	r30, 0x01	; 1
    38da:	80 81       	ld	r24, Z
    38dc:	81 33       	cpi	r24, 0x31	; 49
    38de:	11 f0       	breq	.+4      	; 0x38e4 <anipick+0x53c>
    38e0:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			{
				forward_mm(30);
    38e4:	8e e1       	ldi	r24, 0x1E	; 30
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				stop();
    38ec:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    38f0:	fe 01       	movw	r30, r28
    38f2:	e5 5a       	subi	r30, 0xA5	; 165
    38f4:	fe 4f       	sbci	r31, 0xFE	; 254
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	a8 e4       	ldi	r26, 0x48	; 72
    38fc:	b2 e4       	ldi	r27, 0x42	; 66
    38fe:	80 83       	st	Z, r24
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	a2 83       	std	Z+2, r26	; 0x02
    3904:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3906:	8e 01       	movw	r16, r28
    3908:	09 5a       	subi	r16, 0xA9	; 169
    390a:	1e 4f       	sbci	r17, 0xFE	; 254
    390c:	fe 01       	movw	r30, r28
    390e:	e5 5a       	subi	r30, 0xA5	; 165
    3910:	fe 4f       	sbci	r31, 0xFE	; 254
    3912:	60 81       	ld	r22, Z
    3914:	71 81       	ldd	r23, Z+1	; 0x01
    3916:	82 81       	ldd	r24, Z+2	; 0x02
    3918:	93 81       	ldd	r25, Z+3	; 0x03
    391a:	26 e6       	ldi	r18, 0x66	; 102
    391c:	36 e6       	ldi	r19, 0x66	; 102
    391e:	46 e6       	ldi	r20, 0x66	; 102
    3920:	55 e4       	ldi	r21, 0x45	; 69
    3922:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	f8 01       	movw	r30, r16
    392c:	80 83       	st	Z, r24
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	a2 83       	std	Z+2, r26	; 0x02
    3932:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3934:	fe 01       	movw	r30, r28
    3936:	e9 5a       	subi	r30, 0xA9	; 169
    3938:	fe 4f       	sbci	r31, 0xFE	; 254
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    394e:	88 23       	and	r24, r24
    3950:	44 f4       	brge	.+16     	; 0x3962 <anipick+0x5ba>
		__ticks = 1;
    3952:	fe 01       	movw	r30, r28
    3954:	eb 5a       	subi	r30, 0xAB	; 171
    3956:	fe 4f       	sbci	r31, 0xFE	; 254
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	91 83       	std	Z+1, r25	; 0x01
    395e:	80 83       	st	Z, r24
    3960:	64 c0       	rjmp	.+200    	; 0x3a2a <anipick+0x682>
	else if (__tmp > 65535)
    3962:	fe 01       	movw	r30, r28
    3964:	e9 5a       	subi	r30, 0xA9	; 169
    3966:	fe 4f       	sbci	r31, 0xFE	; 254
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	3f ef       	ldi	r19, 0xFF	; 255
    3974:	4f e7       	ldi	r20, 0x7F	; 127
    3976:	57 e4       	ldi	r21, 0x47	; 71
    3978:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    397c:	18 16       	cp	r1, r24
    397e:	0c f0       	brlt	.+2      	; 0x3982 <anipick+0x5da>
    3980:	43 c0       	rjmp	.+134    	; 0x3a08 <anipick+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3982:	fe 01       	movw	r30, r28
    3984:	e5 5a       	subi	r30, 0xA5	; 165
    3986:	fe 4f       	sbci	r31, 0xFE	; 254
    3988:	60 81       	ld	r22, Z
    398a:	71 81       	ldd	r23, Z+1	; 0x01
    398c:	82 81       	ldd	r24, Z+2	; 0x02
    398e:	93 81       	ldd	r25, Z+3	; 0x03
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e2       	ldi	r20, 0x20	; 32
    3996:	51 e4       	ldi	r21, 0x41	; 65
    3998:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	8e 01       	movw	r16, r28
    39a2:	0b 5a       	subi	r16, 0xAB	; 171
    39a4:	1e 4f       	sbci	r17, 0xFE	; 254
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	f8 01       	movw	r30, r16
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	80 83       	st	Z, r24
    39b8:	1f c0       	rjmp	.+62     	; 0x39f8 <anipick+0x650>
    39ba:	fe 01       	movw	r30, r28
    39bc:	ed 5a       	subi	r30, 0xAD	; 173
    39be:	fe 4f       	sbci	r31, 0xFE	; 254
    39c0:	80 e7       	ldi	r24, 0x70	; 112
    39c2:	91 e0       	ldi	r25, 0x01	; 1
    39c4:	91 83       	std	Z+1, r25	; 0x01
    39c6:	80 83       	st	Z, r24
    39c8:	fe 01       	movw	r30, r28
    39ca:	ed 5a       	subi	r30, 0xAD	; 173
    39cc:	fe 4f       	sbci	r31, 0xFE	; 254
    39ce:	80 81       	ld	r24, Z
    39d0:	91 81       	ldd	r25, Z+1	; 0x01
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	f1 f7       	brne	.-4      	; 0x39d2 <anipick+0x62a>
    39d6:	fe 01       	movw	r30, r28
    39d8:	ed 5a       	subi	r30, 0xAD	; 173
    39da:	fe 4f       	sbci	r31, 0xFE	; 254
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	de 01       	movw	r26, r28
    39e2:	ab 5a       	subi	r26, 0xAB	; 171
    39e4:	be 4f       	sbci	r27, 0xFE	; 254
    39e6:	fe 01       	movw	r30, r28
    39e8:	eb 5a       	subi	r30, 0xAB	; 171
    39ea:	fe 4f       	sbci	r31, 0xFE	; 254
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	11 96       	adiw	r26, 0x01	; 1
    39f4:	9c 93       	st	X, r25
    39f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f8:	fe 01       	movw	r30, r28
    39fa:	eb 5a       	subi	r30, 0xAB	; 171
    39fc:	fe 4f       	sbci	r31, 0xFE	; 254
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	d1 f6       	brne	.-76     	; 0x39ba <anipick+0x612>
    3a06:	27 c0       	rjmp	.+78     	; 0x3a56 <anipick+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a08:	8e 01       	movw	r16, r28
    3a0a:	0b 5a       	subi	r16, 0xAB	; 171
    3a0c:	1e 4f       	sbci	r17, 0xFE	; 254
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e9 5a       	subi	r30, 0xA9	; 169
    3a12:	fe 4f       	sbci	r31, 0xFE	; 254
    3a14:	60 81       	ld	r22, Z
    3a16:	71 81       	ldd	r23, Z+1	; 0x01
    3a18:	82 81       	ldd	r24, Z+2	; 0x02
    3a1a:	93 81       	ldd	r25, Z+3	; 0x03
    3a1c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	f8 01       	movw	r30, r16
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
    3a2a:	de 01       	movw	r26, r28
    3a2c:	af 5a       	subi	r26, 0xAF	; 175
    3a2e:	be 4f       	sbci	r27, 0xFE	; 254
    3a30:	fe 01       	movw	r30, r28
    3a32:	eb 5a       	subi	r30, 0xAB	; 171
    3a34:	fe 4f       	sbci	r31, 0xFE	; 254
    3a36:	80 81       	ld	r24, Z
    3a38:	91 81       	ldd	r25, Z+1	; 0x01
    3a3a:	8d 93       	st	X+, r24
    3a3c:	9c 93       	st	X, r25
    3a3e:	fe 01       	movw	r30, r28
    3a40:	ef 5a       	subi	r30, 0xAF	; 175
    3a42:	fe 4f       	sbci	r31, 0xFE	; 254
    3a44:	80 81       	ld	r24, Z
    3a46:	91 81       	ldd	r25, Z+1	; 0x01
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <anipick+0x6a0>
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	ef 5a       	subi	r30, 0xAF	; 175
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	80 83       	st	Z, r24
				_delay_ms(50);
				soft_left_2_degrees(100);
    3a56:	84 e6       	ldi	r24, 0x64	; 100
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <soft_left_2_degrees>
				stop();
    3a5e:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    3a62:	fe 01       	movw	r30, r28
    3a64:	e3 5b       	subi	r30, 0xB3	; 179
    3a66:	fe 4f       	sbci	r31, 0xFE	; 254
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a8 e4       	ldi	r26, 0x48	; 72
    3a6e:	b2 e4       	ldi	r27, 0x42	; 66
    3a70:	80 83       	st	Z, r24
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	a2 83       	std	Z+2, r26	; 0x02
    3a76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a78:	8e 01       	movw	r16, r28
    3a7a:	07 5b       	subi	r16, 0xB7	; 183
    3a7c:	1e 4f       	sbci	r17, 0xFE	; 254
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e3 5b       	subi	r30, 0xB3	; 179
    3a82:	fe 4f       	sbci	r31, 0xFE	; 254
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	26 e6       	ldi	r18, 0x66	; 102
    3a8e:	36 e6       	ldi	r19, 0x66	; 102
    3a90:	46 e6       	ldi	r20, 0x66	; 102
    3a92:	55 e4       	ldi	r21, 0x45	; 69
    3a94:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	80 83       	st	Z, r24
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	a2 83       	std	Z+2, r26	; 0x02
    3aa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e7 5b       	subi	r30, 0xB7	; 183
    3aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e8       	ldi	r20, 0x80	; 128
    3aba:	5f e3       	ldi	r21, 0x3F	; 63
    3abc:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    3ac0:	88 23       	and	r24, r24
    3ac2:	44 f4       	brge	.+16     	; 0x3ad4 <anipick+0x72c>
		__ticks = 1;
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e9 5b       	subi	r30, 0xB9	; 185
    3ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	91 83       	std	Z+1, r25	; 0x01
    3ad0:	80 83       	st	Z, r24
    3ad2:	64 c0       	rjmp	.+200    	; 0x3b9c <anipick+0x7f4>
	else if (__tmp > 65535)
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e7 5b       	subi	r30, 0xB7	; 183
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	3f ef       	ldi	r19, 0xFF	; 255
    3ae6:	4f e7       	ldi	r20, 0x7F	; 127
    3ae8:	57 e4       	ldi	r21, 0x47	; 71
    3aea:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    3aee:	18 16       	cp	r1, r24
    3af0:	0c f0       	brlt	.+2      	; 0x3af4 <anipick+0x74c>
    3af2:	43 c0       	rjmp	.+134    	; 0x3b7a <anipick+0x7d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af4:	fe 01       	movw	r30, r28
    3af6:	e3 5b       	subi	r30, 0xB3	; 179
    3af8:	fe 4f       	sbci	r31, 0xFE	; 254
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e2       	ldi	r20, 0x20	; 32
    3b08:	51 e4       	ldi	r21, 0x41	; 65
    3b0a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	8e 01       	movw	r16, r28
    3b14:	09 5b       	subi	r16, 0xB9	; 185
    3b16:	1e 4f       	sbci	r17, 0xFE	; 254
    3b18:	bc 01       	movw	r22, r24
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	f8 01       	movw	r30, r16
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	80 83       	st	Z, r24
    3b2a:	1f c0       	rjmp	.+62     	; 0x3b6a <anipick+0x7c2>
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	eb 5b       	subi	r30, 0xBB	; 187
    3b30:	fe 4f       	sbci	r31, 0xFE	; 254
    3b32:	80 e7       	ldi	r24, 0x70	; 112
    3b34:	91 e0       	ldi	r25, 0x01	; 1
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	eb 5b       	subi	r30, 0xBB	; 187
    3b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b40:	80 81       	ld	r24, Z
    3b42:	91 81       	ldd	r25, Z+1	; 0x01
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <anipick+0x79c>
    3b48:	fe 01       	movw	r30, r28
    3b4a:	eb 5b       	subi	r30, 0xBB	; 187
    3b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b52:	de 01       	movw	r26, r28
    3b54:	a9 5b       	subi	r26, 0xB9	; 185
    3b56:	be 4f       	sbci	r27, 0xFE	; 254
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e9 5b       	subi	r30, 0xB9	; 185
    3b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	11 96       	adiw	r26, 0x01	; 1
    3b66:	9c 93       	st	X, r25
    3b68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6a:	fe 01       	movw	r30, r28
    3b6c:	e9 5b       	subi	r30, 0xB9	; 185
    3b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b70:	80 81       	ld	r24, Z
    3b72:	91 81       	ldd	r25, Z+1	; 0x01
    3b74:	00 97       	sbiw	r24, 0x00	; 0
    3b76:	d1 f6       	brne	.-76     	; 0x3b2c <anipick+0x784>
    3b78:	27 c0       	rjmp	.+78     	; 0x3bc8 <anipick+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7a:	8e 01       	movw	r16, r28
    3b7c:	09 5b       	subi	r16, 0xB9	; 185
    3b7e:	1e 4f       	sbci	r17, 0xFE	; 254
    3b80:	fe 01       	movw	r30, r28
    3b82:	e7 5b       	subi	r30, 0xB7	; 183
    3b84:	fe 4f       	sbci	r31, 0xFE	; 254
    3b86:	60 81       	ld	r22, Z
    3b88:	71 81       	ldd	r23, Z+1	; 0x01
    3b8a:	82 81       	ldd	r24, Z+2	; 0x02
    3b8c:	93 81       	ldd	r25, Z+3	; 0x03
    3b8e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	f8 01       	movw	r30, r16
    3b98:	91 83       	std	Z+1, r25	; 0x01
    3b9a:	80 83       	st	Z, r24
    3b9c:	de 01       	movw	r26, r28
    3b9e:	ad 5b       	subi	r26, 0xBD	; 189
    3ba0:	be 4f       	sbci	r27, 0xFE	; 254
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e9 5b       	subi	r30, 0xB9	; 185
    3ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	8d 93       	st	X+, r24
    3bae:	9c 93       	st	X, r25
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ed 5b       	subi	r30, 0xBD	; 189
    3bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb6:	80 81       	ld	r24, Z
    3bb8:	91 81       	ldd	r25, Z+1	; 0x01
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <anipick+0x812>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	ed 5b       	subi	r30, 0xBD	; 189
    3bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	80 83       	st	Z, r24
				_delay_ms(50);
				forward_mm(20);
    3bc8:	84 e1       	ldi	r24, 0x14	; 20
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				pick();
    3bd0:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
				back_mm(20);
    3bd4:	84 e1       	ldi	r24, 0x14	; 20
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    3bdc:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    3be0:	fe 01       	movw	r30, r28
    3be2:	e1 5c       	subi	r30, 0xC1	; 193
    3be4:	fe 4f       	sbci	r31, 0xFE	; 254
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a8 ec       	ldi	r26, 0xC8	; 200
    3bec:	b2 e4       	ldi	r27, 0x42	; 66
    3bee:	80 83       	st	Z, r24
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	a2 83       	std	Z+2, r26	; 0x02
    3bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	8e 01       	movw	r16, r28
    3bf8:	05 5c       	subi	r16, 0xC5	; 197
    3bfa:	1e 4f       	sbci	r17, 0xFE	; 254
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e1 5c       	subi	r30, 0xC1	; 193
    3c00:	fe 4f       	sbci	r31, 0xFE	; 254
    3c02:	60 81       	ld	r22, Z
    3c04:	71 81       	ldd	r23, Z+1	; 0x01
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	26 e6       	ldi	r18, 0x66	; 102
    3c0c:	36 e6       	ldi	r19, 0x66	; 102
    3c0e:	46 e6       	ldi	r20, 0x66	; 102
    3c10:	55 e4       	ldi	r21, 0x45	; 69
    3c12:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	f8 01       	movw	r30, r16
    3c1c:	80 83       	st	Z, r24
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	a2 83       	std	Z+2, r26	; 0x02
    3c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c24:	fe 01       	movw	r30, r28
    3c26:	e5 5c       	subi	r30, 0xC5	; 197
    3c28:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e8       	ldi	r20, 0x80	; 128
    3c38:	5f e3       	ldi	r21, 0x3F	; 63
    3c3a:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    3c3e:	88 23       	and	r24, r24
    3c40:	44 f4       	brge	.+16     	; 0x3c52 <anipick+0x8aa>
		__ticks = 1;
    3c42:	fe 01       	movw	r30, r28
    3c44:	e7 5c       	subi	r30, 0xC7	; 199
    3c46:	fe 4f       	sbci	r31, 0xFE	; 254
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
    3c50:	64 c0       	rjmp	.+200    	; 0x3d1a <anipick+0x972>
	else if (__tmp > 65535)
    3c52:	fe 01       	movw	r30, r28
    3c54:	e5 5c       	subi	r30, 0xC5	; 197
    3c56:	fe 4f       	sbci	r31, 0xFE	; 254
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	3f ef       	ldi	r19, 0xFF	; 255
    3c64:	4f e7       	ldi	r20, 0x7F	; 127
    3c66:	57 e4       	ldi	r21, 0x47	; 71
    3c68:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    3c6c:	18 16       	cp	r1, r24
    3c6e:	0c f0       	brlt	.+2      	; 0x3c72 <anipick+0x8ca>
    3c70:	43 c0       	rjmp	.+134    	; 0x3cf8 <anipick+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c72:	fe 01       	movw	r30, r28
    3c74:	e1 5c       	subi	r30, 0xC1	; 193
    3c76:	fe 4f       	sbci	r31, 0xFE	; 254
    3c78:	60 81       	ld	r22, Z
    3c7a:	71 81       	ldd	r23, Z+1	; 0x01
    3c7c:	82 81       	ldd	r24, Z+2	; 0x02
    3c7e:	93 81       	ldd	r25, Z+3	; 0x03
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e2       	ldi	r20, 0x20	; 32
    3c86:	51 e4       	ldi	r21, 0x41	; 65
    3c88:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	8e 01       	movw	r16, r28
    3c92:	07 5c       	subi	r16, 0xC7	; 199
    3c94:	1e 4f       	sbci	r17, 0xFE	; 254
    3c96:	bc 01       	movw	r22, r24
    3c98:	cd 01       	movw	r24, r26
    3c9a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	f8 01       	movw	r30, r16
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	80 83       	st	Z, r24
    3ca8:	1f c0       	rjmp	.+62     	; 0x3ce8 <anipick+0x940>
    3caa:	fe 01       	movw	r30, r28
    3cac:	e9 5c       	subi	r30, 0xC9	; 201
    3cae:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb0:	80 e7       	ldi	r24, 0x70	; 112
    3cb2:	91 e0       	ldi	r25, 0x01	; 1
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	80 83       	st	Z, r24
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e9 5c       	subi	r30, 0xC9	; 201
    3cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <anipick+0x91a>
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e9 5c       	subi	r30, 0xC9	; 201
    3cca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd0:	de 01       	movw	r26, r28
    3cd2:	a7 5c       	subi	r26, 0xC7	; 199
    3cd4:	be 4f       	sbci	r27, 0xFE	; 254
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e7 5c       	subi	r30, 0xC7	; 199
    3cda:	fe 4f       	sbci	r31, 0xFE	; 254
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	11 96       	adiw	r26, 0x01	; 1
    3ce4:	9c 93       	st	X, r25
    3ce6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e7 5c       	subi	r30, 0xC7	; 199
    3cec:	fe 4f       	sbci	r31, 0xFE	; 254
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	d1 f6       	brne	.-76     	; 0x3caa <anipick+0x902>
    3cf6:	27 c0       	rjmp	.+78     	; 0x3d46 <anipick+0x99e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf8:	8e 01       	movw	r16, r28
    3cfa:	07 5c       	subi	r16, 0xC7	; 199
    3cfc:	1e 4f       	sbci	r17, 0xFE	; 254
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e5 5c       	subi	r30, 0xC5	; 197
    3d02:	fe 4f       	sbci	r31, 0xFE	; 254
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	f8 01       	movw	r30, r16
    3d16:	91 83       	std	Z+1, r25	; 0x01
    3d18:	80 83       	st	Z, r24
    3d1a:	de 01       	movw	r26, r28
    3d1c:	ab 5c       	subi	r26, 0xCB	; 203
    3d1e:	be 4f       	sbci	r27, 0xFE	; 254
    3d20:	fe 01       	movw	r30, r28
    3d22:	e7 5c       	subi	r30, 0xC7	; 199
    3d24:	fe 4f       	sbci	r31, 0xFE	; 254
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	8d 93       	st	X+, r24
    3d2c:	9c 93       	st	X, r25
    3d2e:	fe 01       	movw	r30, r28
    3d30:	eb 5c       	subi	r30, 0xCB	; 203
    3d32:	fe 4f       	sbci	r31, 0xFE	; 254
    3d34:	80 81       	ld	r24, Z
    3d36:	91 81       	ldd	r25, Z+1	; 0x01
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <anipick+0x990>
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	eb 5c       	subi	r30, 0xCB	; 203
    3d40:	fe 4f       	sbci	r31, 0xFE	; 254
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24
				_delay_ms(100);
				soft_right_degrees(94);
    3d46:	8e e5       	ldi	r24, 0x5E	; 94
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <soft_right_degrees>
				stop();
    3d4e:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    3d52:	fe 01       	movw	r30, r28
    3d54:	ef 5c       	subi	r30, 0xCF	; 207
    3d56:	fe 4f       	sbci	r31, 0xFE	; 254
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	a8 e4       	ldi	r26, 0x48	; 72
    3d5e:	b2 e4       	ldi	r27, 0x42	; 66
    3d60:	80 83       	st	Z, r24
    3d62:	91 83       	std	Z+1, r25	; 0x01
    3d64:	a2 83       	std	Z+2, r26	; 0x02
    3d66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d68:	8e 01       	movw	r16, r28
    3d6a:	03 5d       	subi	r16, 0xD3	; 211
    3d6c:	1e 4f       	sbci	r17, 0xFE	; 254
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ef 5c       	subi	r30, 0xCF	; 207
    3d72:	fe 4f       	sbci	r31, 0xFE	; 254
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	93 81       	ldd	r25, Z+3	; 0x03
    3d7c:	26 e6       	ldi	r18, 0x66	; 102
    3d7e:	36 e6       	ldi	r19, 0x66	; 102
    3d80:	46 e6       	ldi	r20, 0x66	; 102
    3d82:	55 e4       	ldi	r21, 0x45	; 69
    3d84:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	80 83       	st	Z, r24
    3d90:	91 83       	std	Z+1, r25	; 0x01
    3d92:	a2 83       	std	Z+2, r26	; 0x02
    3d94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d96:	fe 01       	movw	r30, r28
    3d98:	e3 5d       	subi	r30, 0xD3	; 211
    3d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e8       	ldi	r20, 0x80	; 128
    3daa:	5f e3       	ldi	r21, 0x3F	; 63
    3dac:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    3db0:	88 23       	and	r24, r24
    3db2:	44 f4       	brge	.+16     	; 0x3dc4 <anipick+0xa1c>
		__ticks = 1;
    3db4:	fe 01       	movw	r30, r28
    3db6:	e5 5d       	subi	r30, 0xD5	; 213
    3db8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
    3dc2:	64 c0       	rjmp	.+200    	; 0x3e8c <anipick+0xae4>
	else if (__tmp > 65535)
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	e3 5d       	subi	r30, 0xD3	; 211
    3dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dca:	60 81       	ld	r22, Z
    3dcc:	71 81       	ldd	r23, Z+1	; 0x01
    3dce:	82 81       	ldd	r24, Z+2	; 0x02
    3dd0:	93 81       	ldd	r25, Z+3	; 0x03
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	3f ef       	ldi	r19, 0xFF	; 255
    3dd6:	4f e7       	ldi	r20, 0x7F	; 127
    3dd8:	57 e4       	ldi	r21, 0x47	; 71
    3dda:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    3dde:	18 16       	cp	r1, r24
    3de0:	0c f0       	brlt	.+2      	; 0x3de4 <anipick+0xa3c>
    3de2:	43 c0       	rjmp	.+134    	; 0x3e6a <anipick+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de4:	fe 01       	movw	r30, r28
    3de6:	ef 5c       	subi	r30, 0xCF	; 207
    3de8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	40 e2       	ldi	r20, 0x20	; 32
    3df8:	51 e4       	ldi	r21, 0x41	; 65
    3dfa:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	8e 01       	movw	r16, r28
    3e04:	05 5d       	subi	r16, 0xD5	; 213
    3e06:	1e 4f       	sbci	r17, 0xFE	; 254
    3e08:	bc 01       	movw	r22, r24
    3e0a:	cd 01       	movw	r24, r26
    3e0c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	f8 01       	movw	r30, r16
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
    3e1a:	1f c0       	rjmp	.+62     	; 0x3e5a <anipick+0xab2>
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e7 5d       	subi	r30, 0xD7	; 215
    3e20:	fe 4f       	sbci	r31, 0xFE	; 254
    3e22:	80 e7       	ldi	r24, 0x70	; 112
    3e24:	91 e0       	ldi	r25, 0x01	; 1
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	80 83       	st	Z, r24
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 5d       	subi	r30, 0xD7	; 215
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	80 81       	ld	r24, Z
    3e32:	91 81       	ldd	r25, Z+1	; 0x01
    3e34:	01 97       	sbiw	r24, 0x01	; 1
    3e36:	f1 f7       	brne	.-4      	; 0x3e34 <anipick+0xa8c>
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e7 5d       	subi	r30, 0xD7	; 215
    3e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e42:	de 01       	movw	r26, r28
    3e44:	a5 5d       	subi	r26, 0xD5	; 213
    3e46:	be 4f       	sbci	r27, 0xFE	; 254
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e5 5d       	subi	r30, 0xD5	; 213
    3e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4e:	80 81       	ld	r24, Z
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	11 96       	adiw	r26, 0x01	; 1
    3e56:	9c 93       	st	X, r25
    3e58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e5 5d       	subi	r30, 0xD5	; 213
    3e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	d1 f6       	brne	.-76     	; 0x3e1c <anipick+0xa74>
    3e68:	27 c0       	rjmp	.+78     	; 0x3eb8 <anipick+0xb10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e6a:	8e 01       	movw	r16, r28
    3e6c:	05 5d       	subi	r16, 0xD5	; 213
    3e6e:	1e 4f       	sbci	r17, 0xFE	; 254
    3e70:	fe 01       	movw	r30, r28
    3e72:	e3 5d       	subi	r30, 0xD3	; 211
    3e74:	fe 4f       	sbci	r31, 0xFE	; 254
    3e76:	60 81       	ld	r22, Z
    3e78:	71 81       	ldd	r23, Z+1	; 0x01
    3e7a:	82 81       	ldd	r24, Z+2	; 0x02
    3e7c:	93 81       	ldd	r25, Z+3	; 0x03
    3e7e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	f8 01       	movw	r30, r16
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	80 83       	st	Z, r24
    3e8c:	de 01       	movw	r26, r28
    3e8e:	a9 5d       	subi	r26, 0xD9	; 217
    3e90:	be 4f       	sbci	r27, 0xFE	; 254
    3e92:	fe 01       	movw	r30, r28
    3e94:	e5 5d       	subi	r30, 0xD5	; 213
    3e96:	fe 4f       	sbci	r31, 0xFE	; 254
    3e98:	80 81       	ld	r24, Z
    3e9a:	91 81       	ldd	r25, Z+1	; 0x01
    3e9c:	8d 93       	st	X+, r24
    3e9e:	9c 93       	st	X, r25
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e9 5d       	subi	r30, 0xD9	; 217
    3ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea6:	80 81       	ld	r24, Z
    3ea8:	91 81       	ldd	r25, Z+1	; 0x01
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	f1 f7       	brne	.-4      	; 0x3eaa <anipick+0xb02>
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e9 5d       	subi	r30, 0xD9	; 217
    3eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	80 83       	st	Z, r24
				_delay_ms(50);
				stop();
    3eb8:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	ed 5d       	subi	r30, 0xDD	; 221
    3ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	a8 e4       	ldi	r26, 0x48	; 72
    3ec8:	b2 e4       	ldi	r27, 0x42	; 66
    3eca:	80 83       	st	Z, r24
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	a2 83       	std	Z+2, r26	; 0x02
    3ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed2:	8e 01       	movw	r16, r28
    3ed4:	01 5e       	subi	r16, 0xE1	; 225
    3ed6:	1e 4f       	sbci	r17, 0xFE	; 254
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ed 5d       	subi	r30, 0xDD	; 221
    3edc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ede:	60 81       	ld	r22, Z
    3ee0:	71 81       	ldd	r23, Z+1	; 0x01
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	26 e6       	ldi	r18, 0x66	; 102
    3ee8:	36 e6       	ldi	r19, 0x66	; 102
    3eea:	46 e6       	ldi	r20, 0x66	; 102
    3eec:	55 e4       	ldi	r21, 0x45	; 69
    3eee:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	80 83       	st	Z, r24
    3efa:	91 83       	std	Z+1, r25	; 0x01
    3efc:	a2 83       	std	Z+2, r26	; 0x02
    3efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f00:	fe 01       	movw	r30, r28
    3f02:	e1 5e       	subi	r30, 0xE1	; 225
    3f04:	fe 4f       	sbci	r31, 0xFE	; 254
    3f06:	60 81       	ld	r22, Z
    3f08:	71 81       	ldd	r23, Z+1	; 0x01
    3f0a:	82 81       	ldd	r24, Z+2	; 0x02
    3f0c:	93 81       	ldd	r25, Z+3	; 0x03
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	40 e8       	ldi	r20, 0x80	; 128
    3f14:	5f e3       	ldi	r21, 0x3F	; 63
    3f16:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    3f1a:	88 23       	and	r24, r24
    3f1c:	44 f4       	brge	.+16     	; 0x3f2e <anipick+0xb86>
		__ticks = 1;
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e3 5e       	subi	r30, 0xE3	; 227
    3f22:	fe 4f       	sbci	r31, 0xFE	; 254
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24
    3f2c:	65 c0       	rjmp	.+202    	; 0x3ff8 <anipick+0xc50>
	else if (__tmp > 65535)
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e1 5e       	subi	r30, 0xE1	; 225
    3f32:	fe 4f       	sbci	r31, 0xFE	; 254
    3f34:	60 81       	ld	r22, Z
    3f36:	71 81       	ldd	r23, Z+1	; 0x01
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	93 81       	ldd	r25, Z+3	; 0x03
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	3f ef       	ldi	r19, 0xFF	; 255
    3f40:	4f e7       	ldi	r20, 0x7F	; 127
    3f42:	57 e4       	ldi	r21, 0x47	; 71
    3f44:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    3f48:	18 16       	cp	r1, r24
    3f4a:	0c f0       	brlt	.+2      	; 0x3f4e <anipick+0xba6>
    3f4c:	44 c0       	rjmp	.+136    	; 0x3fd6 <anipick+0xc2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f4e:	fe 01       	movw	r30, r28
    3f50:	ed 5d       	subi	r30, 0xDD	; 221
    3f52:	fe 4f       	sbci	r31, 0xFE	; 254
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e2       	ldi	r20, 0x20	; 32
    3f62:	51 e4       	ldi	r21, 0x41	; 65
    3f64:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	8e 01       	movw	r16, r28
    3f6e:	03 5e       	subi	r16, 0xE3	; 227
    3f70:	1e 4f       	sbci	r17, 0xFE	; 254
    3f72:	bc 01       	movw	r22, r24
    3f74:	cd 01       	movw	r24, r26
    3f76:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	f8 01       	movw	r30, r16
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
    3f84:	1f c0       	rjmp	.+62     	; 0x3fc4 <anipick+0xc1c>
    3f86:	fe 01       	movw	r30, r28
    3f88:	e5 5e       	subi	r30, 0xE5	; 229
    3f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8c:	80 e7       	ldi	r24, 0x70	; 112
    3f8e:	91 e0       	ldi	r25, 0x01	; 1
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24
    3f94:	fe 01       	movw	r30, r28
    3f96:	e5 5e       	subi	r30, 0xE5	; 229
    3f98:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9a:	80 81       	ld	r24, Z
    3f9c:	91 81       	ldd	r25, Z+1	; 0x01
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	f1 f7       	brne	.-4      	; 0x3f9e <anipick+0xbf6>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e5 5e       	subi	r30, 0xE5	; 229
    3fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa8:	91 83       	std	Z+1, r25	; 0x01
    3faa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fac:	de 01       	movw	r26, r28
    3fae:	a3 5e       	subi	r26, 0xE3	; 227
    3fb0:	be 4f       	sbci	r27, 0xFE	; 254
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e3 5e       	subi	r30, 0xE3	; 227
    3fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb8:	80 81       	ld	r24, Z
    3fba:	91 81       	ldd	r25, Z+1	; 0x01
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	11 96       	adiw	r26, 0x01	; 1
    3fc0:	9c 93       	st	X, r25
    3fc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e3 5e       	subi	r30, 0xE3	; 227
    3fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	00 97       	sbiw	r24, 0x00	; 0
    3fd0:	d1 f6       	brne	.-76     	; 0x3f86 <anipick+0xbde>
    3fd2:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd6:	8e 01       	movw	r16, r28
    3fd8:	03 5e       	subi	r16, 0xE3	; 227
    3fda:	1e 4f       	sbci	r17, 0xFE	; 254
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e1 5e       	subi	r30, 0xE1	; 225
    3fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	91 83       	std	Z+1, r25	; 0x01
    3ff6:	80 83       	st	Z, r24
    3ff8:	de 01       	movw	r26, r28
    3ffa:	a7 5e       	subi	r26, 0xE7	; 231
    3ffc:	be 4f       	sbci	r27, 0xFE	; 254
    3ffe:	fe 01       	movw	r30, r28
    4000:	e3 5e       	subi	r30, 0xE3	; 227
    4002:	fe 4f       	sbci	r31, 0xFE	; 254
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	11 96       	adiw	r26, 0x01	; 1
    400a:	9c 93       	st	X, r25
    400c:	8e 93       	st	-X, r24
    400e:	fe 01       	movw	r30, r28
    4010:	e7 5e       	subi	r30, 0xE7	; 231
    4012:	fe 4f       	sbci	r31, 0xFE	; 254
    4014:	80 81       	ld	r24, Z
    4016:	91 81       	ldd	r25, Z+1	; 0x01
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <anipick+0xc70>
    401c:	fe 01       	movw	r30, r28
    401e:	e7 5e       	subi	r30, 0xE7	; 231
    4020:	fe 4f       	sbci	r31, 0xFE	; 254
    4022:	91 83       	std	Z+1, r25	; 0x01
    4024:	80 83       	st	Z, r24
    4026:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
		}

		// If robot is already at the animal's location
		else
		   { 
				forward_mm(50);
    402a:	82 e3       	ldi	r24, 0x32	; 50
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				stop();
    4032:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4036:	fe 01       	movw	r30, r28
    4038:	eb 5e       	subi	r30, 0xEB	; 235
    403a:	fe 4f       	sbci	r31, 0xFE	; 254
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	a8 e4       	ldi	r26, 0x48	; 72
    4042:	b2 e4       	ldi	r27, 0x42	; 66
    4044:	80 83       	st	Z, r24
    4046:	91 83       	std	Z+1, r25	; 0x01
    4048:	a2 83       	std	Z+2, r26	; 0x02
    404a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    404c:	8e 01       	movw	r16, r28
    404e:	0f 5e       	subi	r16, 0xEF	; 239
    4050:	1e 4f       	sbci	r17, 0xFE	; 254
    4052:	fe 01       	movw	r30, r28
    4054:	eb 5e       	subi	r30, 0xEB	; 235
    4056:	fe 4f       	sbci	r31, 0xFE	; 254
    4058:	60 81       	ld	r22, Z
    405a:	71 81       	ldd	r23, Z+1	; 0x01
    405c:	82 81       	ldd	r24, Z+2	; 0x02
    405e:	93 81       	ldd	r25, Z+3	; 0x03
    4060:	26 e6       	ldi	r18, 0x66	; 102
    4062:	36 e6       	ldi	r19, 0x66	; 102
    4064:	46 e6       	ldi	r20, 0x66	; 102
    4066:	55 e4       	ldi	r21, 0x45	; 69
    4068:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	f8 01       	movw	r30, r16
    4072:	80 83       	st	Z, r24
    4074:	91 83       	std	Z+1, r25	; 0x01
    4076:	a2 83       	std	Z+2, r26	; 0x02
    4078:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    407a:	fe 01       	movw	r30, r28
    407c:	ef 5e       	subi	r30, 0xEF	; 239
    407e:	fe 4f       	sbci	r31, 0xFE	; 254
    4080:	60 81       	ld	r22, Z
    4082:	71 81       	ldd	r23, Z+1	; 0x01
    4084:	82 81       	ldd	r24, Z+2	; 0x02
    4086:	93 81       	ldd	r25, Z+3	; 0x03
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e8       	ldi	r20, 0x80	; 128
    408e:	5f e3       	ldi	r21, 0x3F	; 63
    4090:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4094:	88 23       	and	r24, r24
    4096:	44 f4       	brge	.+16     	; 0x40a8 <anipick+0xd00>
		__ticks = 1;
    4098:	fe 01       	movw	r30, r28
    409a:	e1 5f       	subi	r30, 0xF1	; 241
    409c:	fe 4f       	sbci	r31, 0xFE	; 254
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	80 83       	st	Z, r24
    40a6:	64 c0       	rjmp	.+200    	; 0x4170 <anipick+0xdc8>
	else if (__tmp > 65535)
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 5e       	subi	r30, 0xEF	; 239
    40ac:	fe 4f       	sbci	r31, 0xFE	; 254
    40ae:	60 81       	ld	r22, Z
    40b0:	71 81       	ldd	r23, Z+1	; 0x01
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	93 81       	ldd	r25, Z+3	; 0x03
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	3f ef       	ldi	r19, 0xFF	; 255
    40ba:	4f e7       	ldi	r20, 0x7F	; 127
    40bc:	57 e4       	ldi	r21, 0x47	; 71
    40be:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    40c2:	18 16       	cp	r1, r24
    40c4:	0c f0       	brlt	.+2      	; 0x40c8 <anipick+0xd20>
    40c6:	43 c0       	rjmp	.+134    	; 0x414e <anipick+0xda6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c8:	fe 01       	movw	r30, r28
    40ca:	eb 5e       	subi	r30, 0xEB	; 235
    40cc:	fe 4f       	sbci	r31, 0xFE	; 254
    40ce:	60 81       	ld	r22, Z
    40d0:	71 81       	ldd	r23, Z+1	; 0x01
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e2       	ldi	r20, 0x20	; 32
    40dc:	51 e4       	ldi	r21, 0x41	; 65
    40de:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	8e 01       	movw	r16, r28
    40e8:	01 5f       	subi	r16, 0xF1	; 241
    40ea:	1e 4f       	sbci	r17, 0xFE	; 254
    40ec:	bc 01       	movw	r22, r24
    40ee:	cd 01       	movw	r24, r26
    40f0:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	f8 01       	movw	r30, r16
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
    40fe:	1f c0       	rjmp	.+62     	; 0x413e <anipick+0xd96>
    4100:	fe 01       	movw	r30, r28
    4102:	e3 5f       	subi	r30, 0xF3	; 243
    4104:	fe 4f       	sbci	r31, 0xFE	; 254
    4106:	80 e7       	ldi	r24, 0x70	; 112
    4108:	91 e0       	ldi	r25, 0x01	; 1
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	80 83       	st	Z, r24
    410e:	fe 01       	movw	r30, r28
    4110:	e3 5f       	subi	r30, 0xF3	; 243
    4112:	fe 4f       	sbci	r31, 0xFE	; 254
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <anipick+0xd70>
    411c:	fe 01       	movw	r30, r28
    411e:	e3 5f       	subi	r30, 0xF3	; 243
    4120:	fe 4f       	sbci	r31, 0xFE	; 254
    4122:	91 83       	std	Z+1, r25	; 0x01
    4124:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4126:	de 01       	movw	r26, r28
    4128:	a1 5f       	subi	r26, 0xF1	; 241
    412a:	be 4f       	sbci	r27, 0xFE	; 254
    412c:	fe 01       	movw	r30, r28
    412e:	e1 5f       	subi	r30, 0xF1	; 241
    4130:	fe 4f       	sbci	r31, 0xFE	; 254
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	01 97       	sbiw	r24, 0x01	; 1
    4138:	11 96       	adiw	r26, 0x01	; 1
    413a:	9c 93       	st	X, r25
    413c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413e:	fe 01       	movw	r30, r28
    4140:	e1 5f       	subi	r30, 0xF1	; 241
    4142:	fe 4f       	sbci	r31, 0xFE	; 254
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	00 97       	sbiw	r24, 0x00	; 0
    414a:	d1 f6       	brne	.-76     	; 0x4100 <anipick+0xd58>
    414c:	27 c0       	rjmp	.+78     	; 0x419c <anipick+0xdf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    414e:	8e 01       	movw	r16, r28
    4150:	01 5f       	subi	r16, 0xF1	; 241
    4152:	1e 4f       	sbci	r17, 0xFE	; 254
    4154:	fe 01       	movw	r30, r28
    4156:	ef 5e       	subi	r30, 0xEF	; 239
    4158:	fe 4f       	sbci	r31, 0xFE	; 254
    415a:	60 81       	ld	r22, Z
    415c:	71 81       	ldd	r23, Z+1	; 0x01
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	93 81       	ldd	r25, Z+3	; 0x03
    4162:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	f8 01       	movw	r30, r16
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	80 83       	st	Z, r24
    4170:	de 01       	movw	r26, r28
    4172:	a5 5f       	subi	r26, 0xF5	; 245
    4174:	be 4f       	sbci	r27, 0xFE	; 254
    4176:	fe 01       	movw	r30, r28
    4178:	e1 5f       	subi	r30, 0xF1	; 241
    417a:	fe 4f       	sbci	r31, 0xFE	; 254
    417c:	80 81       	ld	r24, Z
    417e:	91 81       	ldd	r25, Z+1	; 0x01
    4180:	8d 93       	st	X+, r24
    4182:	9c 93       	st	X, r25
    4184:	fe 01       	movw	r30, r28
    4186:	e5 5f       	subi	r30, 0xF5	; 245
    4188:	fe 4f       	sbci	r31, 0xFE	; 254
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	f1 f7       	brne	.-4      	; 0x418e <anipick+0xde6>
    4192:	fe 01       	movw	r30, r28
    4194:	e5 5f       	subi	r30, 0xF5	; 245
    4196:	fe 4f       	sbci	r31, 0xFE	; 254
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	80 83       	st	Z, r24
				_delay_ms(50);
				pick();
    419c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
				back_mm(55);
    41a0:	87 e3       	ldi	r24, 0x37	; 55
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    41a8:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    41ac:	fe 01       	movw	r30, r28
    41ae:	e9 5f       	subi	r30, 0xF9	; 249
    41b0:	fe 4f       	sbci	r31, 0xFE	; 254
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	a8 e4       	ldi	r26, 0x48	; 72
    41b8:	b2 e4       	ldi	r27, 0x42	; 66
    41ba:	80 83       	st	Z, r24
    41bc:	91 83       	std	Z+1, r25	; 0x01
    41be:	a2 83       	std	Z+2, r26	; 0x02
    41c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41c2:	8e 01       	movw	r16, r28
    41c4:	0d 5f       	subi	r16, 0xFD	; 253
    41c6:	1e 4f       	sbci	r17, 0xFE	; 254
    41c8:	fe 01       	movw	r30, r28
    41ca:	e9 5f       	subi	r30, 0xF9	; 249
    41cc:	fe 4f       	sbci	r31, 0xFE	; 254
    41ce:	60 81       	ld	r22, Z
    41d0:	71 81       	ldd	r23, Z+1	; 0x01
    41d2:	82 81       	ldd	r24, Z+2	; 0x02
    41d4:	93 81       	ldd	r25, Z+3	; 0x03
    41d6:	26 e6       	ldi	r18, 0x66	; 102
    41d8:	36 e6       	ldi	r19, 0x66	; 102
    41da:	46 e6       	ldi	r20, 0x66	; 102
    41dc:	55 e4       	ldi	r21, 0x45	; 69
    41de:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	f8 01       	movw	r30, r16
    41e8:	80 83       	st	Z, r24
    41ea:	91 83       	std	Z+1, r25	; 0x01
    41ec:	a2 83       	std	Z+2, r26	; 0x02
    41ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41f0:	fe 01       	movw	r30, r28
    41f2:	ed 5f       	subi	r30, 0xFD	; 253
    41f4:	fe 4f       	sbci	r31, 0xFE	; 254
    41f6:	60 81       	ld	r22, Z
    41f8:	71 81       	ldd	r23, Z+1	; 0x01
    41fa:	82 81       	ldd	r24, Z+2	; 0x02
    41fc:	93 81       	ldd	r25, Z+3	; 0x03
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e8       	ldi	r20, 0x80	; 128
    4204:	5f e3       	ldi	r21, 0x3F	; 63
    4206:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    420a:	88 23       	and	r24, r24
    420c:	44 f4       	brge	.+16     	; 0x421e <anipick+0xe76>
		__ticks = 1;
    420e:	fe 01       	movw	r30, r28
    4210:	ef 5f       	subi	r30, 0xFF	; 255
    4212:	fe 4f       	sbci	r31, 0xFE	; 254
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	80 83       	st	Z, r24
    421c:	65 c0       	rjmp	.+202    	; 0x42e8 <anipick+0xf40>
	else if (__tmp > 65535)
    421e:	fe 01       	movw	r30, r28
    4220:	ed 5f       	subi	r30, 0xFD	; 253
    4222:	fe 4f       	sbci	r31, 0xFE	; 254
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	3f ef       	ldi	r19, 0xFF	; 255
    4230:	4f e7       	ldi	r20, 0x7F	; 127
    4232:	57 e4       	ldi	r21, 0x47	; 71
    4234:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4238:	18 16       	cp	r1, r24
    423a:	0c f0       	brlt	.+2      	; 0x423e <anipick+0xe96>
    423c:	44 c0       	rjmp	.+136    	; 0x42c6 <anipick+0xf1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    423e:	fe 01       	movw	r30, r28
    4240:	e9 5f       	subi	r30, 0xF9	; 249
    4242:	fe 4f       	sbci	r31, 0xFE	; 254
    4244:	60 81       	ld	r22, Z
    4246:	71 81       	ldd	r23, Z+1	; 0x01
    4248:	82 81       	ldd	r24, Z+2	; 0x02
    424a:	93 81       	ldd	r25, Z+3	; 0x03
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	40 e2       	ldi	r20, 0x20	; 32
    4252:	51 e4       	ldi	r21, 0x41	; 65
    4254:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	8e 01       	movw	r16, r28
    425e:	0f 5f       	subi	r16, 0xFF	; 255
    4260:	1e 4f       	sbci	r17, 0xFE	; 254
    4262:	bc 01       	movw	r22, r24
    4264:	cd 01       	movw	r24, r26
    4266:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	f8 01       	movw	r30, r16
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	80 83       	st	Z, r24
    4274:	1f c0       	rjmp	.+62     	; 0x42b4 <anipick+0xf0c>
    4276:	fe 01       	movw	r30, r28
    4278:	e1 50       	subi	r30, 0x01	; 1
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 e7       	ldi	r24, 0x70	; 112
    427e:	91 e0       	ldi	r25, 0x01	; 1
    4280:	91 83       	std	Z+1, r25	; 0x01
    4282:	80 83       	st	Z, r24
    4284:	fe 01       	movw	r30, r28
    4286:	e1 50       	subi	r30, 0x01	; 1
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	80 81       	ld	r24, Z
    428c:	91 81       	ldd	r25, Z+1	; 0x01
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	f1 f7       	brne	.-4      	; 0x428e <anipick+0xee6>
    4292:	fe 01       	movw	r30, r28
    4294:	e1 50       	subi	r30, 0x01	; 1
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429c:	de 01       	movw	r26, r28
    429e:	af 5f       	subi	r26, 0xFF	; 255
    42a0:	be 4f       	sbci	r27, 0xFE	; 254
    42a2:	fe 01       	movw	r30, r28
    42a4:	ef 5f       	subi	r30, 0xFF	; 255
    42a6:	fe 4f       	sbci	r31, 0xFE	; 254
    42a8:	80 81       	ld	r24, Z
    42aa:	91 81       	ldd	r25, Z+1	; 0x01
    42ac:	01 97       	sbiw	r24, 0x01	; 1
    42ae:	11 96       	adiw	r26, 0x01	; 1
    42b0:	9c 93       	st	X, r25
    42b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b4:	fe 01       	movw	r30, r28
    42b6:	ef 5f       	subi	r30, 0xFF	; 255
    42b8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	d1 f6       	brne	.-76     	; 0x4276 <anipick+0xece>
    42c2:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c6:	8e 01       	movw	r16, r28
    42c8:	0f 5f       	subi	r16, 0xFF	; 255
    42ca:	1e 4f       	sbci	r17, 0xFE	; 254
    42cc:	fe 01       	movw	r30, r28
    42ce:	ed 5f       	subi	r30, 0xFD	; 253
    42d0:	fe 4f       	sbci	r31, 0xFE	; 254
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	f8 01       	movw	r30, r16
    42e4:	91 83       	std	Z+1, r25	; 0x01
    42e6:	80 83       	st	Z, r24
    42e8:	de 01       	movw	r26, r28
    42ea:	a3 50       	subi	r26, 0x03	; 3
    42ec:	bf 4f       	sbci	r27, 0xFF	; 255
    42ee:	fe 01       	movw	r30, r28
    42f0:	ef 5f       	subi	r30, 0xFF	; 255
    42f2:	fe 4f       	sbci	r31, 0xFE	; 254
    42f4:	80 81       	ld	r24, Z
    42f6:	91 81       	ldd	r25, Z+1	; 0x01
    42f8:	11 96       	adiw	r26, 0x01	; 1
    42fa:	9c 93       	st	X, r25
    42fc:	8e 93       	st	-X, r24
    42fe:	fe 01       	movw	r30, r28
    4300:	e3 50       	subi	r30, 0x03	; 3
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <anipick+0xf60>
    430c:	fe 01       	movw	r30, r28
    430e:	e3 50       	subi	r30, 0x03	; 3
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
    4316:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
				_delay_ms(50);
		   }			
	}

	else if(pos[0]=='F') // If animal is at right side of the arena
    431a:	fe 01       	movw	r30, r28
    431c:	e7 57       	subi	r30, 0x77	; 119
    431e:	fe 4f       	sbci	r31, 0xFE	; 254
    4320:	01 90       	ld	r0, Z+
    4322:	f0 81       	ld	r31, Z
    4324:	e0 2d       	mov	r30, r0
    4326:	80 81       	ld	r24, Z
    4328:	86 34       	cpi	r24, 0x46	; 70
    432a:	09 f0       	breq	.+2      	; 0x432e <anipick+0xf86>
    432c:	99 c7       	rjmp	.+3890   	; 0x5260 <anipick+0x1eb8>
	{
		if(f==1 || b==1)
    432e:	80 91 00 02 	lds	r24, 0x0200
    4332:	90 91 01 02 	lds	r25, 0x0201
    4336:	81 30       	cpi	r24, 0x01	; 1
    4338:	91 05       	cpc	r25, r1
    433a:	41 f0       	breq	.+16     	; 0x434c <anipick+0xfa4>
    433c:	80 91 26 03 	lds	r24, 0x0326
    4340:	90 91 27 03 	lds	r25, 0x0327
    4344:	81 30       	cpi	r24, 0x01	; 1
    4346:	91 05       	cpc	r25, r1
    4348:	09 f0       	breq	.+2      	; 0x434c <anipick+0xfa4>
    434a:	14 c6       	rjmp	.+3112   	; 0x4f74 <anipick+0x1bcc>
		{   
			if(pos[1]!='1')		//Normal cases
    434c:	fe 01       	movw	r30, r28
    434e:	e7 57       	subi	r30, 0x77	; 119
    4350:	fe 4f       	sbci	r31, 0xFE	; 254
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	fc 01       	movw	r30, r24
    4358:	31 96       	adiw	r30, 0x01	; 1
    435a:	80 81       	ld	r24, Z
    435c:	81 33       	cpi	r24, 0x31	; 49
    435e:	81 f0       	breq	.+32     	; 0x4380 <anipick+0xfd8>
		    {   a=turnsoft(f);
    4360:	80 91 00 02 	lds	r24, 0x0200
    4364:	90 91 01 02 	lds	r25, 0x0201
    4368:	0e 94 32 13 	call	0x2664	; 0x2664 <turnsoft>
    436c:	90 93 03 02 	sts	0x0203, r25
    4370:	80 93 02 02 	sts	0x0202, r24
			   facing(a);
    4374:	80 91 02 02 	lds	r24, 0x0202
    4378:	90 91 03 02 	lds	r25, 0x0203
    437c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
		    }			
			
			/* Handling corner cases */
			if(pos[1]=='6')
    4380:	fe 01       	movw	r30, r28
    4382:	e7 57       	subi	r30, 0x77	; 119
    4384:	fe 4f       	sbci	r31, 0xFE	; 254
    4386:	80 81       	ld	r24, Z
    4388:	91 81       	ldd	r25, Z+1	; 0x01
    438a:	fc 01       	movw	r30, r24
    438c:	31 96       	adiw	r30, 0x01	; 1
    438e:	80 81       	ld	r24, Z
    4390:	86 33       	cpi	r24, 0x36	; 54
    4392:	09 f0       	breq	.+2      	; 0x4396 <anipick+0xfee>
    4394:	c7 c0       	rjmp	.+398    	; 0x4524 <anipick+0x117c>
			{
				soft_left_2_degrees(15);
    4396:	8f e0       	ldi	r24, 0x0F	; 15
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <soft_left_2_degrees>
				forward_mm(50);
    439e:	82 e3       	ldi	r24, 0x32	; 50
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				pick();
    43a6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
				back_mm(35);
    43aa:	83 e2       	ldi	r24, 0x23	; 35
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    43b2:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    43b6:	fe 01       	movw	r30, r28
    43b8:	e7 50       	subi	r30, 0x07	; 7
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	a8 ec       	ldi	r26, 0xC8	; 200
    43c2:	b2 e4       	ldi	r27, 0x42	; 66
    43c4:	80 83       	st	Z, r24
    43c6:	91 83       	std	Z+1, r25	; 0x01
    43c8:	a2 83       	std	Z+2, r26	; 0x02
    43ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43cc:	8e 01       	movw	r16, r28
    43ce:	0b 50       	subi	r16, 0x0B	; 11
    43d0:	1f 4f       	sbci	r17, 0xFF	; 255
    43d2:	fe 01       	movw	r30, r28
    43d4:	e7 50       	subi	r30, 0x07	; 7
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	60 81       	ld	r22, Z
    43da:	71 81       	ldd	r23, Z+1	; 0x01
    43dc:	82 81       	ldd	r24, Z+2	; 0x02
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	26 e6       	ldi	r18, 0x66	; 102
    43e2:	36 e6       	ldi	r19, 0x66	; 102
    43e4:	46 e6       	ldi	r20, 0x66	; 102
    43e6:	55 e4       	ldi	r21, 0x45	; 69
    43e8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	f8 01       	movw	r30, r16
    43f2:	80 83       	st	Z, r24
    43f4:	91 83       	std	Z+1, r25	; 0x01
    43f6:	a2 83       	std	Z+2, r26	; 0x02
    43f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43fa:	fe 01       	movw	r30, r28
    43fc:	eb 50       	subi	r30, 0x0B	; 11
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	60 81       	ld	r22, Z
    4402:	71 81       	ldd	r23, Z+1	; 0x01
    4404:	82 81       	ldd	r24, Z+2	; 0x02
    4406:	93 81       	ldd	r25, Z+3	; 0x03
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	40 e8       	ldi	r20, 0x80	; 128
    440e:	5f e3       	ldi	r21, 0x3F	; 63
    4410:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4414:	88 23       	and	r24, r24
    4416:	44 f4       	brge	.+16     	; 0x4428 <anipick+0x1080>
		__ticks = 1;
    4418:	fe 01       	movw	r30, r28
    441a:	ed 50       	subi	r30, 0x0D	; 13
    441c:	ff 4f       	sbci	r31, 0xFF	; 255
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	91 83       	std	Z+1, r25	; 0x01
    4424:	80 83       	st	Z, r24
    4426:	65 c0       	rjmp	.+202    	; 0x44f2 <anipick+0x114a>
	else if (__tmp > 65535)
    4428:	fe 01       	movw	r30, r28
    442a:	eb 50       	subi	r30, 0x0B	; 11
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	3f ef       	ldi	r19, 0xFF	; 255
    443a:	4f e7       	ldi	r20, 0x7F	; 127
    443c:	57 e4       	ldi	r21, 0x47	; 71
    443e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4442:	18 16       	cp	r1, r24
    4444:	0c f0       	brlt	.+2      	; 0x4448 <anipick+0x10a0>
    4446:	44 c0       	rjmp	.+136    	; 0x44d0 <anipick+0x1128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4448:	fe 01       	movw	r30, r28
    444a:	e7 50       	subi	r30, 0x07	; 7
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e2       	ldi	r20, 0x20	; 32
    445c:	51 e4       	ldi	r21, 0x41	; 65
    445e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	8e 01       	movw	r16, r28
    4468:	0d 50       	subi	r16, 0x0D	; 13
    446a:	1f 4f       	sbci	r17, 0xFF	; 255
    446c:	bc 01       	movw	r22, r24
    446e:	cd 01       	movw	r24, r26
    4470:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	f8 01       	movw	r30, r16
    447a:	91 83       	std	Z+1, r25	; 0x01
    447c:	80 83       	st	Z, r24
    447e:	1f c0       	rjmp	.+62     	; 0x44be <anipick+0x1116>
    4480:	fe 01       	movw	r30, r28
    4482:	ef 50       	subi	r30, 0x0F	; 15
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	80 e7       	ldi	r24, 0x70	; 112
    4488:	91 e0       	ldi	r25, 0x01	; 1
    448a:	91 83       	std	Z+1, r25	; 0x01
    448c:	80 83       	st	Z, r24
    448e:	fe 01       	movw	r30, r28
    4490:	ef 50       	subi	r30, 0x0F	; 15
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	80 81       	ld	r24, Z
    4496:	91 81       	ldd	r25, Z+1	; 0x01
    4498:	01 97       	sbiw	r24, 0x01	; 1
    449a:	f1 f7       	brne	.-4      	; 0x4498 <anipick+0x10f0>
    449c:	fe 01       	movw	r30, r28
    449e:	ef 50       	subi	r30, 0x0F	; 15
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	91 83       	std	Z+1, r25	; 0x01
    44a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a6:	de 01       	movw	r26, r28
    44a8:	ad 50       	subi	r26, 0x0D	; 13
    44aa:	bf 4f       	sbci	r27, 0xFF	; 255
    44ac:	fe 01       	movw	r30, r28
    44ae:	ed 50       	subi	r30, 0x0D	; 13
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	80 81       	ld	r24, Z
    44b4:	91 81       	ldd	r25, Z+1	; 0x01
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	11 96       	adiw	r26, 0x01	; 1
    44ba:	9c 93       	st	X, r25
    44bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44be:	fe 01       	movw	r30, r28
    44c0:	ed 50       	subi	r30, 0x0D	; 13
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	80 81       	ld	r24, Z
    44c6:	91 81       	ldd	r25, Z+1	; 0x01
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	d1 f6       	brne	.-76     	; 0x4480 <anipick+0x10d8>
    44cc:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d0:	8e 01       	movw	r16, r28
    44d2:	0d 50       	subi	r16, 0x0D	; 13
    44d4:	1f 4f       	sbci	r17, 0xFF	; 255
    44d6:	fe 01       	movw	r30, r28
    44d8:	eb 50       	subi	r30, 0x0B	; 11
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	60 81       	ld	r22, Z
    44de:	71 81       	ldd	r23, Z+1	; 0x01
    44e0:	82 81       	ldd	r24, Z+2	; 0x02
    44e2:	93 81       	ldd	r25, Z+3	; 0x03
    44e4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	f8 01       	movw	r30, r16
    44ee:	91 83       	std	Z+1, r25	; 0x01
    44f0:	80 83       	st	Z, r24
    44f2:	de 01       	movw	r26, r28
    44f4:	a1 51       	subi	r26, 0x11	; 17
    44f6:	bf 4f       	sbci	r27, 0xFF	; 255
    44f8:	fe 01       	movw	r30, r28
    44fa:	ed 50       	subi	r30, 0x0D	; 13
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	91 81       	ldd	r25, Z+1	; 0x01
    4502:	11 96       	adiw	r26, 0x01	; 1
    4504:	9c 93       	st	X, r25
    4506:	8e 93       	st	-X, r24
    4508:	fe 01       	movw	r30, r28
    450a:	e1 51       	subi	r30, 0x11	; 17
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	80 81       	ld	r24, Z
    4510:	91 81       	ldd	r25, Z+1	; 0x01
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <anipick+0x116a>
    4516:	fe 01       	movw	r30, r28
    4518:	e1 51       	subi	r30, 0x11	; 17
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	80 83       	st	Z, r24
    4520:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
				_delay_ms(100);
			}
			else if(pos[1]=='1')	
    4524:	fe 01       	movw	r30, r28
    4526:	e7 57       	subi	r30, 0x77	; 119
    4528:	fe 4f       	sbci	r31, 0xFE	; 254
    452a:	80 81       	ld	r24, Z
    452c:	91 81       	ldd	r25, Z+1	; 0x01
    452e:	fc 01       	movw	r30, r24
    4530:	31 96       	adiw	r30, 0x01	; 1
    4532:	80 81       	ld	r24, Z
    4534:	81 33       	cpi	r24, 0x31	; 49
    4536:	09 f0       	breq	.+2      	; 0x453a <anipick+0x1192>
    4538:	a7 c3       	rjmp	.+1870   	; 0x4c88 <anipick+0x18e0>
			{   forward_mm(100);
    453a:	84 e6       	ldi	r24, 0x64	; 100
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				stop();
    4542:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4546:	fe 01       	movw	r30, r28
    4548:	e5 51       	subi	r30, 0x15	; 21
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	a8 e4       	ldi	r26, 0x48	; 72
    4552:	b2 e4       	ldi	r27, 0x42	; 66
    4554:	80 83       	st	Z, r24
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	a2 83       	std	Z+2, r26	; 0x02
    455a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455c:	8e 01       	movw	r16, r28
    455e:	09 51       	subi	r16, 0x19	; 25
    4560:	1f 4f       	sbci	r17, 0xFF	; 255
    4562:	fe 01       	movw	r30, r28
    4564:	e5 51       	subi	r30, 0x15	; 21
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	60 81       	ld	r22, Z
    456a:	71 81       	ldd	r23, Z+1	; 0x01
    456c:	82 81       	ldd	r24, Z+2	; 0x02
    456e:	93 81       	ldd	r25, Z+3	; 0x03
    4570:	26 e6       	ldi	r18, 0x66	; 102
    4572:	36 e6       	ldi	r19, 0x66	; 102
    4574:	46 e6       	ldi	r20, 0x66	; 102
    4576:	55 e4       	ldi	r21, 0x45	; 69
    4578:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	f8 01       	movw	r30, r16
    4582:	80 83       	st	Z, r24
    4584:	91 83       	std	Z+1, r25	; 0x01
    4586:	a2 83       	std	Z+2, r26	; 0x02
    4588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    458a:	fe 01       	movw	r30, r28
    458c:	e9 51       	subi	r30, 0x19	; 25
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e8       	ldi	r20, 0x80	; 128
    459e:	5f e3       	ldi	r21, 0x3F	; 63
    45a0:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    45a4:	88 23       	and	r24, r24
    45a6:	44 f4       	brge	.+16     	; 0x45b8 <anipick+0x1210>
		__ticks = 1;
    45a8:	fe 01       	movw	r30, r28
    45aa:	eb 51       	subi	r30, 0x1B	; 27
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	91 83       	std	Z+1, r25	; 0x01
    45b4:	80 83       	st	Z, r24
    45b6:	64 c0       	rjmp	.+200    	; 0x4680 <anipick+0x12d8>
	else if (__tmp > 65535)
    45b8:	fe 01       	movw	r30, r28
    45ba:	e9 51       	subi	r30, 0x19	; 25
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	3f ef       	ldi	r19, 0xFF	; 255
    45ca:	4f e7       	ldi	r20, 0x7F	; 127
    45cc:	57 e4       	ldi	r21, 0x47	; 71
    45ce:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    45d2:	18 16       	cp	r1, r24
    45d4:	0c f0       	brlt	.+2      	; 0x45d8 <anipick+0x1230>
    45d6:	43 c0       	rjmp	.+134    	; 0x465e <anipick+0x12b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d8:	fe 01       	movw	r30, r28
    45da:	e5 51       	subi	r30, 0x15	; 21
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	40 e2       	ldi	r20, 0x20	; 32
    45ec:	51 e4       	ldi	r21, 0x41	; 65
    45ee:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	8e 01       	movw	r16, r28
    45f8:	0b 51       	subi	r16, 0x1B	; 27
    45fa:	1f 4f       	sbci	r17, 0xFF	; 255
    45fc:	bc 01       	movw	r22, r24
    45fe:	cd 01       	movw	r24, r26
    4600:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	f8 01       	movw	r30, r16
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	80 83       	st	Z, r24
    460e:	1f c0       	rjmp	.+62     	; 0x464e <anipick+0x12a6>
    4610:	fe 01       	movw	r30, r28
    4612:	ed 51       	subi	r30, 0x1D	; 29
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	80 e7       	ldi	r24, 0x70	; 112
    4618:	91 e0       	ldi	r25, 0x01	; 1
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	80 83       	st	Z, r24
    461e:	fe 01       	movw	r30, r28
    4620:	ed 51       	subi	r30, 0x1D	; 29
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	80 81       	ld	r24, Z
    4626:	91 81       	ldd	r25, Z+1	; 0x01
    4628:	01 97       	sbiw	r24, 0x01	; 1
    462a:	f1 f7       	brne	.-4      	; 0x4628 <anipick+0x1280>
    462c:	fe 01       	movw	r30, r28
    462e:	ed 51       	subi	r30, 0x1D	; 29
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4636:	de 01       	movw	r26, r28
    4638:	ab 51       	subi	r26, 0x1B	; 27
    463a:	bf 4f       	sbci	r27, 0xFF	; 255
    463c:	fe 01       	movw	r30, r28
    463e:	eb 51       	subi	r30, 0x1B	; 27
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 81       	ld	r24, Z
    4644:	91 81       	ldd	r25, Z+1	; 0x01
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	11 96       	adiw	r26, 0x01	; 1
    464a:	9c 93       	st	X, r25
    464c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464e:	fe 01       	movw	r30, r28
    4650:	eb 51       	subi	r30, 0x1B	; 27
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	d1 f6       	brne	.-76     	; 0x4610 <anipick+0x1268>
    465c:	27 c0       	rjmp	.+78     	; 0x46ac <anipick+0x1304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465e:	8e 01       	movw	r16, r28
    4660:	0b 51       	subi	r16, 0x1B	; 27
    4662:	1f 4f       	sbci	r17, 0xFF	; 255
    4664:	fe 01       	movw	r30, r28
    4666:	e9 51       	subi	r30, 0x19	; 25
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	f8 01       	movw	r30, r16
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	de 01       	movw	r26, r28
    4682:	af 51       	subi	r26, 0x1F	; 31
    4684:	bf 4f       	sbci	r27, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	eb 51       	subi	r30, 0x1B	; 27
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	80 81       	ld	r24, Z
    468e:	91 81       	ldd	r25, Z+1	; 0x01
    4690:	8d 93       	st	X+, r24
    4692:	9c 93       	st	X, r25
    4694:	fe 01       	movw	r30, r28
    4696:	ef 51       	subi	r30, 0x1F	; 31
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	f1 f7       	brne	.-4      	; 0x469e <anipick+0x12f6>
    46a2:	fe 01       	movw	r30, r28
    46a4:	ef 51       	subi	r30, 0x1F	; 31
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	80 83       	st	Z, r24
				_delay_ms(50);
				soft_left_2_degrees(40);
    46ac:	88 e2       	ldi	r24, 0x28	; 40
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <soft_left_2_degrees>
				stop();
    46b4:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    46b8:	fe 01       	movw	r30, r28
    46ba:	e3 52       	subi	r30, 0x23	; 35
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	a8 e4       	ldi	r26, 0x48	; 72
    46c4:	b2 e4       	ldi	r27, 0x42	; 66
    46c6:	80 83       	st	Z, r24
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	a2 83       	std	Z+2, r26	; 0x02
    46cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ce:	8e 01       	movw	r16, r28
    46d0:	07 52       	subi	r16, 0x27	; 39
    46d2:	1f 4f       	sbci	r17, 0xFF	; 255
    46d4:	fe 01       	movw	r30, r28
    46d6:	e3 52       	subi	r30, 0x23	; 35
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	60 81       	ld	r22, Z
    46dc:	71 81       	ldd	r23, Z+1	; 0x01
    46de:	82 81       	ldd	r24, Z+2	; 0x02
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	26 e6       	ldi	r18, 0x66	; 102
    46e4:	36 e6       	ldi	r19, 0x66	; 102
    46e6:	46 e6       	ldi	r20, 0x66	; 102
    46e8:	55 e4       	ldi	r21, 0x45	; 69
    46ea:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	f8 01       	movw	r30, r16
    46f4:	80 83       	st	Z, r24
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	a2 83       	std	Z+2, r26	; 0x02
    46fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46fc:	fe 01       	movw	r30, r28
    46fe:	e7 52       	subi	r30, 0x27	; 39
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	60 81       	ld	r22, Z
    4704:	71 81       	ldd	r23, Z+1	; 0x01
    4706:	82 81       	ldd	r24, Z+2	; 0x02
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e8       	ldi	r20, 0x80	; 128
    4710:	5f e3       	ldi	r21, 0x3F	; 63
    4712:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4716:	88 23       	and	r24, r24
    4718:	44 f4       	brge	.+16     	; 0x472a <anipick+0x1382>
		__ticks = 1;
    471a:	fe 01       	movw	r30, r28
    471c:	e9 52       	subi	r30, 0x29	; 41
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	91 83       	std	Z+1, r25	; 0x01
    4726:	80 83       	st	Z, r24
    4728:	64 c0       	rjmp	.+200    	; 0x47f2 <anipick+0x144a>
	else if (__tmp > 65535)
    472a:	fe 01       	movw	r30, r28
    472c:	e7 52       	subi	r30, 0x27	; 39
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	60 81       	ld	r22, Z
    4732:	71 81       	ldd	r23, Z+1	; 0x01
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	3f ef       	ldi	r19, 0xFF	; 255
    473c:	4f e7       	ldi	r20, 0x7F	; 127
    473e:	57 e4       	ldi	r21, 0x47	; 71
    4740:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4744:	18 16       	cp	r1, r24
    4746:	0c f0       	brlt	.+2      	; 0x474a <anipick+0x13a2>
    4748:	43 c0       	rjmp	.+134    	; 0x47d0 <anipick+0x1428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474a:	fe 01       	movw	r30, r28
    474c:	e3 52       	subi	r30, 0x23	; 35
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	60 81       	ld	r22, Z
    4752:	71 81       	ldd	r23, Z+1	; 0x01
    4754:	82 81       	ldd	r24, Z+2	; 0x02
    4756:	93 81       	ldd	r25, Z+3	; 0x03
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	40 e2       	ldi	r20, 0x20	; 32
    475e:	51 e4       	ldi	r21, 0x41	; 65
    4760:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4764:	dc 01       	movw	r26, r24
    4766:	cb 01       	movw	r24, r22
    4768:	8e 01       	movw	r16, r28
    476a:	09 52       	subi	r16, 0x29	; 41
    476c:	1f 4f       	sbci	r17, 0xFF	; 255
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	f8 01       	movw	r30, r16
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24
    4780:	1f c0       	rjmp	.+62     	; 0x47c0 <anipick+0x1418>
    4782:	fe 01       	movw	r30, r28
    4784:	eb 52       	subi	r30, 0x2B	; 43
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	80 e7       	ldi	r24, 0x70	; 112
    478a:	91 e0       	ldi	r25, 0x01	; 1
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	80 83       	st	Z, r24
    4790:	fe 01       	movw	r30, r28
    4792:	eb 52       	subi	r30, 0x2B	; 43
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	80 81       	ld	r24, Z
    4798:	91 81       	ldd	r25, Z+1	; 0x01
    479a:	01 97       	sbiw	r24, 0x01	; 1
    479c:	f1 f7       	brne	.-4      	; 0x479a <anipick+0x13f2>
    479e:	fe 01       	movw	r30, r28
    47a0:	eb 52       	subi	r30, 0x2B	; 43
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	91 83       	std	Z+1, r25	; 0x01
    47a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a8:	de 01       	movw	r26, r28
    47aa:	a9 52       	subi	r26, 0x29	; 41
    47ac:	bf 4f       	sbci	r27, 0xFF	; 255
    47ae:	fe 01       	movw	r30, r28
    47b0:	e9 52       	subi	r30, 0x29	; 41
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 81       	ld	r24, Z
    47b6:	91 81       	ldd	r25, Z+1	; 0x01
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	11 96       	adiw	r26, 0x01	; 1
    47bc:	9c 93       	st	X, r25
    47be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c0:	fe 01       	movw	r30, r28
    47c2:	e9 52       	subi	r30, 0x29	; 41
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 81       	ld	r24, Z
    47c8:	91 81       	ldd	r25, Z+1	; 0x01
    47ca:	00 97       	sbiw	r24, 0x00	; 0
    47cc:	d1 f6       	brne	.-76     	; 0x4782 <anipick+0x13da>
    47ce:	27 c0       	rjmp	.+78     	; 0x481e <anipick+0x1476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47d0:	8e 01       	movw	r16, r28
    47d2:	09 52       	subi	r16, 0x29	; 41
    47d4:	1f 4f       	sbci	r17, 0xFF	; 255
    47d6:	fe 01       	movw	r30, r28
    47d8:	e7 52       	subi	r30, 0x27	; 39
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	60 81       	ld	r22, Z
    47de:	71 81       	ldd	r23, Z+1	; 0x01
    47e0:	82 81       	ldd	r24, Z+2	; 0x02
    47e2:	93 81       	ldd	r25, Z+3	; 0x03
    47e4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	f8 01       	movw	r30, r16
    47ee:	91 83       	std	Z+1, r25	; 0x01
    47f0:	80 83       	st	Z, r24
    47f2:	de 01       	movw	r26, r28
    47f4:	ad 52       	subi	r26, 0x2D	; 45
    47f6:	bf 4f       	sbci	r27, 0xFF	; 255
    47f8:	fe 01       	movw	r30, r28
    47fa:	e9 52       	subi	r30, 0x29	; 41
    47fc:	ff 4f       	sbci	r31, 0xFF	; 255
    47fe:	80 81       	ld	r24, Z
    4800:	91 81       	ldd	r25, Z+1	; 0x01
    4802:	8d 93       	st	X+, r24
    4804:	9c 93       	st	X, r25
    4806:	fe 01       	movw	r30, r28
    4808:	ed 52       	subi	r30, 0x2D	; 45
    480a:	ff 4f       	sbci	r31, 0xFF	; 255
    480c:	80 81       	ld	r24, Z
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <anipick+0x1468>
    4814:	fe 01       	movw	r30, r28
    4816:	ed 52       	subi	r30, 0x2D	; 45
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	80 83       	st	Z, r24
				_delay_ms(50);
				forward_mm(30);
    481e:	8e e1       	ldi	r24, 0x1E	; 30
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				pick();
    4826:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
				back_mm(30);
    482a:	8e e1       	ldi	r24, 0x1E	; 30
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    4832:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4836:	fe 01       	movw	r30, r28
    4838:	e1 53       	subi	r30, 0x31	; 49
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	a8 ec       	ldi	r26, 0xC8	; 200
    4842:	b2 e4       	ldi	r27, 0x42	; 66
    4844:	80 83       	st	Z, r24
    4846:	91 83       	std	Z+1, r25	; 0x01
    4848:	a2 83       	std	Z+2, r26	; 0x02
    484a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484c:	8e 01       	movw	r16, r28
    484e:	05 53       	subi	r16, 0x35	; 53
    4850:	1f 4f       	sbci	r17, 0xFF	; 255
    4852:	fe 01       	movw	r30, r28
    4854:	e1 53       	subi	r30, 0x31	; 49
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	60 81       	ld	r22, Z
    485a:	71 81       	ldd	r23, Z+1	; 0x01
    485c:	82 81       	ldd	r24, Z+2	; 0x02
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	26 e6       	ldi	r18, 0x66	; 102
    4862:	36 e6       	ldi	r19, 0x66	; 102
    4864:	46 e6       	ldi	r20, 0x66	; 102
    4866:	55 e4       	ldi	r21, 0x45	; 69
    4868:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	f8 01       	movw	r30, r16
    4872:	80 83       	st	Z, r24
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	a2 83       	std	Z+2, r26	; 0x02
    4878:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    487a:	fe 01       	movw	r30, r28
    487c:	e5 53       	subi	r30, 0x35	; 53
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	60 81       	ld	r22, Z
    4882:	71 81       	ldd	r23, Z+1	; 0x01
    4884:	82 81       	ldd	r24, Z+2	; 0x02
    4886:	93 81       	ldd	r25, Z+3	; 0x03
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	5f e3       	ldi	r21, 0x3F	; 63
    4890:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4894:	88 23       	and	r24, r24
    4896:	44 f4       	brge	.+16     	; 0x48a8 <anipick+0x1500>
		__ticks = 1;
    4898:	fe 01       	movw	r30, r28
    489a:	e7 53       	subi	r30, 0x37	; 55
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	80 83       	st	Z, r24
    48a6:	64 c0       	rjmp	.+200    	; 0x4970 <anipick+0x15c8>
	else if (__tmp > 65535)
    48a8:	fe 01       	movw	r30, r28
    48aa:	e5 53       	subi	r30, 0x35	; 53
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	60 81       	ld	r22, Z
    48b0:	71 81       	ldd	r23, Z+1	; 0x01
    48b2:	82 81       	ldd	r24, Z+2	; 0x02
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	3f ef       	ldi	r19, 0xFF	; 255
    48ba:	4f e7       	ldi	r20, 0x7F	; 127
    48bc:	57 e4       	ldi	r21, 0x47	; 71
    48be:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    48c2:	18 16       	cp	r1, r24
    48c4:	0c f0       	brlt	.+2      	; 0x48c8 <anipick+0x1520>
    48c6:	43 c0       	rjmp	.+134    	; 0x494e <anipick+0x15a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c8:	fe 01       	movw	r30, r28
    48ca:	e1 53       	subi	r30, 0x31	; 49
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	60 81       	ld	r22, Z
    48d0:	71 81       	ldd	r23, Z+1	; 0x01
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	40 e2       	ldi	r20, 0x20	; 32
    48dc:	51 e4       	ldi	r21, 0x41	; 65
    48de:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	8e 01       	movw	r16, r28
    48e8:	07 53       	subi	r16, 0x37	; 55
    48ea:	1f 4f       	sbci	r17, 0xFF	; 255
    48ec:	bc 01       	movw	r22, r24
    48ee:	cd 01       	movw	r24, r26
    48f0:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	f8 01       	movw	r30, r16
    48fa:	91 83       	std	Z+1, r25	; 0x01
    48fc:	80 83       	st	Z, r24
    48fe:	1f c0       	rjmp	.+62     	; 0x493e <anipick+0x1596>
    4900:	fe 01       	movw	r30, r28
    4902:	e9 53       	subi	r30, 0x39	; 57
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	80 e7       	ldi	r24, 0x70	; 112
    4908:	91 e0       	ldi	r25, 0x01	; 1
    490a:	91 83       	std	Z+1, r25	; 0x01
    490c:	80 83       	st	Z, r24
    490e:	fe 01       	movw	r30, r28
    4910:	e9 53       	subi	r30, 0x39	; 57
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 81       	ld	r24, Z
    4916:	91 81       	ldd	r25, Z+1	; 0x01
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	f1 f7       	brne	.-4      	; 0x4918 <anipick+0x1570>
    491c:	fe 01       	movw	r30, r28
    491e:	e9 53       	subi	r30, 0x39	; 57
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4926:	de 01       	movw	r26, r28
    4928:	a7 53       	subi	r26, 0x37	; 55
    492a:	bf 4f       	sbci	r27, 0xFF	; 255
    492c:	fe 01       	movw	r30, r28
    492e:	e7 53       	subi	r30, 0x37	; 55
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	01 97       	sbiw	r24, 0x01	; 1
    4938:	11 96       	adiw	r26, 0x01	; 1
    493a:	9c 93       	st	X, r25
    493c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493e:	fe 01       	movw	r30, r28
    4940:	e7 53       	subi	r30, 0x37	; 55
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	80 81       	ld	r24, Z
    4946:	91 81       	ldd	r25, Z+1	; 0x01
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	d1 f6       	brne	.-76     	; 0x4900 <anipick+0x1558>
    494c:	27 c0       	rjmp	.+78     	; 0x499c <anipick+0x15f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494e:	8e 01       	movw	r16, r28
    4950:	07 53       	subi	r16, 0x37	; 55
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	fe 01       	movw	r30, r28
    4956:	e5 53       	subi	r30, 0x35	; 53
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	f8 01       	movw	r30, r16
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
    4970:	de 01       	movw	r26, r28
    4972:	ab 53       	subi	r26, 0x3B	; 59
    4974:	bf 4f       	sbci	r27, 0xFF	; 255
    4976:	fe 01       	movw	r30, r28
    4978:	e7 53       	subi	r30, 0x37	; 55
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	80 81       	ld	r24, Z
    497e:	91 81       	ldd	r25, Z+1	; 0x01
    4980:	8d 93       	st	X+, r24
    4982:	9c 93       	st	X, r25
    4984:	fe 01       	movw	r30, r28
    4986:	eb 53       	subi	r30, 0x3B	; 59
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	f1 f7       	brne	.-4      	; 0x498e <anipick+0x15e6>
    4992:	fe 01       	movw	r30, r28
    4994:	eb 53       	subi	r30, 0x3B	; 59
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	80 83       	st	Z, r24
				_delay_ms(100);
				soft_right_degrees(45);
    499c:	8d e2       	ldi	r24, 0x2D	; 45
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <soft_right_degrees>
				stop();
    49a4:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    49a8:	fe 01       	movw	r30, r28
    49aa:	ef 53       	subi	r30, 0x3F	; 63
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	a8 e4       	ldi	r26, 0x48	; 72
    49b4:	b2 e4       	ldi	r27, 0x42	; 66
    49b6:	80 83       	st	Z, r24
    49b8:	91 83       	std	Z+1, r25	; 0x01
    49ba:	a2 83       	std	Z+2, r26	; 0x02
    49bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49be:	8e 01       	movw	r16, r28
    49c0:	03 54       	subi	r16, 0x43	; 67
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
    49c4:	fe 01       	movw	r30, r28
    49c6:	ef 53       	subi	r30, 0x3F	; 63
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	60 81       	ld	r22, Z
    49cc:	71 81       	ldd	r23, Z+1	; 0x01
    49ce:	82 81       	ldd	r24, Z+2	; 0x02
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	26 e6       	ldi	r18, 0x66	; 102
    49d4:	36 e6       	ldi	r19, 0x66	; 102
    49d6:	46 e6       	ldi	r20, 0x66	; 102
    49d8:	55 e4       	ldi	r21, 0x45	; 69
    49da:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	f8 01       	movw	r30, r16
    49e4:	80 83       	st	Z, r24
    49e6:	91 83       	std	Z+1, r25	; 0x01
    49e8:	a2 83       	std	Z+2, r26	; 0x02
    49ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49ec:	fe 01       	movw	r30, r28
    49ee:	e3 54       	subi	r30, 0x43	; 67
    49f0:	ff 4f       	sbci	r31, 0xFF	; 255
    49f2:	60 81       	ld	r22, Z
    49f4:	71 81       	ldd	r23, Z+1	; 0x01
    49f6:	82 81       	ldd	r24, Z+2	; 0x02
    49f8:	93 81       	ldd	r25, Z+3	; 0x03
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	40 e8       	ldi	r20, 0x80	; 128
    4a00:	5f e3       	ldi	r21, 0x3F	; 63
    4a02:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4a06:	88 23       	and	r24, r24
    4a08:	44 f4       	brge	.+16     	; 0x4a1a <anipick+0x1672>
		__ticks = 1;
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e5 54       	subi	r30, 0x45	; 69
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	91 83       	std	Z+1, r25	; 0x01
    4a16:	80 83       	st	Z, r24
    4a18:	64 c0       	rjmp	.+200    	; 0x4ae2 <anipick+0x173a>
	else if (__tmp > 65535)
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e3 54       	subi	r30, 0x43	; 67
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	60 81       	ld	r22, Z
    4a22:	71 81       	ldd	r23, Z+1	; 0x01
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	93 81       	ldd	r25, Z+3	; 0x03
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	3f ef       	ldi	r19, 0xFF	; 255
    4a2c:	4f e7       	ldi	r20, 0x7F	; 127
    4a2e:	57 e4       	ldi	r21, 0x47	; 71
    4a30:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4a34:	18 16       	cp	r1, r24
    4a36:	0c f0       	brlt	.+2      	; 0x4a3a <anipick+0x1692>
    4a38:	43 c0       	rjmp	.+134    	; 0x4ac0 <anipick+0x1718>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	ef 53       	subi	r30, 0x3F	; 63
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	40 e2       	ldi	r20, 0x20	; 32
    4a4e:	51 e4       	ldi	r21, 0x41	; 65
    4a50:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	8e 01       	movw	r16, r28
    4a5a:	05 54       	subi	r16, 0x45	; 69
    4a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5e:	bc 01       	movw	r22, r24
    4a60:	cd 01       	movw	r24, r26
    4a62:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4a66:	dc 01       	movw	r26, r24
    4a68:	cb 01       	movw	r24, r22
    4a6a:	f8 01       	movw	r30, r16
    4a6c:	91 83       	std	Z+1, r25	; 0x01
    4a6e:	80 83       	st	Z, r24
    4a70:	1f c0       	rjmp	.+62     	; 0x4ab0 <anipick+0x1708>
    4a72:	fe 01       	movw	r30, r28
    4a74:	e7 54       	subi	r30, 0x47	; 71
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	80 e7       	ldi	r24, 0x70	; 112
    4a7a:	91 e0       	ldi	r25, 0x01	; 1
    4a7c:	91 83       	std	Z+1, r25	; 0x01
    4a7e:	80 83       	st	Z, r24
    4a80:	fe 01       	movw	r30, r28
    4a82:	e7 54       	subi	r30, 0x47	; 71
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	80 81       	ld	r24, Z
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	01 97       	sbiw	r24, 0x01	; 1
    4a8c:	f1 f7       	brne	.-4      	; 0x4a8a <anipick+0x16e2>
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e7 54       	subi	r30, 0x47	; 71
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	91 83       	std	Z+1, r25	; 0x01
    4a96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a98:	de 01       	movw	r26, r28
    4a9a:	a5 54       	subi	r26, 0x45	; 69
    4a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e5 54       	subi	r30, 0x45	; 69
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	80 81       	ld	r24, Z
    4aa6:	91 81       	ldd	r25, Z+1	; 0x01
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	11 96       	adiw	r26, 0x01	; 1
    4aac:	9c 93       	st	X, r25
    4aae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	e5 54       	subi	r30, 0x45	; 69
    4ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab6:	80 81       	ld	r24, Z
    4ab8:	91 81       	ldd	r25, Z+1	; 0x01
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	d1 f6       	brne	.-76     	; 0x4a72 <anipick+0x16ca>
    4abe:	27 c0       	rjmp	.+78     	; 0x4b0e <anipick+0x1766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac0:	8e 01       	movw	r16, r28
    4ac2:	05 54       	subi	r16, 0x45	; 69
    4ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac6:	fe 01       	movw	r30, r28
    4ac8:	e3 54       	subi	r30, 0x43	; 67
    4aca:	ff 4f       	sbci	r31, 0xFF	; 255
    4acc:	60 81       	ld	r22, Z
    4ace:	71 81       	ldd	r23, Z+1	; 0x01
    4ad0:	82 81       	ldd	r24, Z+2	; 0x02
    4ad2:	93 81       	ldd	r25, Z+3	; 0x03
    4ad4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	f8 01       	movw	r30, r16
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	80 83       	st	Z, r24
    4ae2:	de 01       	movw	r26, r28
    4ae4:	a9 54       	subi	r26, 0x49	; 73
    4ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ae8:	fe 01       	movw	r30, r28
    4aea:	e5 54       	subi	r30, 0x45	; 69
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	80 81       	ld	r24, Z
    4af0:	91 81       	ldd	r25, Z+1	; 0x01
    4af2:	8d 93       	st	X+, r24
    4af4:	9c 93       	st	X, r25
    4af6:	fe 01       	movw	r30, r28
    4af8:	e9 54       	subi	r30, 0x49	; 73
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	80 81       	ld	r24, Z
    4afe:	91 81       	ldd	r25, Z+1	; 0x01
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <anipick+0x1758>
    4b04:	fe 01       	movw	r30, r28
    4b06:	e9 54       	subi	r30, 0x49	; 73
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	80 83       	st	Z, r24
				_delay_ms(50);
				back_mm(125);
    4b0e:	8d e7       	ldi	r24, 0x7D	; 125
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    4b16:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4b1a:	fe 01       	movw	r30, r28
    4b1c:	ed 54       	subi	r30, 0x4D	; 77
    4b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b20:	80 e0       	ldi	r24, 0x00	; 0
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	a8 e4       	ldi	r26, 0x48	; 72
    4b26:	b2 e4       	ldi	r27, 0x42	; 66
    4b28:	80 83       	st	Z, r24
    4b2a:	91 83       	std	Z+1, r25	; 0x01
    4b2c:	a2 83       	std	Z+2, r26	; 0x02
    4b2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b30:	8e 01       	movw	r16, r28
    4b32:	01 55       	subi	r16, 0x51	; 81
    4b34:	1f 4f       	sbci	r17, 0xFF	; 255
    4b36:	fe 01       	movw	r30, r28
    4b38:	ed 54       	subi	r30, 0x4D	; 77
    4b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3c:	60 81       	ld	r22, Z
    4b3e:	71 81       	ldd	r23, Z+1	; 0x01
    4b40:	82 81       	ldd	r24, Z+2	; 0x02
    4b42:	93 81       	ldd	r25, Z+3	; 0x03
    4b44:	26 e6       	ldi	r18, 0x66	; 102
    4b46:	36 e6       	ldi	r19, 0x66	; 102
    4b48:	46 e6       	ldi	r20, 0x66	; 102
    4b4a:	55 e4       	ldi	r21, 0x45	; 69
    4b4c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	f8 01       	movw	r30, r16
    4b56:	80 83       	st	Z, r24
    4b58:	91 83       	std	Z+1, r25	; 0x01
    4b5a:	a2 83       	std	Z+2, r26	; 0x02
    4b5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b5e:	fe 01       	movw	r30, r28
    4b60:	e1 55       	subi	r30, 0x51	; 81
    4b62:	ff 4f       	sbci	r31, 0xFF	; 255
    4b64:	60 81       	ld	r22, Z
    4b66:	71 81       	ldd	r23, Z+1	; 0x01
    4b68:	82 81       	ldd	r24, Z+2	; 0x02
    4b6a:	93 81       	ldd	r25, Z+3	; 0x03
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	40 e8       	ldi	r20, 0x80	; 128
    4b72:	5f e3       	ldi	r21, 0x3F	; 63
    4b74:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4b78:	88 23       	and	r24, r24
    4b7a:	44 f4       	brge	.+16     	; 0x4b8c <anipick+0x17e4>
		__ticks = 1;
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e3 55       	subi	r30, 0x53	; 83
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	91 83       	std	Z+1, r25	; 0x01
    4b88:	80 83       	st	Z, r24
    4b8a:	65 c0       	rjmp	.+202    	; 0x4c56 <anipick+0x18ae>
	else if (__tmp > 65535)
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e1 55       	subi	r30, 0x51	; 81
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	60 81       	ld	r22, Z
    4b94:	71 81       	ldd	r23, Z+1	; 0x01
    4b96:	82 81       	ldd	r24, Z+2	; 0x02
    4b98:	93 81       	ldd	r25, Z+3	; 0x03
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	3f ef       	ldi	r19, 0xFF	; 255
    4b9e:	4f e7       	ldi	r20, 0x7F	; 127
    4ba0:	57 e4       	ldi	r21, 0x47	; 71
    4ba2:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4ba6:	18 16       	cp	r1, r24
    4ba8:	0c f0       	brlt	.+2      	; 0x4bac <anipick+0x1804>
    4baa:	44 c0       	rjmp	.+136    	; 0x4c34 <anipick+0x188c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bac:	fe 01       	movw	r30, r28
    4bae:	ed 54       	subi	r30, 0x4D	; 77
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	60 81       	ld	r22, Z
    4bb4:	71 81       	ldd	r23, Z+1	; 0x01
    4bb6:	82 81       	ldd	r24, Z+2	; 0x02
    4bb8:	93 81       	ldd	r25, Z+3	; 0x03
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	40 e2       	ldi	r20, 0x20	; 32
    4bc0:	51 e4       	ldi	r21, 0x41	; 65
    4bc2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	8e 01       	movw	r16, r28
    4bcc:	03 55       	subi	r16, 0x53	; 83
    4bce:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	f8 01       	movw	r30, r16
    4bde:	91 83       	std	Z+1, r25	; 0x01
    4be0:	80 83       	st	Z, r24
    4be2:	1f c0       	rjmp	.+62     	; 0x4c22 <anipick+0x187a>
    4be4:	fe 01       	movw	r30, r28
    4be6:	e5 55       	subi	r30, 0x55	; 85
    4be8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bea:	80 e7       	ldi	r24, 0x70	; 112
    4bec:	91 e0       	ldi	r25, 0x01	; 1
    4bee:	91 83       	std	Z+1, r25	; 0x01
    4bf0:	80 83       	st	Z, r24
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	e5 55       	subi	r30, 0x55	; 85
    4bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf8:	80 81       	ld	r24, Z
    4bfa:	91 81       	ldd	r25, Z+1	; 0x01
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	f1 f7       	brne	.-4      	; 0x4bfc <anipick+0x1854>
    4c00:	fe 01       	movw	r30, r28
    4c02:	e5 55       	subi	r30, 0x55	; 85
    4c04:	ff 4f       	sbci	r31, 0xFF	; 255
    4c06:	91 83       	std	Z+1, r25	; 0x01
    4c08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c0a:	de 01       	movw	r26, r28
    4c0c:	a3 55       	subi	r26, 0x53	; 83
    4c0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c10:	fe 01       	movw	r30, r28
    4c12:	e3 55       	subi	r30, 0x53	; 83
    4c14:	ff 4f       	sbci	r31, 0xFF	; 255
    4c16:	80 81       	ld	r24, Z
    4c18:	91 81       	ldd	r25, Z+1	; 0x01
    4c1a:	01 97       	sbiw	r24, 0x01	; 1
    4c1c:	11 96       	adiw	r26, 0x01	; 1
    4c1e:	9c 93       	st	X, r25
    4c20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c22:	fe 01       	movw	r30, r28
    4c24:	e3 55       	subi	r30, 0x53	; 83
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	00 97       	sbiw	r24, 0x00	; 0
    4c2e:	d1 f6       	brne	.-76     	; 0x4be4 <anipick+0x183c>
    4c30:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c34:	8e 01       	movw	r16, r28
    4c36:	03 55       	subi	r16, 0x53	; 83
    4c38:	1f 4f       	sbci	r17, 0xFF	; 255
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	e1 55       	subi	r30, 0x51	; 81
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	60 81       	ld	r22, Z
    4c42:	71 81       	ldd	r23, Z+1	; 0x01
    4c44:	82 81       	ldd	r24, Z+2	; 0x02
    4c46:	93 81       	ldd	r25, Z+3	; 0x03
    4c48:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	f8 01       	movw	r30, r16
    4c52:	91 83       	std	Z+1, r25	; 0x01
    4c54:	80 83       	st	Z, r24
    4c56:	de 01       	movw	r26, r28
    4c58:	a7 55       	subi	r26, 0x57	; 87
    4c5a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	e3 55       	subi	r30, 0x53	; 83
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	80 81       	ld	r24, Z
    4c64:	91 81       	ldd	r25, Z+1	; 0x01
    4c66:	11 96       	adiw	r26, 0x01	; 1
    4c68:	9c 93       	st	X, r25
    4c6a:	8e 93       	st	-X, r24
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	e7 55       	subi	r30, 0x57	; 87
    4c70:	ff 4f       	sbci	r31, 0xFF	; 255
    4c72:	80 81       	ld	r24, Z
    4c74:	91 81       	ldd	r25, Z+1	; 0x01
    4c76:	01 97       	sbiw	r24, 0x01	; 1
    4c78:	f1 f7       	brne	.-4      	; 0x4c76 <anipick+0x18ce>
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	e7 55       	subi	r30, 0x57	; 87
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	91 83       	std	Z+1, r25	; 0x01
    4c82:	80 83       	st	Z, r24
    4c84:	0c 94 4e 2e 	jmp	0x5c9c	; 0x5c9c <anipick+0x28f4>
			}

			// Normal cases
			else
			{
				forward_mm(25);
    4c88:	89 e1       	ldi	r24, 0x19	; 25
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				stop();
    4c90:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4c94:	fe 01       	movw	r30, r28
    4c96:	eb 55       	subi	r30, 0x5B	; 91
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	a8 e4       	ldi	r26, 0x48	; 72
    4ca0:	b2 e4       	ldi	r27, 0x42	; 66
    4ca2:	80 83       	st	Z, r24
    4ca4:	91 83       	std	Z+1, r25	; 0x01
    4ca6:	a2 83       	std	Z+2, r26	; 0x02
    4ca8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4caa:	8e 01       	movw	r16, r28
    4cac:	0f 55       	subi	r16, 0x5F	; 95
    4cae:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	eb 55       	subi	r30, 0x5B	; 91
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	60 81       	ld	r22, Z
    4cb8:	71 81       	ldd	r23, Z+1	; 0x01
    4cba:	82 81       	ldd	r24, Z+2	; 0x02
    4cbc:	93 81       	ldd	r25, Z+3	; 0x03
    4cbe:	26 e6       	ldi	r18, 0x66	; 102
    4cc0:	36 e6       	ldi	r19, 0x66	; 102
    4cc2:	46 e6       	ldi	r20, 0x66	; 102
    4cc4:	55 e4       	ldi	r21, 0x45	; 69
    4cc6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	f8 01       	movw	r30, r16
    4cd0:	80 83       	st	Z, r24
    4cd2:	91 83       	std	Z+1, r25	; 0x01
    4cd4:	a2 83       	std	Z+2, r26	; 0x02
    4cd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cd8:	fe 01       	movw	r30, r28
    4cda:	ef 55       	subi	r30, 0x5F	; 95
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	60 81       	ld	r22, Z
    4ce0:	71 81       	ldd	r23, Z+1	; 0x01
    4ce2:	82 81       	ldd	r24, Z+2	; 0x02
    4ce4:	93 81       	ldd	r25, Z+3	; 0x03
    4ce6:	20 e0       	ldi	r18, 0x00	; 0
    4ce8:	30 e0       	ldi	r19, 0x00	; 0
    4cea:	40 e8       	ldi	r20, 0x80	; 128
    4cec:	5f e3       	ldi	r21, 0x3F	; 63
    4cee:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4cf2:	88 23       	and	r24, r24
    4cf4:	44 f4       	brge	.+16     	; 0x4d06 <anipick+0x195e>
		__ticks = 1;
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	e1 56       	subi	r30, 0x61	; 97
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	80 83       	st	Z, r24
    4d04:	64 c0       	rjmp	.+200    	; 0x4dce <anipick+0x1a26>
	else if (__tmp > 65535)
    4d06:	fe 01       	movw	r30, r28
    4d08:	ef 55       	subi	r30, 0x5F	; 95
    4d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0c:	60 81       	ld	r22, Z
    4d0e:	71 81       	ldd	r23, Z+1	; 0x01
    4d10:	82 81       	ldd	r24, Z+2	; 0x02
    4d12:	93 81       	ldd	r25, Z+3	; 0x03
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	3f ef       	ldi	r19, 0xFF	; 255
    4d18:	4f e7       	ldi	r20, 0x7F	; 127
    4d1a:	57 e4       	ldi	r21, 0x47	; 71
    4d1c:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4d20:	18 16       	cp	r1, r24
    4d22:	0c f0       	brlt	.+2      	; 0x4d26 <anipick+0x197e>
    4d24:	43 c0       	rjmp	.+134    	; 0x4dac <anipick+0x1a04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d26:	fe 01       	movw	r30, r28
    4d28:	eb 55       	subi	r30, 0x5B	; 91
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	60 81       	ld	r22, Z
    4d2e:	71 81       	ldd	r23, Z+1	; 0x01
    4d30:	82 81       	ldd	r24, Z+2	; 0x02
    4d32:	93 81       	ldd	r25, Z+3	; 0x03
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	40 e2       	ldi	r20, 0x20	; 32
    4d3a:	51 e4       	ldi	r21, 0x41	; 65
    4d3c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4d40:	dc 01       	movw	r26, r24
    4d42:	cb 01       	movw	r24, r22
    4d44:	8e 01       	movw	r16, r28
    4d46:	01 56       	subi	r16, 0x61	; 97
    4d48:	1f 4f       	sbci	r17, 0xFF	; 255
    4d4a:	bc 01       	movw	r22, r24
    4d4c:	cd 01       	movw	r24, r26
    4d4e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	f8 01       	movw	r30, r16
    4d58:	91 83       	std	Z+1, r25	; 0x01
    4d5a:	80 83       	st	Z, r24
    4d5c:	1f c0       	rjmp	.+62     	; 0x4d9c <anipick+0x19f4>
    4d5e:	fe 01       	movw	r30, r28
    4d60:	e3 56       	subi	r30, 0x63	; 99
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	80 e7       	ldi	r24, 0x70	; 112
    4d66:	91 e0       	ldi	r25, 0x01	; 1
    4d68:	91 83       	std	Z+1, r25	; 0x01
    4d6a:	80 83       	st	Z, r24
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	e3 56       	subi	r30, 0x63	; 99
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	80 81       	ld	r24, Z
    4d74:	91 81       	ldd	r25, Z+1	; 0x01
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	f1 f7       	brne	.-4      	; 0x4d76 <anipick+0x19ce>
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	e3 56       	subi	r30, 0x63	; 99
    4d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d80:	91 83       	std	Z+1, r25	; 0x01
    4d82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d84:	de 01       	movw	r26, r28
    4d86:	a1 56       	subi	r26, 0x61	; 97
    4d88:	bf 4f       	sbci	r27, 0xFF	; 255
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	e1 56       	subi	r30, 0x61	; 97
    4d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d90:	80 81       	ld	r24, Z
    4d92:	91 81       	ldd	r25, Z+1	; 0x01
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	11 96       	adiw	r26, 0x01	; 1
    4d98:	9c 93       	st	X, r25
    4d9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	e1 56       	subi	r30, 0x61	; 97
    4da0:	ff 4f       	sbci	r31, 0xFF	; 255
    4da2:	80 81       	ld	r24, Z
    4da4:	91 81       	ldd	r25, Z+1	; 0x01
    4da6:	00 97       	sbiw	r24, 0x00	; 0
    4da8:	d1 f6       	brne	.-76     	; 0x4d5e <anipick+0x19b6>
    4daa:	27 c0       	rjmp	.+78     	; 0x4dfa <anipick+0x1a52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dac:	8e 01       	movw	r16, r28
    4dae:	01 56       	subi	r16, 0x61	; 97
    4db0:	1f 4f       	sbci	r17, 0xFF	; 255
    4db2:	fe 01       	movw	r30, r28
    4db4:	ef 55       	subi	r30, 0x5F	; 95
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	60 81       	ld	r22, Z
    4dba:	71 81       	ldd	r23, Z+1	; 0x01
    4dbc:	82 81       	ldd	r24, Z+2	; 0x02
    4dbe:	93 81       	ldd	r25, Z+3	; 0x03
    4dc0:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	f8 01       	movw	r30, r16
    4dca:	91 83       	std	Z+1, r25	; 0x01
    4dcc:	80 83       	st	Z, r24
    4dce:	de 01       	movw	r26, r28
    4dd0:	a5 56       	subi	r26, 0x65	; 101
    4dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e1 56       	subi	r30, 0x61	; 97
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	91 81       	ldd	r25, Z+1	; 0x01
    4dde:	8d 93       	st	X+, r24
    4de0:	9c 93       	st	X, r25
    4de2:	fe 01       	movw	r30, r28
    4de4:	e5 56       	subi	r30, 0x65	; 101
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	80 81       	ld	r24, Z
    4dea:	91 81       	ldd	r25, Z+1	; 0x01
    4dec:	01 97       	sbiw	r24, 0x01	; 1
    4dee:	f1 f7       	brne	.-4      	; 0x4dec <anipick+0x1a44>
    4df0:	fe 01       	movw	r30, r28
    4df2:	e5 56       	subi	r30, 0x65	; 101
    4df4:	ff 4f       	sbci	r31, 0xFF	; 255
    4df6:	91 83       	std	Z+1, r25	; 0x01
    4df8:	80 83       	st	Z, r24
				_delay_ms(50);
				pick();
    4dfa:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
				back_mm(85);
    4dfe:	85 e5       	ldi	r24, 0x55	; 85
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
				stop();
    4e06:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	e9 56       	subi	r30, 0x69	; 105
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	a8 e4       	ldi	r26, 0x48	; 72
    4e16:	b2 e4       	ldi	r27, 0x42	; 66
    4e18:	80 83       	st	Z, r24
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	a2 83       	std	Z+2, r26	; 0x02
    4e1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e20:	8e 01       	movw	r16, r28
    4e22:	0d 56       	subi	r16, 0x6D	; 109
    4e24:	1f 4f       	sbci	r17, 0xFF	; 255
    4e26:	fe 01       	movw	r30, r28
    4e28:	e9 56       	subi	r30, 0x69	; 105
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	60 81       	ld	r22, Z
    4e2e:	71 81       	ldd	r23, Z+1	; 0x01
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	93 81       	ldd	r25, Z+3	; 0x03
    4e34:	26 e6       	ldi	r18, 0x66	; 102
    4e36:	36 e6       	ldi	r19, 0x66	; 102
    4e38:	46 e6       	ldi	r20, 0x66	; 102
    4e3a:	55 e4       	ldi	r21, 0x45	; 69
    4e3c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4e40:	dc 01       	movw	r26, r24
    4e42:	cb 01       	movw	r24, r22
    4e44:	f8 01       	movw	r30, r16
    4e46:	80 83       	st	Z, r24
    4e48:	91 83       	std	Z+1, r25	; 0x01
    4e4a:	a2 83       	std	Z+2, r26	; 0x02
    4e4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e4e:	fe 01       	movw	r30, r28
    4e50:	ed 56       	subi	r30, 0x6D	; 109
    4e52:	ff 4f       	sbci	r31, 0xFF	; 255
    4e54:	60 81       	ld	r22, Z
    4e56:	71 81       	ldd	r23, Z+1	; 0x01
    4e58:	82 81       	ldd	r24, Z+2	; 0x02
    4e5a:	93 81       	ldd	r25, Z+3	; 0x03
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	40 e8       	ldi	r20, 0x80	; 128
    4e62:	5f e3       	ldi	r21, 0x3F	; 63
    4e64:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4e68:	88 23       	and	r24, r24
    4e6a:	44 f4       	brge	.+16     	; 0x4e7c <anipick+0x1ad4>
		__ticks = 1;
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	ef 56       	subi	r30, 0x6F	; 111
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	91 83       	std	Z+1, r25	; 0x01
    4e78:	80 83       	st	Z, r24
    4e7a:	64 c0       	rjmp	.+200    	; 0x4f44 <anipick+0x1b9c>
	else if (__tmp > 65535)
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	ed 56       	subi	r30, 0x6D	; 109
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	3f ef       	ldi	r19, 0xFF	; 255
    4e8e:	4f e7       	ldi	r20, 0x7F	; 127
    4e90:	57 e4       	ldi	r21, 0x47	; 71
    4e92:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    4e96:	18 16       	cp	r1, r24
    4e98:	0c f0       	brlt	.+2      	; 0x4e9c <anipick+0x1af4>
    4e9a:	43 c0       	rjmp	.+134    	; 0x4f22 <anipick+0x1b7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	e9 56       	subi	r30, 0x69	; 105
    4ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea2:	60 81       	ld	r22, Z
    4ea4:	71 81       	ldd	r23, Z+1	; 0x01
    4ea6:	82 81       	ldd	r24, Z+2	; 0x02
    4ea8:	93 81       	ldd	r25, Z+3	; 0x03
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	40 e2       	ldi	r20, 0x20	; 32
    4eb0:	51 e4       	ldi	r21, 0x41	; 65
    4eb2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	8e 01       	movw	r16, r28
    4ebc:	0f 56       	subi	r16, 0x6F	; 111
    4ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec0:	bc 01       	movw	r22, r24
    4ec2:	cd 01       	movw	r24, r26
    4ec4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4ec8:	dc 01       	movw	r26, r24
    4eca:	cb 01       	movw	r24, r22
    4ecc:	f8 01       	movw	r30, r16
    4ece:	91 83       	std	Z+1, r25	; 0x01
    4ed0:	80 83       	st	Z, r24
    4ed2:	1f c0       	rjmp	.+62     	; 0x4f12 <anipick+0x1b6a>
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	e1 57       	subi	r30, 0x71	; 113
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	80 e7       	ldi	r24, 0x70	; 112
    4edc:	91 e0       	ldi	r25, 0x01	; 1
    4ede:	91 83       	std	Z+1, r25	; 0x01
    4ee0:	80 83       	st	Z, r24
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	e1 57       	subi	r30, 0x71	; 113
    4ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee8:	80 81       	ld	r24, Z
    4eea:	91 81       	ldd	r25, Z+1	; 0x01
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <anipick+0x1b44>
    4ef0:	fe 01       	movw	r30, r28
    4ef2:	e1 57       	subi	r30, 0x71	; 113
    4ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef6:	91 83       	std	Z+1, r25	; 0x01
    4ef8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4efa:	de 01       	movw	r26, r28
    4efc:	af 56       	subi	r26, 0x6F	; 111
    4efe:	bf 4f       	sbci	r27, 0xFF	; 255
    4f00:	fe 01       	movw	r30, r28
    4f02:	ef 56       	subi	r30, 0x6F	; 111
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 81       	ld	r24, Z
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	11 96       	adiw	r26, 0x01	; 1
    4f0e:	9c 93       	st	X, r25
    4f10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f12:	fe 01       	movw	r30, r28
    4f14:	ef 56       	subi	r30, 0x6F	; 111
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	80 81       	ld	r24, Z
    4f1a:	91 81       	ldd	r25, Z+1	; 0x01
    4f1c:	00 97       	sbiw	r24, 0x00	; 0
    4f1e:	d1 f6       	brne	.-76     	; 0x4ed4 <anipick+0x1b2c>
    4f20:	bd c6       	rjmp	.+3450   	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f22:	8e 01       	movw	r16, r28
    4f24:	0f 56       	subi	r16, 0x6F	; 111
    4f26:	1f 4f       	sbci	r17, 0xFF	; 255
    4f28:	fe 01       	movw	r30, r28
    4f2a:	ed 56       	subi	r30, 0x6D	; 109
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	60 81       	ld	r22, Z
    4f30:	71 81       	ldd	r23, Z+1	; 0x01
    4f32:	82 81       	ldd	r24, Z+2	; 0x02
    4f34:	93 81       	ldd	r25, Z+3	; 0x03
    4f36:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	f8 01       	movw	r30, r16
    4f40:	91 83       	std	Z+1, r25	; 0x01
    4f42:	80 83       	st	Z, r24
    4f44:	de 01       	movw	r26, r28
    4f46:	a3 57       	subi	r26, 0x73	; 115
    4f48:	bf 4f       	sbci	r27, 0xFF	; 255
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	ef 56       	subi	r30, 0x6F	; 111
    4f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f50:	80 81       	ld	r24, Z
    4f52:	91 81       	ldd	r25, Z+1	; 0x01
    4f54:	11 96       	adiw	r26, 0x01	; 1
    4f56:	9c 93       	st	X, r25
    4f58:	8e 93       	st	-X, r24
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	e3 57       	subi	r30, 0x73	; 115
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	80 81       	ld	r24, Z
    4f62:	91 81       	ldd	r25, Z+1	; 0x01
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <anipick+0x1bbc>
    4f68:	fe 01       	movw	r30, r28
    4f6a:	e3 57       	subi	r30, 0x73	; 115
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	91 83       	std	Z+1, r25	; 0x01
    4f70:	80 83       	st	Z, r24
    4f72:	94 c6       	rjmp	.+3368   	; 0x5c9c <anipick+0x28f4>
			}
		}
		// If robot is already at the animal's location
		else
		{
			forward_mm(50);
    4f74:	82 e3       	ldi	r24, 0x32	; 50
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
			stop();
    4f7c:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    4f80:	fe 01       	movw	r30, r28
    4f82:	e7 57       	subi	r30, 0x77	; 119
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	a8 e4       	ldi	r26, 0x48	; 72
    4f8c:	b2 e4       	ldi	r27, 0x42	; 66
    4f8e:	80 83       	st	Z, r24
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	a2 83       	std	Z+2, r26	; 0x02
    4f94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f96:	8e 01       	movw	r16, r28
    4f98:	0b 57       	subi	r16, 0x7B	; 123
    4f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	e7 57       	subi	r30, 0x77	; 119
    4fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa2:	60 81       	ld	r22, Z
    4fa4:	71 81       	ldd	r23, Z+1	; 0x01
    4fa6:	82 81       	ldd	r24, Z+2	; 0x02
    4fa8:	93 81       	ldd	r25, Z+3	; 0x03
    4faa:	26 e6       	ldi	r18, 0x66	; 102
    4fac:	36 e6       	ldi	r19, 0x66	; 102
    4fae:	46 e6       	ldi	r20, 0x66	; 102
    4fb0:	55 e4       	ldi	r21, 0x45	; 69
    4fb2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	cb 01       	movw	r24, r22
    4fba:	f8 01       	movw	r30, r16
    4fbc:	80 83       	st	Z, r24
    4fbe:	91 83       	std	Z+1, r25	; 0x01
    4fc0:	a2 83       	std	Z+2, r26	; 0x02
    4fc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	eb 57       	subi	r30, 0x7B	; 123
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	60 81       	ld	r22, Z
    4fcc:	71 81       	ldd	r23, Z+1	; 0x01
    4fce:	82 81       	ldd	r24, Z+2	; 0x02
    4fd0:	93 81       	ldd	r25, Z+3	; 0x03
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	40 e8       	ldi	r20, 0x80	; 128
    4fd8:	5f e3       	ldi	r21, 0x3F	; 63
    4fda:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    4fde:	88 23       	and	r24, r24
    4fe0:	44 f4       	brge	.+16     	; 0x4ff2 <anipick+0x1c4a>
		__ticks = 1;
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	ed 57       	subi	r30, 0x7D	; 125
    4fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	91 83       	std	Z+1, r25	; 0x01
    4fee:	80 83       	st	Z, r24
    4ff0:	64 c0       	rjmp	.+200    	; 0x50ba <anipick+0x1d12>
	else if (__tmp > 65535)
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	eb 57       	subi	r30, 0x7B	; 123
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	60 81       	ld	r22, Z
    4ffa:	71 81       	ldd	r23, Z+1	; 0x01
    4ffc:	82 81       	ldd	r24, Z+2	; 0x02
    4ffe:	93 81       	ldd	r25, Z+3	; 0x03
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	3f ef       	ldi	r19, 0xFF	; 255
    5004:	4f e7       	ldi	r20, 0x7F	; 127
    5006:	57 e4       	ldi	r21, 0x47	; 71
    5008:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    500c:	18 16       	cp	r1, r24
    500e:	0c f0       	brlt	.+2      	; 0x5012 <anipick+0x1c6a>
    5010:	43 c0       	rjmp	.+134    	; 0x5098 <anipick+0x1cf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5012:	fe 01       	movw	r30, r28
    5014:	e7 57       	subi	r30, 0x77	; 119
    5016:	ff 4f       	sbci	r31, 0xFF	; 255
    5018:	60 81       	ld	r22, Z
    501a:	71 81       	ldd	r23, Z+1	; 0x01
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	93 81       	ldd	r25, Z+3	; 0x03
    5020:	20 e0       	ldi	r18, 0x00	; 0
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	40 e2       	ldi	r20, 0x20	; 32
    5026:	51 e4       	ldi	r21, 0x41	; 65
    5028:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    502c:	dc 01       	movw	r26, r24
    502e:	cb 01       	movw	r24, r22
    5030:	8e 01       	movw	r16, r28
    5032:	0d 57       	subi	r16, 0x7D	; 125
    5034:	1f 4f       	sbci	r17, 0xFF	; 255
    5036:	bc 01       	movw	r22, r24
    5038:	cd 01       	movw	r24, r26
    503a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    503e:	dc 01       	movw	r26, r24
    5040:	cb 01       	movw	r24, r22
    5042:	f8 01       	movw	r30, r16
    5044:	91 83       	std	Z+1, r25	; 0x01
    5046:	80 83       	st	Z, r24
    5048:	1f c0       	rjmp	.+62     	; 0x5088 <anipick+0x1ce0>
    504a:	fe 01       	movw	r30, r28
    504c:	ef 57       	subi	r30, 0x7F	; 127
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	80 e7       	ldi	r24, 0x70	; 112
    5052:	91 e0       	ldi	r25, 0x01	; 1
    5054:	91 83       	std	Z+1, r25	; 0x01
    5056:	80 83       	st	Z, r24
    5058:	fe 01       	movw	r30, r28
    505a:	ef 57       	subi	r30, 0x7F	; 127
    505c:	ff 4f       	sbci	r31, 0xFF	; 255
    505e:	80 81       	ld	r24, Z
    5060:	91 81       	ldd	r25, Z+1	; 0x01
    5062:	01 97       	sbiw	r24, 0x01	; 1
    5064:	f1 f7       	brne	.-4      	; 0x5062 <anipick+0x1cba>
    5066:	fe 01       	movw	r30, r28
    5068:	ef 57       	subi	r30, 0x7F	; 127
    506a:	ff 4f       	sbci	r31, 0xFF	; 255
    506c:	91 83       	std	Z+1, r25	; 0x01
    506e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5070:	de 01       	movw	r26, r28
    5072:	ad 57       	subi	r26, 0x7D	; 125
    5074:	bf 4f       	sbci	r27, 0xFF	; 255
    5076:	fe 01       	movw	r30, r28
    5078:	ed 57       	subi	r30, 0x7D	; 125
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	01 97       	sbiw	r24, 0x01	; 1
    5082:	11 96       	adiw	r26, 0x01	; 1
    5084:	9c 93       	st	X, r25
    5086:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5088:	fe 01       	movw	r30, r28
    508a:	ed 57       	subi	r30, 0x7D	; 125
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	80 81       	ld	r24, Z
    5090:	91 81       	ldd	r25, Z+1	; 0x01
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	d1 f6       	brne	.-76     	; 0x504a <anipick+0x1ca2>
    5096:	27 c0       	rjmp	.+78     	; 0x50e6 <anipick+0x1d3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5098:	8e 01       	movw	r16, r28
    509a:	0d 57       	subi	r16, 0x7D	; 125
    509c:	1f 4f       	sbci	r17, 0xFF	; 255
    509e:	fe 01       	movw	r30, r28
    50a0:	eb 57       	subi	r30, 0x7B	; 123
    50a2:	ff 4f       	sbci	r31, 0xFF	; 255
    50a4:	60 81       	ld	r22, Z
    50a6:	71 81       	ldd	r23, Z+1	; 0x01
    50a8:	82 81       	ldd	r24, Z+2	; 0x02
    50aa:	93 81       	ldd	r25, Z+3	; 0x03
    50ac:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	f8 01       	movw	r30, r16
    50b6:	91 83       	std	Z+1, r25	; 0x01
    50b8:	80 83       	st	Z, r24
    50ba:	de 01       	movw	r26, r28
    50bc:	a1 58       	subi	r26, 0x81	; 129
    50be:	bf 4f       	sbci	r27, 0xFF	; 255
    50c0:	fe 01       	movw	r30, r28
    50c2:	ed 57       	subi	r30, 0x7D	; 125
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	80 81       	ld	r24, Z
    50c8:	91 81       	ldd	r25, Z+1	; 0x01
    50ca:	8d 93       	st	X+, r24
    50cc:	9c 93       	st	X, r25
    50ce:	fe 01       	movw	r30, r28
    50d0:	e1 58       	subi	r30, 0x81	; 129
    50d2:	ff 4f       	sbci	r31, 0xFF	; 255
    50d4:	80 81       	ld	r24, Z
    50d6:	91 81       	ldd	r25, Z+1	; 0x01
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	f1 f7       	brne	.-4      	; 0x50d8 <anipick+0x1d30>
    50dc:	fe 01       	movw	r30, r28
    50de:	e1 58       	subi	r30, 0x81	; 129
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	91 83       	std	Z+1, r25	; 0x01
    50e4:	80 83       	st	Z, r24
			_delay_ms(50);
			pick();
    50e6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
			back_mm(55);
    50ea:	87 e3       	ldi	r24, 0x37	; 55
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
			stop();
    50f2:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    50f6:	fe 01       	movw	r30, r28
    50f8:	e5 58       	subi	r30, 0x85	; 133
    50fa:	ff 4f       	sbci	r31, 0xFF	; 255
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	a8 e4       	ldi	r26, 0x48	; 72
    5102:	b2 e4       	ldi	r27, 0x42	; 66
    5104:	80 83       	st	Z, r24
    5106:	91 83       	std	Z+1, r25	; 0x01
    5108:	a2 83       	std	Z+2, r26	; 0x02
    510a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    510c:	8e 01       	movw	r16, r28
    510e:	09 58       	subi	r16, 0x89	; 137
    5110:	1f 4f       	sbci	r17, 0xFF	; 255
    5112:	fe 01       	movw	r30, r28
    5114:	e5 58       	subi	r30, 0x85	; 133
    5116:	ff 4f       	sbci	r31, 0xFF	; 255
    5118:	60 81       	ld	r22, Z
    511a:	71 81       	ldd	r23, Z+1	; 0x01
    511c:	82 81       	ldd	r24, Z+2	; 0x02
    511e:	93 81       	ldd	r25, Z+3	; 0x03
    5120:	26 e6       	ldi	r18, 0x66	; 102
    5122:	36 e6       	ldi	r19, 0x66	; 102
    5124:	46 e6       	ldi	r20, 0x66	; 102
    5126:	55 e4       	ldi	r21, 0x45	; 69
    5128:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	f8 01       	movw	r30, r16
    5132:	80 83       	st	Z, r24
    5134:	91 83       	std	Z+1, r25	; 0x01
    5136:	a2 83       	std	Z+2, r26	; 0x02
    5138:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    513a:	fe 01       	movw	r30, r28
    513c:	e9 58       	subi	r30, 0x89	; 137
    513e:	ff 4f       	sbci	r31, 0xFF	; 255
    5140:	60 81       	ld	r22, Z
    5142:	71 81       	ldd	r23, Z+1	; 0x01
    5144:	82 81       	ldd	r24, Z+2	; 0x02
    5146:	93 81       	ldd	r25, Z+3	; 0x03
    5148:	20 e0       	ldi	r18, 0x00	; 0
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	40 e8       	ldi	r20, 0x80	; 128
    514e:	5f e3       	ldi	r21, 0x3F	; 63
    5150:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5154:	88 23       	and	r24, r24
    5156:	44 f4       	brge	.+16     	; 0x5168 <anipick+0x1dc0>
		__ticks = 1;
    5158:	fe 01       	movw	r30, r28
    515a:	eb 58       	subi	r30, 0x8B	; 139
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	91 83       	std	Z+1, r25	; 0x01
    5164:	80 83       	st	Z, r24
    5166:	64 c0       	rjmp	.+200    	; 0x5230 <anipick+0x1e88>
	else if (__tmp > 65535)
    5168:	fe 01       	movw	r30, r28
    516a:	e9 58       	subi	r30, 0x89	; 137
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	93 81       	ldd	r25, Z+3	; 0x03
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	3f ef       	ldi	r19, 0xFF	; 255
    517a:	4f e7       	ldi	r20, 0x7F	; 127
    517c:	57 e4       	ldi	r21, 0x47	; 71
    517e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5182:	18 16       	cp	r1, r24
    5184:	0c f0       	brlt	.+2      	; 0x5188 <anipick+0x1de0>
    5186:	43 c0       	rjmp	.+134    	; 0x520e <anipick+0x1e66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5188:	fe 01       	movw	r30, r28
    518a:	e5 58       	subi	r30, 0x85	; 133
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	40 e2       	ldi	r20, 0x20	; 32
    519c:	51 e4       	ldi	r21, 0x41	; 65
    519e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    51a2:	dc 01       	movw	r26, r24
    51a4:	cb 01       	movw	r24, r22
    51a6:	8e 01       	movw	r16, r28
    51a8:	0b 58       	subi	r16, 0x8B	; 139
    51aa:	1f 4f       	sbci	r17, 0xFF	; 255
    51ac:	bc 01       	movw	r22, r24
    51ae:	cd 01       	movw	r24, r26
    51b0:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    51b4:	dc 01       	movw	r26, r24
    51b6:	cb 01       	movw	r24, r22
    51b8:	f8 01       	movw	r30, r16
    51ba:	91 83       	std	Z+1, r25	; 0x01
    51bc:	80 83       	st	Z, r24
    51be:	1f c0       	rjmp	.+62     	; 0x51fe <anipick+0x1e56>
    51c0:	fe 01       	movw	r30, r28
    51c2:	ed 58       	subi	r30, 0x8D	; 141
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	80 e7       	ldi	r24, 0x70	; 112
    51c8:	91 e0       	ldi	r25, 0x01	; 1
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	80 83       	st	Z, r24
    51ce:	fe 01       	movw	r30, r28
    51d0:	ed 58       	subi	r30, 0x8D	; 141
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	80 81       	ld	r24, Z
    51d6:	91 81       	ldd	r25, Z+1	; 0x01
    51d8:	01 97       	sbiw	r24, 0x01	; 1
    51da:	f1 f7       	brne	.-4      	; 0x51d8 <anipick+0x1e30>
    51dc:	fe 01       	movw	r30, r28
    51de:	ed 58       	subi	r30, 0x8D	; 141
    51e0:	ff 4f       	sbci	r31, 0xFF	; 255
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e6:	de 01       	movw	r26, r28
    51e8:	ab 58       	subi	r26, 0x8B	; 139
    51ea:	bf 4f       	sbci	r27, 0xFF	; 255
    51ec:	fe 01       	movw	r30, r28
    51ee:	eb 58       	subi	r30, 0x8B	; 139
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	80 81       	ld	r24, Z
    51f4:	91 81       	ldd	r25, Z+1	; 0x01
    51f6:	01 97       	sbiw	r24, 0x01	; 1
    51f8:	11 96       	adiw	r26, 0x01	; 1
    51fa:	9c 93       	st	X, r25
    51fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51fe:	fe 01       	movw	r30, r28
    5200:	eb 58       	subi	r30, 0x8B	; 139
    5202:	ff 4f       	sbci	r31, 0xFF	; 255
    5204:	80 81       	ld	r24, Z
    5206:	91 81       	ldd	r25, Z+1	; 0x01
    5208:	00 97       	sbiw	r24, 0x00	; 0
    520a:	d1 f6       	brne	.-76     	; 0x51c0 <anipick+0x1e18>
    520c:	47 c5       	rjmp	.+2702   	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    520e:	8e 01       	movw	r16, r28
    5210:	0b 58       	subi	r16, 0x8B	; 139
    5212:	1f 4f       	sbci	r17, 0xFF	; 255
    5214:	fe 01       	movw	r30, r28
    5216:	e9 58       	subi	r30, 0x89	; 137
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	60 81       	ld	r22, Z
    521c:	71 81       	ldd	r23, Z+1	; 0x01
    521e:	82 81       	ldd	r24, Z+2	; 0x02
    5220:	93 81       	ldd	r25, Z+3	; 0x03
    5222:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	f8 01       	movw	r30, r16
    522c:	91 83       	std	Z+1, r25	; 0x01
    522e:	80 83       	st	Z, r24
    5230:	de 01       	movw	r26, r28
    5232:	af 58       	subi	r26, 0x8F	; 143
    5234:	bf 4f       	sbci	r27, 0xFF	; 255
    5236:	fe 01       	movw	r30, r28
    5238:	eb 58       	subi	r30, 0x8B	; 139
    523a:	ff 4f       	sbci	r31, 0xFF	; 255
    523c:	80 81       	ld	r24, Z
    523e:	91 81       	ldd	r25, Z+1	; 0x01
    5240:	11 96       	adiw	r26, 0x01	; 1
    5242:	9c 93       	st	X, r25
    5244:	8e 93       	st	-X, r24
    5246:	fe 01       	movw	r30, r28
    5248:	ef 58       	subi	r30, 0x8F	; 143
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	80 81       	ld	r24, Z
    524e:	91 81       	ldd	r25, Z+1	; 0x01
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	f1 f7       	brne	.-4      	; 0x5250 <anipick+0x1ea8>
    5254:	fe 01       	movw	r30, r28
    5256:	ef 58       	subi	r30, 0x8F	; 143
    5258:	ff 4f       	sbci	r31, 0xFF	; 255
    525a:	91 83       	std	Z+1, r25	; 0x01
    525c:	80 83       	st	Z, r24
    525e:	1e c5       	rjmp	.+2620   	; 0x5c9c <anipick+0x28f4>
			_delay_ms(50);
		}
	}

	else if(pos[1]=='1' && pos[0]!='A' && pos[0]!='F') // If animal is at the bottom part of the arena
    5260:	fe 01       	movw	r30, r28
    5262:	e7 57       	subi	r30, 0x77	; 119
    5264:	fe 4f       	sbci	r31, 0xFE	; 254
    5266:	80 81       	ld	r24, Z
    5268:	91 81       	ldd	r25, Z+1	; 0x01
    526a:	fc 01       	movw	r30, r24
    526c:	31 96       	adiw	r30, 0x01	; 1
    526e:	80 81       	ld	r24, Z
    5270:	81 33       	cpi	r24, 0x31	; 49
    5272:	09 f0       	breq	.+2      	; 0x5276 <anipick+0x1ece>
    5274:	f0 c2       	rjmp	.+1504   	; 0x5856 <anipick+0x24ae>
    5276:	fe 01       	movw	r30, r28
    5278:	e7 57       	subi	r30, 0x77	; 119
    527a:	fe 4f       	sbci	r31, 0xFE	; 254
    527c:	01 90       	ld	r0, Z+
    527e:	f0 81       	ld	r31, Z
    5280:	e0 2d       	mov	r30, r0
    5282:	80 81       	ld	r24, Z
    5284:	81 34       	cpi	r24, 0x41	; 65
    5286:	09 f4       	brne	.+2      	; 0x528a <anipick+0x1ee2>
    5288:	e6 c2       	rjmp	.+1484   	; 0x5856 <anipick+0x24ae>
    528a:	fe 01       	movw	r30, r28
    528c:	e7 57       	subi	r30, 0x77	; 119
    528e:	fe 4f       	sbci	r31, 0xFE	; 254
    5290:	01 90       	ld	r0, Z+
    5292:	f0 81       	ld	r31, Z
    5294:	e0 2d       	mov	r30, r0
    5296:	80 81       	ld	r24, Z
    5298:	86 34       	cpi	r24, 0x46	; 70
    529a:	09 f4       	brne	.+2      	; 0x529e <anipick+0x1ef6>
    529c:	dc c2       	rjmp	.+1464   	; 0x5856 <anipick+0x24ae>
	{
		if(r==1 || l==1)
    529e:	80 91 28 03 	lds	r24, 0x0328
    52a2:	90 91 29 03 	lds	r25, 0x0329
    52a6:	81 30       	cpi	r24, 0x01	; 1
    52a8:	91 05       	cpc	r25, r1
    52aa:	41 f0       	breq	.+16     	; 0x52bc <anipick+0x1f14>
    52ac:	80 91 2a 03 	lds	r24, 0x032A
    52b0:	90 91 2b 03 	lds	r25, 0x032B
    52b4:	81 30       	cpi	r24, 0x01	; 1
    52b6:	91 05       	cpc	r25, r1
    52b8:	09 f0       	breq	.+2      	; 0x52bc <anipick+0x1f14>
    52ba:	86 c1       	rjmp	.+780    	; 0x55c8 <anipick+0x2220>
		{
			a=turnsoft(r);
    52bc:	80 91 28 03 	lds	r24, 0x0328
    52c0:	90 91 29 03 	lds	r25, 0x0329
    52c4:	0e 94 32 13 	call	0x2664	; 0x2664 <turnsoft>
    52c8:	90 93 03 02 	sts	0x0203, r25
    52cc:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    52d0:	80 91 02 02 	lds	r24, 0x0202
    52d4:	90 91 03 02 	lds	r25, 0x0203
    52d8:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
			forward_mm(25);
    52dc:	89 e1       	ldi	r24, 0x19	; 25
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
			stop();
    52e4:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    52e8:	fe 01       	movw	r30, r28
    52ea:	e3 59       	subi	r30, 0x93	; 147
    52ec:	ff 4f       	sbci	r31, 0xFF	; 255
    52ee:	80 e0       	ldi	r24, 0x00	; 0
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	a8 e4       	ldi	r26, 0x48	; 72
    52f4:	b2 e4       	ldi	r27, 0x42	; 66
    52f6:	80 83       	st	Z, r24
    52f8:	91 83       	std	Z+1, r25	; 0x01
    52fa:	a2 83       	std	Z+2, r26	; 0x02
    52fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52fe:	8e 01       	movw	r16, r28
    5300:	07 59       	subi	r16, 0x97	; 151
    5302:	1f 4f       	sbci	r17, 0xFF	; 255
    5304:	fe 01       	movw	r30, r28
    5306:	e3 59       	subi	r30, 0x93	; 147
    5308:	ff 4f       	sbci	r31, 0xFF	; 255
    530a:	60 81       	ld	r22, Z
    530c:	71 81       	ldd	r23, Z+1	; 0x01
    530e:	82 81       	ldd	r24, Z+2	; 0x02
    5310:	93 81       	ldd	r25, Z+3	; 0x03
    5312:	26 e6       	ldi	r18, 0x66	; 102
    5314:	36 e6       	ldi	r19, 0x66	; 102
    5316:	46 e6       	ldi	r20, 0x66	; 102
    5318:	55 e4       	ldi	r21, 0x45	; 69
    531a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    531e:	dc 01       	movw	r26, r24
    5320:	cb 01       	movw	r24, r22
    5322:	f8 01       	movw	r30, r16
    5324:	80 83       	st	Z, r24
    5326:	91 83       	std	Z+1, r25	; 0x01
    5328:	a2 83       	std	Z+2, r26	; 0x02
    532a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    532c:	fe 01       	movw	r30, r28
    532e:	e7 59       	subi	r30, 0x97	; 151
    5330:	ff 4f       	sbci	r31, 0xFF	; 255
    5332:	60 81       	ld	r22, Z
    5334:	71 81       	ldd	r23, Z+1	; 0x01
    5336:	82 81       	ldd	r24, Z+2	; 0x02
    5338:	93 81       	ldd	r25, Z+3	; 0x03
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	40 e8       	ldi	r20, 0x80	; 128
    5340:	5f e3       	ldi	r21, 0x3F	; 63
    5342:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5346:	88 23       	and	r24, r24
    5348:	44 f4       	brge	.+16     	; 0x535a <anipick+0x1fb2>
		__ticks = 1;
    534a:	fe 01       	movw	r30, r28
    534c:	e9 59       	subi	r30, 0x99	; 153
    534e:	ff 4f       	sbci	r31, 0xFF	; 255
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	91 83       	std	Z+1, r25	; 0x01
    5356:	80 83       	st	Z, r24
    5358:	64 c0       	rjmp	.+200    	; 0x5422 <anipick+0x207a>
	else if (__tmp > 65535)
    535a:	fe 01       	movw	r30, r28
    535c:	e7 59       	subi	r30, 0x97	; 151
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	60 81       	ld	r22, Z
    5362:	71 81       	ldd	r23, Z+1	; 0x01
    5364:	82 81       	ldd	r24, Z+2	; 0x02
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	3f ef       	ldi	r19, 0xFF	; 255
    536c:	4f e7       	ldi	r20, 0x7F	; 127
    536e:	57 e4       	ldi	r21, 0x47	; 71
    5370:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5374:	18 16       	cp	r1, r24
    5376:	0c f0       	brlt	.+2      	; 0x537a <anipick+0x1fd2>
    5378:	43 c0       	rjmp	.+134    	; 0x5400 <anipick+0x2058>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    537a:	fe 01       	movw	r30, r28
    537c:	e3 59       	subi	r30, 0x93	; 147
    537e:	ff 4f       	sbci	r31, 0xFF	; 255
    5380:	60 81       	ld	r22, Z
    5382:	71 81       	ldd	r23, Z+1	; 0x01
    5384:	82 81       	ldd	r24, Z+2	; 0x02
    5386:	93 81       	ldd	r25, Z+3	; 0x03
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	40 e2       	ldi	r20, 0x20	; 32
    538e:	51 e4       	ldi	r21, 0x41	; 65
    5390:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	8e 01       	movw	r16, r28
    539a:	09 59       	subi	r16, 0x99	; 153
    539c:	1f 4f       	sbci	r17, 0xFF	; 255
    539e:	bc 01       	movw	r22, r24
    53a0:	cd 01       	movw	r24, r26
    53a2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	f8 01       	movw	r30, r16
    53ac:	91 83       	std	Z+1, r25	; 0x01
    53ae:	80 83       	st	Z, r24
    53b0:	1f c0       	rjmp	.+62     	; 0x53f0 <anipick+0x2048>
    53b2:	fe 01       	movw	r30, r28
    53b4:	eb 59       	subi	r30, 0x9B	; 155
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	80 e7       	ldi	r24, 0x70	; 112
    53ba:	91 e0       	ldi	r25, 0x01	; 1
    53bc:	91 83       	std	Z+1, r25	; 0x01
    53be:	80 83       	st	Z, r24
    53c0:	fe 01       	movw	r30, r28
    53c2:	eb 59       	subi	r30, 0x9B	; 155
    53c4:	ff 4f       	sbci	r31, 0xFF	; 255
    53c6:	80 81       	ld	r24, Z
    53c8:	91 81       	ldd	r25, Z+1	; 0x01
    53ca:	01 97       	sbiw	r24, 0x01	; 1
    53cc:	f1 f7       	brne	.-4      	; 0x53ca <anipick+0x2022>
    53ce:	fe 01       	movw	r30, r28
    53d0:	eb 59       	subi	r30, 0x9B	; 155
    53d2:	ff 4f       	sbci	r31, 0xFF	; 255
    53d4:	91 83       	std	Z+1, r25	; 0x01
    53d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d8:	de 01       	movw	r26, r28
    53da:	a9 59       	subi	r26, 0x99	; 153
    53dc:	bf 4f       	sbci	r27, 0xFF	; 255
    53de:	fe 01       	movw	r30, r28
    53e0:	e9 59       	subi	r30, 0x99	; 153
    53e2:	ff 4f       	sbci	r31, 0xFF	; 255
    53e4:	80 81       	ld	r24, Z
    53e6:	91 81       	ldd	r25, Z+1	; 0x01
    53e8:	01 97       	sbiw	r24, 0x01	; 1
    53ea:	11 96       	adiw	r26, 0x01	; 1
    53ec:	9c 93       	st	X, r25
    53ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53f0:	fe 01       	movw	r30, r28
    53f2:	e9 59       	subi	r30, 0x99	; 153
    53f4:	ff 4f       	sbci	r31, 0xFF	; 255
    53f6:	80 81       	ld	r24, Z
    53f8:	91 81       	ldd	r25, Z+1	; 0x01
    53fa:	00 97       	sbiw	r24, 0x00	; 0
    53fc:	d1 f6       	brne	.-76     	; 0x53b2 <anipick+0x200a>
    53fe:	27 c0       	rjmp	.+78     	; 0x544e <anipick+0x20a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5400:	8e 01       	movw	r16, r28
    5402:	09 59       	subi	r16, 0x99	; 153
    5404:	1f 4f       	sbci	r17, 0xFF	; 255
    5406:	fe 01       	movw	r30, r28
    5408:	e7 59       	subi	r30, 0x97	; 151
    540a:	ff 4f       	sbci	r31, 0xFF	; 255
    540c:	60 81       	ld	r22, Z
    540e:	71 81       	ldd	r23, Z+1	; 0x01
    5410:	82 81       	ldd	r24, Z+2	; 0x02
    5412:	93 81       	ldd	r25, Z+3	; 0x03
    5414:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	f8 01       	movw	r30, r16
    541e:	91 83       	std	Z+1, r25	; 0x01
    5420:	80 83       	st	Z, r24
    5422:	de 01       	movw	r26, r28
    5424:	ad 59       	subi	r26, 0x9D	; 157
    5426:	bf 4f       	sbci	r27, 0xFF	; 255
    5428:	fe 01       	movw	r30, r28
    542a:	e9 59       	subi	r30, 0x99	; 153
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	80 81       	ld	r24, Z
    5430:	91 81       	ldd	r25, Z+1	; 0x01
    5432:	8d 93       	st	X+, r24
    5434:	9c 93       	st	X, r25
    5436:	fe 01       	movw	r30, r28
    5438:	ed 59       	subi	r30, 0x9D	; 157
    543a:	ff 4f       	sbci	r31, 0xFF	; 255
    543c:	80 81       	ld	r24, Z
    543e:	91 81       	ldd	r25, Z+1	; 0x01
    5440:	01 97       	sbiw	r24, 0x01	; 1
    5442:	f1 f7       	brne	.-4      	; 0x5440 <anipick+0x2098>
    5444:	fe 01       	movw	r30, r28
    5446:	ed 59       	subi	r30, 0x9D	; 157
    5448:	ff 4f       	sbci	r31, 0xFF	; 255
    544a:	91 83       	std	Z+1, r25	; 0x01
    544c:	80 83       	st	Z, r24
			_delay_ms(50);
			pick();
    544e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
			back_mm(85);
    5452:	85 e5       	ldi	r24, 0x55	; 85
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
			stop();
    545a:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    545e:	fe 01       	movw	r30, r28
    5460:	e1 5a       	subi	r30, 0xA1	; 161
    5462:	ff 4f       	sbci	r31, 0xFF	; 255
    5464:	80 e0       	ldi	r24, 0x00	; 0
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	a8 e4       	ldi	r26, 0x48	; 72
    546a:	b2 e4       	ldi	r27, 0x42	; 66
    546c:	80 83       	st	Z, r24
    546e:	91 83       	std	Z+1, r25	; 0x01
    5470:	a2 83       	std	Z+2, r26	; 0x02
    5472:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5474:	8e 01       	movw	r16, r28
    5476:	05 5a       	subi	r16, 0xA5	; 165
    5478:	1f 4f       	sbci	r17, 0xFF	; 255
    547a:	fe 01       	movw	r30, r28
    547c:	e1 5a       	subi	r30, 0xA1	; 161
    547e:	ff 4f       	sbci	r31, 0xFF	; 255
    5480:	60 81       	ld	r22, Z
    5482:	71 81       	ldd	r23, Z+1	; 0x01
    5484:	82 81       	ldd	r24, Z+2	; 0x02
    5486:	93 81       	ldd	r25, Z+3	; 0x03
    5488:	26 e6       	ldi	r18, 0x66	; 102
    548a:	36 e6       	ldi	r19, 0x66	; 102
    548c:	46 e6       	ldi	r20, 0x66	; 102
    548e:	55 e4       	ldi	r21, 0x45	; 69
    5490:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	f8 01       	movw	r30, r16
    549a:	80 83       	st	Z, r24
    549c:	91 83       	std	Z+1, r25	; 0x01
    549e:	a2 83       	std	Z+2, r26	; 0x02
    54a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54a2:	fe 01       	movw	r30, r28
    54a4:	e5 5a       	subi	r30, 0xA5	; 165
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	60 81       	ld	r22, Z
    54aa:	71 81       	ldd	r23, Z+1	; 0x01
    54ac:	82 81       	ldd	r24, Z+2	; 0x02
    54ae:	93 81       	ldd	r25, Z+3	; 0x03
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	40 e8       	ldi	r20, 0x80	; 128
    54b6:	5f e3       	ldi	r21, 0x3F	; 63
    54b8:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    54bc:	88 23       	and	r24, r24
    54be:	44 f4       	brge	.+16     	; 0x54d0 <anipick+0x2128>
		__ticks = 1;
    54c0:	fe 01       	movw	r30, r28
    54c2:	e7 5a       	subi	r30, 0xA7	; 167
    54c4:	ff 4f       	sbci	r31, 0xFF	; 255
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	91 83       	std	Z+1, r25	; 0x01
    54cc:	80 83       	st	Z, r24
    54ce:	64 c0       	rjmp	.+200    	; 0x5598 <anipick+0x21f0>
	else if (__tmp > 65535)
    54d0:	fe 01       	movw	r30, r28
    54d2:	e5 5a       	subi	r30, 0xA5	; 165
    54d4:	ff 4f       	sbci	r31, 0xFF	; 255
    54d6:	60 81       	ld	r22, Z
    54d8:	71 81       	ldd	r23, Z+1	; 0x01
    54da:	82 81       	ldd	r24, Z+2	; 0x02
    54dc:	93 81       	ldd	r25, Z+3	; 0x03
    54de:	20 e0       	ldi	r18, 0x00	; 0
    54e0:	3f ef       	ldi	r19, 0xFF	; 255
    54e2:	4f e7       	ldi	r20, 0x7F	; 127
    54e4:	57 e4       	ldi	r21, 0x47	; 71
    54e6:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    54ea:	18 16       	cp	r1, r24
    54ec:	0c f0       	brlt	.+2      	; 0x54f0 <anipick+0x2148>
    54ee:	43 c0       	rjmp	.+134    	; 0x5576 <anipick+0x21ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54f0:	fe 01       	movw	r30, r28
    54f2:	e1 5a       	subi	r30, 0xA1	; 161
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	60 81       	ld	r22, Z
    54f8:	71 81       	ldd	r23, Z+1	; 0x01
    54fa:	82 81       	ldd	r24, Z+2	; 0x02
    54fc:	93 81       	ldd	r25, Z+3	; 0x03
    54fe:	20 e0       	ldi	r18, 0x00	; 0
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	40 e2       	ldi	r20, 0x20	; 32
    5504:	51 e4       	ldi	r21, 0x41	; 65
    5506:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    550a:	dc 01       	movw	r26, r24
    550c:	cb 01       	movw	r24, r22
    550e:	8e 01       	movw	r16, r28
    5510:	07 5a       	subi	r16, 0xA7	; 167
    5512:	1f 4f       	sbci	r17, 0xFF	; 255
    5514:	bc 01       	movw	r22, r24
    5516:	cd 01       	movw	r24, r26
    5518:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	f8 01       	movw	r30, r16
    5522:	91 83       	std	Z+1, r25	; 0x01
    5524:	80 83       	st	Z, r24
    5526:	1f c0       	rjmp	.+62     	; 0x5566 <anipick+0x21be>
    5528:	fe 01       	movw	r30, r28
    552a:	e9 5a       	subi	r30, 0xA9	; 169
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 e7       	ldi	r24, 0x70	; 112
    5530:	91 e0       	ldi	r25, 0x01	; 1
    5532:	91 83       	std	Z+1, r25	; 0x01
    5534:	80 83       	st	Z, r24
    5536:	fe 01       	movw	r30, r28
    5538:	e9 5a       	subi	r30, 0xA9	; 169
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	80 81       	ld	r24, Z
    553e:	91 81       	ldd	r25, Z+1	; 0x01
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <anipick+0x2198>
    5544:	fe 01       	movw	r30, r28
    5546:	e9 5a       	subi	r30, 0xA9	; 169
    5548:	ff 4f       	sbci	r31, 0xFF	; 255
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    554e:	de 01       	movw	r26, r28
    5550:	a7 5a       	subi	r26, 0xA7	; 167
    5552:	bf 4f       	sbci	r27, 0xFF	; 255
    5554:	fe 01       	movw	r30, r28
    5556:	e7 5a       	subi	r30, 0xA7	; 167
    5558:	ff 4f       	sbci	r31, 0xFF	; 255
    555a:	80 81       	ld	r24, Z
    555c:	91 81       	ldd	r25, Z+1	; 0x01
    555e:	01 97       	sbiw	r24, 0x01	; 1
    5560:	11 96       	adiw	r26, 0x01	; 1
    5562:	9c 93       	st	X, r25
    5564:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5566:	fe 01       	movw	r30, r28
    5568:	e7 5a       	subi	r30, 0xA7	; 167
    556a:	ff 4f       	sbci	r31, 0xFF	; 255
    556c:	80 81       	ld	r24, Z
    556e:	91 81       	ldd	r25, Z+1	; 0x01
    5570:	00 97       	sbiw	r24, 0x00	; 0
    5572:	d1 f6       	brne	.-76     	; 0x5528 <anipick+0x2180>
    5574:	93 c3       	rjmp	.+1830   	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5576:	8e 01       	movw	r16, r28
    5578:	07 5a       	subi	r16, 0xA7	; 167
    557a:	1f 4f       	sbci	r17, 0xFF	; 255
    557c:	fe 01       	movw	r30, r28
    557e:	e5 5a       	subi	r30, 0xA5	; 165
    5580:	ff 4f       	sbci	r31, 0xFF	; 255
    5582:	60 81       	ld	r22, Z
    5584:	71 81       	ldd	r23, Z+1	; 0x01
    5586:	82 81       	ldd	r24, Z+2	; 0x02
    5588:	93 81       	ldd	r25, Z+3	; 0x03
    558a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    558e:	dc 01       	movw	r26, r24
    5590:	cb 01       	movw	r24, r22
    5592:	f8 01       	movw	r30, r16
    5594:	91 83       	std	Z+1, r25	; 0x01
    5596:	80 83       	st	Z, r24
    5598:	de 01       	movw	r26, r28
    559a:	ab 5a       	subi	r26, 0xAB	; 171
    559c:	bf 4f       	sbci	r27, 0xFF	; 255
    559e:	fe 01       	movw	r30, r28
    55a0:	e7 5a       	subi	r30, 0xA7	; 167
    55a2:	ff 4f       	sbci	r31, 0xFF	; 255
    55a4:	80 81       	ld	r24, Z
    55a6:	91 81       	ldd	r25, Z+1	; 0x01
    55a8:	11 96       	adiw	r26, 0x01	; 1
    55aa:	9c 93       	st	X, r25
    55ac:	8e 93       	st	-X, r24
    55ae:	fe 01       	movw	r30, r28
    55b0:	eb 5a       	subi	r30, 0xAB	; 171
    55b2:	ff 4f       	sbci	r31, 0xFF	; 255
    55b4:	80 81       	ld	r24, Z
    55b6:	91 81       	ldd	r25, Z+1	; 0x01
    55b8:	01 97       	sbiw	r24, 0x01	; 1
    55ba:	f1 f7       	brne	.-4      	; 0x55b8 <anipick+0x2210>
    55bc:	fe 01       	movw	r30, r28
    55be:	eb 5a       	subi	r30, 0xAB	; 171
    55c0:	ff 4f       	sbci	r31, 0xFF	; 255
    55c2:	91 83       	std	Z+1, r25	; 0x01
    55c4:	80 83       	st	Z, r24
    55c6:	6a c3       	rjmp	.+1748   	; 0x5c9c <anipick+0x28f4>
			_delay_ms(50);
		}
		// If robot is already at the animal's location
		else
		{
			forward_mm(50);
    55c8:	82 e3       	ldi	r24, 0x32	; 50
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
			stop();
    55d0:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    55d4:	fe 01       	movw	r30, r28
    55d6:	ef 5a       	subi	r30, 0xAF	; 175
    55d8:	ff 4f       	sbci	r31, 0xFF	; 255
    55da:	80 e0       	ldi	r24, 0x00	; 0
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	a8 e4       	ldi	r26, 0x48	; 72
    55e0:	b2 e4       	ldi	r27, 0x42	; 66
    55e2:	80 83       	st	Z, r24
    55e4:	91 83       	std	Z+1, r25	; 0x01
    55e6:	a2 83       	std	Z+2, r26	; 0x02
    55e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ea:	8e 01       	movw	r16, r28
    55ec:	03 5b       	subi	r16, 0xB3	; 179
    55ee:	1f 4f       	sbci	r17, 0xFF	; 255
    55f0:	fe 01       	movw	r30, r28
    55f2:	ef 5a       	subi	r30, 0xAF	; 175
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	60 81       	ld	r22, Z
    55f8:	71 81       	ldd	r23, Z+1	; 0x01
    55fa:	82 81       	ldd	r24, Z+2	; 0x02
    55fc:	93 81       	ldd	r25, Z+3	; 0x03
    55fe:	26 e6       	ldi	r18, 0x66	; 102
    5600:	36 e6       	ldi	r19, 0x66	; 102
    5602:	46 e6       	ldi	r20, 0x66	; 102
    5604:	55 e4       	ldi	r21, 0x45	; 69
    5606:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    560a:	dc 01       	movw	r26, r24
    560c:	cb 01       	movw	r24, r22
    560e:	f8 01       	movw	r30, r16
    5610:	80 83       	st	Z, r24
    5612:	91 83       	std	Z+1, r25	; 0x01
    5614:	a2 83       	std	Z+2, r26	; 0x02
    5616:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5618:	fe 01       	movw	r30, r28
    561a:	e3 5b       	subi	r30, 0xB3	; 179
    561c:	ff 4f       	sbci	r31, 0xFF	; 255
    561e:	60 81       	ld	r22, Z
    5620:	71 81       	ldd	r23, Z+1	; 0x01
    5622:	82 81       	ldd	r24, Z+2	; 0x02
    5624:	93 81       	ldd	r25, Z+3	; 0x03
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	40 e8       	ldi	r20, 0x80	; 128
    562c:	5f e3       	ldi	r21, 0x3F	; 63
    562e:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5632:	88 23       	and	r24, r24
    5634:	44 f4       	brge	.+16     	; 0x5646 <anipick+0x229e>
		__ticks = 1;
    5636:	fe 01       	movw	r30, r28
    5638:	e5 5b       	subi	r30, 0xB5	; 181
    563a:	ff 4f       	sbci	r31, 0xFF	; 255
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	91 83       	std	Z+1, r25	; 0x01
    5642:	80 83       	st	Z, r24
    5644:	64 c0       	rjmp	.+200    	; 0x570e <anipick+0x2366>
	else if (__tmp > 65535)
    5646:	fe 01       	movw	r30, r28
    5648:	e3 5b       	subi	r30, 0xB3	; 179
    564a:	ff 4f       	sbci	r31, 0xFF	; 255
    564c:	60 81       	ld	r22, Z
    564e:	71 81       	ldd	r23, Z+1	; 0x01
    5650:	82 81       	ldd	r24, Z+2	; 0x02
    5652:	93 81       	ldd	r25, Z+3	; 0x03
    5654:	20 e0       	ldi	r18, 0x00	; 0
    5656:	3f ef       	ldi	r19, 0xFF	; 255
    5658:	4f e7       	ldi	r20, 0x7F	; 127
    565a:	57 e4       	ldi	r21, 0x47	; 71
    565c:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5660:	18 16       	cp	r1, r24
    5662:	0c f0       	brlt	.+2      	; 0x5666 <anipick+0x22be>
    5664:	43 c0       	rjmp	.+134    	; 0x56ec <anipick+0x2344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5666:	fe 01       	movw	r30, r28
    5668:	ef 5a       	subi	r30, 0xAF	; 175
    566a:	ff 4f       	sbci	r31, 0xFF	; 255
    566c:	60 81       	ld	r22, Z
    566e:	71 81       	ldd	r23, Z+1	; 0x01
    5670:	82 81       	ldd	r24, Z+2	; 0x02
    5672:	93 81       	ldd	r25, Z+3	; 0x03
    5674:	20 e0       	ldi	r18, 0x00	; 0
    5676:	30 e0       	ldi	r19, 0x00	; 0
    5678:	40 e2       	ldi	r20, 0x20	; 32
    567a:	51 e4       	ldi	r21, 0x41	; 65
    567c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5680:	dc 01       	movw	r26, r24
    5682:	cb 01       	movw	r24, r22
    5684:	8e 01       	movw	r16, r28
    5686:	05 5b       	subi	r16, 0xB5	; 181
    5688:	1f 4f       	sbci	r17, 0xFF	; 255
    568a:	bc 01       	movw	r22, r24
    568c:	cd 01       	movw	r24, r26
    568e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	f8 01       	movw	r30, r16
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	80 83       	st	Z, r24
    569c:	1f c0       	rjmp	.+62     	; 0x56dc <anipick+0x2334>
    569e:	fe 01       	movw	r30, r28
    56a0:	e7 5b       	subi	r30, 0xB7	; 183
    56a2:	ff 4f       	sbci	r31, 0xFF	; 255
    56a4:	80 e7       	ldi	r24, 0x70	; 112
    56a6:	91 e0       	ldi	r25, 0x01	; 1
    56a8:	91 83       	std	Z+1, r25	; 0x01
    56aa:	80 83       	st	Z, r24
    56ac:	fe 01       	movw	r30, r28
    56ae:	e7 5b       	subi	r30, 0xB7	; 183
    56b0:	ff 4f       	sbci	r31, 0xFF	; 255
    56b2:	80 81       	ld	r24, Z
    56b4:	91 81       	ldd	r25, Z+1	; 0x01
    56b6:	01 97       	sbiw	r24, 0x01	; 1
    56b8:	f1 f7       	brne	.-4      	; 0x56b6 <anipick+0x230e>
    56ba:	fe 01       	movw	r30, r28
    56bc:	e7 5b       	subi	r30, 0xB7	; 183
    56be:	ff 4f       	sbci	r31, 0xFF	; 255
    56c0:	91 83       	std	Z+1, r25	; 0x01
    56c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56c4:	de 01       	movw	r26, r28
    56c6:	a5 5b       	subi	r26, 0xB5	; 181
    56c8:	bf 4f       	sbci	r27, 0xFF	; 255
    56ca:	fe 01       	movw	r30, r28
    56cc:	e5 5b       	subi	r30, 0xB5	; 181
    56ce:	ff 4f       	sbci	r31, 0xFF	; 255
    56d0:	80 81       	ld	r24, Z
    56d2:	91 81       	ldd	r25, Z+1	; 0x01
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	11 96       	adiw	r26, 0x01	; 1
    56d8:	9c 93       	st	X, r25
    56da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56dc:	fe 01       	movw	r30, r28
    56de:	e5 5b       	subi	r30, 0xB5	; 181
    56e0:	ff 4f       	sbci	r31, 0xFF	; 255
    56e2:	80 81       	ld	r24, Z
    56e4:	91 81       	ldd	r25, Z+1	; 0x01
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	d1 f6       	brne	.-76     	; 0x569e <anipick+0x22f6>
    56ea:	27 c0       	rjmp	.+78     	; 0x573a <anipick+0x2392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ec:	8e 01       	movw	r16, r28
    56ee:	05 5b       	subi	r16, 0xB5	; 181
    56f0:	1f 4f       	sbci	r17, 0xFF	; 255
    56f2:	fe 01       	movw	r30, r28
    56f4:	e3 5b       	subi	r30, 0xB3	; 179
    56f6:	ff 4f       	sbci	r31, 0xFF	; 255
    56f8:	60 81       	ld	r22, Z
    56fa:	71 81       	ldd	r23, Z+1	; 0x01
    56fc:	82 81       	ldd	r24, Z+2	; 0x02
    56fe:	93 81       	ldd	r25, Z+3	; 0x03
    5700:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5704:	dc 01       	movw	r26, r24
    5706:	cb 01       	movw	r24, r22
    5708:	f8 01       	movw	r30, r16
    570a:	91 83       	std	Z+1, r25	; 0x01
    570c:	80 83       	st	Z, r24
    570e:	de 01       	movw	r26, r28
    5710:	a9 5b       	subi	r26, 0xB9	; 185
    5712:	bf 4f       	sbci	r27, 0xFF	; 255
    5714:	fe 01       	movw	r30, r28
    5716:	e5 5b       	subi	r30, 0xB5	; 181
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	80 81       	ld	r24, Z
    571c:	91 81       	ldd	r25, Z+1	; 0x01
    571e:	8d 93       	st	X+, r24
    5720:	9c 93       	st	X, r25
    5722:	fe 01       	movw	r30, r28
    5724:	e9 5b       	subi	r30, 0xB9	; 185
    5726:	ff 4f       	sbci	r31, 0xFF	; 255
    5728:	80 81       	ld	r24, Z
    572a:	91 81       	ldd	r25, Z+1	; 0x01
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	f1 f7       	brne	.-4      	; 0x572c <anipick+0x2384>
    5730:	fe 01       	movw	r30, r28
    5732:	e9 5b       	subi	r30, 0xB9	; 185
    5734:	ff 4f       	sbci	r31, 0xFF	; 255
    5736:	91 83       	std	Z+1, r25	; 0x01
    5738:	80 83       	st	Z, r24
			_delay_ms(50);
			pick();
    573a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
			back_mm(60);
    573e:	8c e3       	ldi	r24, 0x3C	; 60
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
			stop();
    5746:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    574a:	fe 01       	movw	r30, r28
    574c:	ed 5b       	subi	r30, 0xBD	; 189
    574e:	ff 4f       	sbci	r31, 0xFF	; 255
    5750:	80 e0       	ldi	r24, 0x00	; 0
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	a8 e4       	ldi	r26, 0x48	; 72
    5756:	b2 e4       	ldi	r27, 0x42	; 66
    5758:	80 83       	st	Z, r24
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	a2 83       	std	Z+2, r26	; 0x02
    575e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5760:	8e 01       	movw	r16, r28
    5762:	01 5c       	subi	r16, 0xC1	; 193
    5764:	1f 4f       	sbci	r17, 0xFF	; 255
    5766:	fe 01       	movw	r30, r28
    5768:	ed 5b       	subi	r30, 0xBD	; 189
    576a:	ff 4f       	sbci	r31, 0xFF	; 255
    576c:	60 81       	ld	r22, Z
    576e:	71 81       	ldd	r23, Z+1	; 0x01
    5770:	82 81       	ldd	r24, Z+2	; 0x02
    5772:	93 81       	ldd	r25, Z+3	; 0x03
    5774:	26 e6       	ldi	r18, 0x66	; 102
    5776:	36 e6       	ldi	r19, 0x66	; 102
    5778:	46 e6       	ldi	r20, 0x66	; 102
    577a:	55 e4       	ldi	r21, 0x45	; 69
    577c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	f8 01       	movw	r30, r16
    5786:	80 83       	st	Z, r24
    5788:	91 83       	std	Z+1, r25	; 0x01
    578a:	a2 83       	std	Z+2, r26	; 0x02
    578c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    578e:	fe 01       	movw	r30, r28
    5790:	ff 96       	adiw	r30, 0x3f	; 63
    5792:	60 81       	ld	r22, Z
    5794:	71 81       	ldd	r23, Z+1	; 0x01
    5796:	82 81       	ldd	r24, Z+2	; 0x02
    5798:	93 81       	ldd	r25, Z+3	; 0x03
    579a:	20 e0       	ldi	r18, 0x00	; 0
    579c:	30 e0       	ldi	r19, 0x00	; 0
    579e:	40 e8       	ldi	r20, 0x80	; 128
    57a0:	5f e3       	ldi	r21, 0x3F	; 63
    57a2:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    57a6:	88 23       	and	r24, r24
    57a8:	2c f4       	brge	.+10     	; 0x57b4 <anipick+0x240c>
		__ticks = 1;
    57aa:	81 e0       	ldi	r24, 0x01	; 1
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	9e af       	std	Y+62, r25	; 0x3e
    57b0:	8d af       	std	Y+61, r24	; 0x3d
    57b2:	46 c0       	rjmp	.+140    	; 0x5840 <anipick+0x2498>
	else if (__tmp > 65535)
    57b4:	fe 01       	movw	r30, r28
    57b6:	ff 96       	adiw	r30, 0x3f	; 63
    57b8:	60 81       	ld	r22, Z
    57ba:	71 81       	ldd	r23, Z+1	; 0x01
    57bc:	82 81       	ldd	r24, Z+2	; 0x02
    57be:	93 81       	ldd	r25, Z+3	; 0x03
    57c0:	20 e0       	ldi	r18, 0x00	; 0
    57c2:	3f ef       	ldi	r19, 0xFF	; 255
    57c4:	4f e7       	ldi	r20, 0x7F	; 127
    57c6:	57 e4       	ldi	r21, 0x47	; 71
    57c8:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    57cc:	18 16       	cp	r1, r24
    57ce:	64 f5       	brge	.+88     	; 0x5828 <anipick+0x2480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d0:	fe 01       	movw	r30, r28
    57d2:	ed 5b       	subi	r30, 0xBD	; 189
    57d4:	ff 4f       	sbci	r31, 0xFF	; 255
    57d6:	60 81       	ld	r22, Z
    57d8:	71 81       	ldd	r23, Z+1	; 0x01
    57da:	82 81       	ldd	r24, Z+2	; 0x02
    57dc:	93 81       	ldd	r25, Z+3	; 0x03
    57de:	20 e0       	ldi	r18, 0x00	; 0
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	40 e2       	ldi	r20, 0x20	; 32
    57e4:	51 e4       	ldi	r21, 0x41	; 65
    57e6:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    57ea:	dc 01       	movw	r26, r24
    57ec:	cb 01       	movw	r24, r22
    57ee:	bc 01       	movw	r22, r24
    57f0:	cd 01       	movw	r24, r26
    57f2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    57f6:	dc 01       	movw	r26, r24
    57f8:	cb 01       	movw	r24, r22
    57fa:	9e af       	std	Y+62, r25	; 0x3e
    57fc:	8d af       	std	Y+61, r24	; 0x3d
    57fe:	0f c0       	rjmp	.+30     	; 0x581e <anipick+0x2476>
    5800:	80 e7       	ldi	r24, 0x70	; 112
    5802:	91 e0       	ldi	r25, 0x01	; 1
    5804:	9c af       	std	Y+60, r25	; 0x3c
    5806:	8b af       	std	Y+59, r24	; 0x3b
    5808:	8b ad       	ldd	r24, Y+59	; 0x3b
    580a:	9c ad       	ldd	r25, Y+60	; 0x3c
    580c:	01 97       	sbiw	r24, 0x01	; 1
    580e:	f1 f7       	brne	.-4      	; 0x580c <anipick+0x2464>
    5810:	9c af       	std	Y+60, r25	; 0x3c
    5812:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5814:	8d ad       	ldd	r24, Y+61	; 0x3d
    5816:	9e ad       	ldd	r25, Y+62	; 0x3e
    5818:	01 97       	sbiw	r24, 0x01	; 1
    581a:	9e af       	std	Y+62, r25	; 0x3e
    581c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    581e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5820:	9e ad       	ldd	r25, Y+62	; 0x3e
    5822:	00 97       	sbiw	r24, 0x00	; 0
    5824:	69 f7       	brne	.-38     	; 0x5800 <anipick+0x2458>
    5826:	3a c2       	rjmp	.+1140   	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5828:	fe 01       	movw	r30, r28
    582a:	ff 96       	adiw	r30, 0x3f	; 63
    582c:	60 81       	ld	r22, Z
    582e:	71 81       	ldd	r23, Z+1	; 0x01
    5830:	82 81       	ldd	r24, Z+2	; 0x02
    5832:	93 81       	ldd	r25, Z+3	; 0x03
    5834:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5838:	dc 01       	movw	r26, r24
    583a:	cb 01       	movw	r24, r22
    583c:	9e af       	std	Y+62, r25	; 0x3e
    583e:	8d af       	std	Y+61, r24	; 0x3d
    5840:	8d ad       	ldd	r24, Y+61	; 0x3d
    5842:	9e ad       	ldd	r25, Y+62	; 0x3e
    5844:	9a af       	std	Y+58, r25	; 0x3a
    5846:	89 af       	std	Y+57, r24	; 0x39
    5848:	89 ad       	ldd	r24, Y+57	; 0x39
    584a:	9a ad       	ldd	r25, Y+58	; 0x3a
    584c:	01 97       	sbiw	r24, 0x01	; 1
    584e:	f1 f7       	brne	.-4      	; 0x584c <anipick+0x24a4>
    5850:	9a af       	std	Y+58, r25	; 0x3a
    5852:	89 af       	std	Y+57, r24	; 0x39
    5854:	23 c2       	rjmp	.+1094   	; 0x5c9c <anipick+0x28f4>
			_delay_ms(50);
		}	
	}
	else if(pos[1]=='6' && pos[0]!='A' && pos[0]!='F') // If animal is at top part of the arena
    5856:	fe 01       	movw	r30, r28
    5858:	e7 57       	subi	r30, 0x77	; 119
    585a:	fe 4f       	sbci	r31, 0xFE	; 254
    585c:	80 81       	ld	r24, Z
    585e:	91 81       	ldd	r25, Z+1	; 0x01
    5860:	fc 01       	movw	r30, r24
    5862:	31 96       	adiw	r30, 0x01	; 1
    5864:	80 81       	ld	r24, Z
    5866:	86 33       	cpi	r24, 0x36	; 54
    5868:	09 f0       	breq	.+2      	; 0x586c <anipick+0x24c4>
    586a:	18 c2       	rjmp	.+1072   	; 0x5c9c <anipick+0x28f4>
    586c:	fe 01       	movw	r30, r28
    586e:	e7 57       	subi	r30, 0x77	; 119
    5870:	fe 4f       	sbci	r31, 0xFE	; 254
    5872:	01 90       	ld	r0, Z+
    5874:	f0 81       	ld	r31, Z
    5876:	e0 2d       	mov	r30, r0
    5878:	80 81       	ld	r24, Z
    587a:	81 34       	cpi	r24, 0x41	; 65
    587c:	09 f4       	brne	.+2      	; 0x5880 <anipick+0x24d8>
    587e:	0e c2       	rjmp	.+1052   	; 0x5c9c <anipick+0x28f4>
    5880:	fe 01       	movw	r30, r28
    5882:	e7 57       	subi	r30, 0x77	; 119
    5884:	fe 4f       	sbci	r31, 0xFE	; 254
    5886:	01 90       	ld	r0, Z+
    5888:	f0 81       	ld	r31, Z
    588a:	e0 2d       	mov	r30, r0
    588c:	80 81       	ld	r24, Z
    588e:	86 34       	cpi	r24, 0x46	; 70
    5890:	09 f4       	brne	.+2      	; 0x5894 <anipick+0x24ec>
    5892:	04 c2       	rjmp	.+1032   	; 0x5c9c <anipick+0x28f4>
	{
		if(l==1 || r==1)
    5894:	80 91 2a 03 	lds	r24, 0x032A
    5898:	90 91 2b 03 	lds	r25, 0x032B
    589c:	81 30       	cpi	r24, 0x01	; 1
    589e:	91 05       	cpc	r25, r1
    58a0:	41 f0       	breq	.+16     	; 0x58b2 <anipick+0x250a>
    58a2:	80 91 28 03 	lds	r24, 0x0328
    58a6:	90 91 29 03 	lds	r25, 0x0329
    58aa:	81 30       	cpi	r24, 0x01	; 1
    58ac:	91 05       	cpc	r25, r1
    58ae:	09 f0       	breq	.+2      	; 0x58b2 <anipick+0x250a>
    58b0:	03 c1       	rjmp	.+518    	; 0x5ab8 <anipick+0x2710>
		{
			a=turnsoft(l);
    58b2:	80 91 2a 03 	lds	r24, 0x032A
    58b6:	90 91 2b 03 	lds	r25, 0x032B
    58ba:	0e 94 32 13 	call	0x2664	; 0x2664 <turnsoft>
    58be:	90 93 03 02 	sts	0x0203, r25
    58c2:	80 93 02 02 	sts	0x0202, r24
			facing(a);
    58c6:	80 91 02 02 	lds	r24, 0x0202
    58ca:	90 91 03 02 	lds	r25, 0x0203
    58ce:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <facing>
			forward_mm(25);
    58d2:	89 e1       	ldi	r24, 0x19	; 25
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
			stop();
    58da:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    58de:	80 e0       	ldi	r24, 0x00	; 0
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	a8 e4       	ldi	r26, 0x48	; 72
    58e4:	b2 e4       	ldi	r27, 0x42	; 66
    58e6:	8d ab       	std	Y+53, r24	; 0x35
    58e8:	9e ab       	std	Y+54, r25	; 0x36
    58ea:	af ab       	std	Y+55, r26	; 0x37
    58ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58ee:	6d a9       	ldd	r22, Y+53	; 0x35
    58f0:	7e a9       	ldd	r23, Y+54	; 0x36
    58f2:	8f a9       	ldd	r24, Y+55	; 0x37
    58f4:	98 ad       	ldd	r25, Y+56	; 0x38
    58f6:	26 e6       	ldi	r18, 0x66	; 102
    58f8:	36 e6       	ldi	r19, 0x66	; 102
    58fa:	46 e6       	ldi	r20, 0x66	; 102
    58fc:	55 e4       	ldi	r21, 0x45	; 69
    58fe:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5902:	dc 01       	movw	r26, r24
    5904:	cb 01       	movw	r24, r22
    5906:	89 ab       	std	Y+49, r24	; 0x31
    5908:	9a ab       	std	Y+50, r25	; 0x32
    590a:	ab ab       	std	Y+51, r26	; 0x33
    590c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    590e:	69 a9       	ldd	r22, Y+49	; 0x31
    5910:	7a a9       	ldd	r23, Y+50	; 0x32
    5912:	8b a9       	ldd	r24, Y+51	; 0x33
    5914:	9c a9       	ldd	r25, Y+52	; 0x34
    5916:	20 e0       	ldi	r18, 0x00	; 0
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	40 e8       	ldi	r20, 0x80	; 128
    591c:	5f e3       	ldi	r21, 0x3F	; 63
    591e:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5922:	88 23       	and	r24, r24
    5924:	2c f4       	brge	.+10     	; 0x5930 <anipick+0x2588>
		__ticks = 1;
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	98 ab       	std	Y+48, r25	; 0x30
    592c:	8f a7       	std	Y+47, r24	; 0x2f
    592e:	3f c0       	rjmp	.+126    	; 0x59ae <anipick+0x2606>
	else if (__tmp > 65535)
    5930:	69 a9       	ldd	r22, Y+49	; 0x31
    5932:	7a a9       	ldd	r23, Y+50	; 0x32
    5934:	8b a9       	ldd	r24, Y+51	; 0x33
    5936:	9c a9       	ldd	r25, Y+52	; 0x34
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	3f ef       	ldi	r19, 0xFF	; 255
    593c:	4f e7       	ldi	r20, 0x7F	; 127
    593e:	57 e4       	ldi	r21, 0x47	; 71
    5940:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5944:	18 16       	cp	r1, r24
    5946:	4c f5       	brge	.+82     	; 0x599a <anipick+0x25f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5948:	6d a9       	ldd	r22, Y+53	; 0x35
    594a:	7e a9       	ldd	r23, Y+54	; 0x36
    594c:	8f a9       	ldd	r24, Y+55	; 0x37
    594e:	98 ad       	ldd	r25, Y+56	; 0x38
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	40 e2       	ldi	r20, 0x20	; 32
    5956:	51 e4       	ldi	r21, 0x41	; 65
    5958:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	bc 01       	movw	r22, r24
    5962:	cd 01       	movw	r24, r26
    5964:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5968:	dc 01       	movw	r26, r24
    596a:	cb 01       	movw	r24, r22
    596c:	98 ab       	std	Y+48, r25	; 0x30
    596e:	8f a7       	std	Y+47, r24	; 0x2f
    5970:	0f c0       	rjmp	.+30     	; 0x5990 <anipick+0x25e8>
    5972:	80 e7       	ldi	r24, 0x70	; 112
    5974:	91 e0       	ldi	r25, 0x01	; 1
    5976:	9e a7       	std	Y+46, r25	; 0x2e
    5978:	8d a7       	std	Y+45, r24	; 0x2d
    597a:	8d a5       	ldd	r24, Y+45	; 0x2d
    597c:	9e a5       	ldd	r25, Y+46	; 0x2e
    597e:	01 97       	sbiw	r24, 0x01	; 1
    5980:	f1 f7       	brne	.-4      	; 0x597e <anipick+0x25d6>
    5982:	9e a7       	std	Y+46, r25	; 0x2e
    5984:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5986:	8f a5       	ldd	r24, Y+47	; 0x2f
    5988:	98 a9       	ldd	r25, Y+48	; 0x30
    598a:	01 97       	sbiw	r24, 0x01	; 1
    598c:	98 ab       	std	Y+48, r25	; 0x30
    598e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5990:	8f a5       	ldd	r24, Y+47	; 0x2f
    5992:	98 a9       	ldd	r25, Y+48	; 0x30
    5994:	00 97       	sbiw	r24, 0x00	; 0
    5996:	69 f7       	brne	.-38     	; 0x5972 <anipick+0x25ca>
    5998:	14 c0       	rjmp	.+40     	; 0x59c2 <anipick+0x261a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    599a:	69 a9       	ldd	r22, Y+49	; 0x31
    599c:	7a a9       	ldd	r23, Y+50	; 0x32
    599e:	8b a9       	ldd	r24, Y+51	; 0x33
    59a0:	9c a9       	ldd	r25, Y+52	; 0x34
    59a2:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    59a6:	dc 01       	movw	r26, r24
    59a8:	cb 01       	movw	r24, r22
    59aa:	98 ab       	std	Y+48, r25	; 0x30
    59ac:	8f a7       	std	Y+47, r24	; 0x2f
    59ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    59b0:	98 a9       	ldd	r25, Y+48	; 0x30
    59b2:	9c a7       	std	Y+44, r25	; 0x2c
    59b4:	8b a7       	std	Y+43, r24	; 0x2b
    59b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    59b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    59ba:	01 97       	sbiw	r24, 0x01	; 1
    59bc:	f1 f7       	brne	.-4      	; 0x59ba <anipick+0x2612>
    59be:	9c a7       	std	Y+44, r25	; 0x2c
    59c0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);
			pick();
    59c2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
			back_mm(85);
    59c6:	85 e5       	ldi	r24, 0x55	; 85
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
			stop();
    59ce:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    59d2:	80 e0       	ldi	r24, 0x00	; 0
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	a8 e4       	ldi	r26, 0x48	; 72
    59d8:	b2 e4       	ldi	r27, 0x42	; 66
    59da:	8f a3       	std	Y+39, r24	; 0x27
    59dc:	98 a7       	std	Y+40, r25	; 0x28
    59de:	a9 a7       	std	Y+41, r26	; 0x29
    59e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59e2:	6f a1       	ldd	r22, Y+39	; 0x27
    59e4:	78 a5       	ldd	r23, Y+40	; 0x28
    59e6:	89 a5       	ldd	r24, Y+41	; 0x29
    59e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    59ea:	26 e6       	ldi	r18, 0x66	; 102
    59ec:	36 e6       	ldi	r19, 0x66	; 102
    59ee:	46 e6       	ldi	r20, 0x66	; 102
    59f0:	55 e4       	ldi	r21, 0x45	; 69
    59f2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    59f6:	dc 01       	movw	r26, r24
    59f8:	cb 01       	movw	r24, r22
    59fa:	8b a3       	std	Y+35, r24	; 0x23
    59fc:	9c a3       	std	Y+36, r25	; 0x24
    59fe:	ad a3       	std	Y+37, r26	; 0x25
    5a00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a02:	6b a1       	ldd	r22, Y+35	; 0x23
    5a04:	7c a1       	ldd	r23, Y+36	; 0x24
    5a06:	8d a1       	ldd	r24, Y+37	; 0x25
    5a08:	9e a1       	ldd	r25, Y+38	; 0x26
    5a0a:	20 e0       	ldi	r18, 0x00	; 0
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	40 e8       	ldi	r20, 0x80	; 128
    5a10:	5f e3       	ldi	r21, 0x3F	; 63
    5a12:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5a16:	88 23       	and	r24, r24
    5a18:	2c f4       	brge	.+10     	; 0x5a24 <anipick+0x267c>
		__ticks = 1;
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	9a a3       	std	Y+34, r25	; 0x22
    5a20:	89 a3       	std	Y+33, r24	; 0x21
    5a22:	3f c0       	rjmp	.+126    	; 0x5aa2 <anipick+0x26fa>
	else if (__tmp > 65535)
    5a24:	6b a1       	ldd	r22, Y+35	; 0x23
    5a26:	7c a1       	ldd	r23, Y+36	; 0x24
    5a28:	8d a1       	ldd	r24, Y+37	; 0x25
    5a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    5a2c:	20 e0       	ldi	r18, 0x00	; 0
    5a2e:	3f ef       	ldi	r19, 0xFF	; 255
    5a30:	4f e7       	ldi	r20, 0x7F	; 127
    5a32:	57 e4       	ldi	r21, 0x47	; 71
    5a34:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5a38:	18 16       	cp	r1, r24
    5a3a:	4c f5       	brge	.+82     	; 0x5a8e <anipick+0x26e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    5a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    5a40:	89 a5       	ldd	r24, Y+41	; 0x29
    5a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a44:	20 e0       	ldi	r18, 0x00	; 0
    5a46:	30 e0       	ldi	r19, 0x00	; 0
    5a48:	40 e2       	ldi	r20, 0x20	; 32
    5a4a:	51 e4       	ldi	r21, 0x41	; 65
    5a4c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5a50:	dc 01       	movw	r26, r24
    5a52:	cb 01       	movw	r24, r22
    5a54:	bc 01       	movw	r22, r24
    5a56:	cd 01       	movw	r24, r26
    5a58:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5a5c:	dc 01       	movw	r26, r24
    5a5e:	cb 01       	movw	r24, r22
    5a60:	9a a3       	std	Y+34, r25	; 0x22
    5a62:	89 a3       	std	Y+33, r24	; 0x21
    5a64:	0f c0       	rjmp	.+30     	; 0x5a84 <anipick+0x26dc>
    5a66:	80 e7       	ldi	r24, 0x70	; 112
    5a68:	91 e0       	ldi	r25, 0x01	; 1
    5a6a:	98 a3       	std	Y+32, r25	; 0x20
    5a6c:	8f 8f       	std	Y+31, r24	; 0x1f
    5a6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a70:	98 a1       	ldd	r25, Y+32	; 0x20
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	f1 f7       	brne	.-4      	; 0x5a72 <anipick+0x26ca>
    5a76:	98 a3       	std	Y+32, r25	; 0x20
    5a78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    5a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    5a7e:	01 97       	sbiw	r24, 0x01	; 1
    5a80:	9a a3       	std	Y+34, r25	; 0x22
    5a82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a84:	89 a1       	ldd	r24, Y+33	; 0x21
    5a86:	9a a1       	ldd	r25, Y+34	; 0x22
    5a88:	00 97       	sbiw	r24, 0x00	; 0
    5a8a:	69 f7       	brne	.-38     	; 0x5a66 <anipick+0x26be>
    5a8c:	07 c1       	rjmp	.+526    	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    5a90:	7c a1       	ldd	r23, Y+36	; 0x24
    5a92:	8d a1       	ldd	r24, Y+37	; 0x25
    5a94:	9e a1       	ldd	r25, Y+38	; 0x26
    5a96:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5a9a:	dc 01       	movw	r26, r24
    5a9c:	cb 01       	movw	r24, r22
    5a9e:	9a a3       	std	Y+34, r25	; 0x22
    5aa0:	89 a3       	std	Y+33, r24	; 0x21
    5aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    5aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    5aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    5aa8:	8d 8f       	std	Y+29, r24	; 0x1d
    5aaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5aac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5aae:	01 97       	sbiw	r24, 0x01	; 1
    5ab0:	f1 f7       	brne	.-4      	; 0x5aae <anipick+0x2706>
    5ab2:	9e 8f       	std	Y+30, r25	; 0x1e
    5ab4:	8d 8f       	std	Y+29, r24	; 0x1d
    5ab6:	f2 c0       	rjmp	.+484    	; 0x5c9c <anipick+0x28f4>
			
		}
		// If robot is already at the animal's location
		else
		{
			forward_mm(50);
    5ab8:	82 e3       	ldi	r24, 0x32	; 50
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
			stop();
    5ac0:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    5ac4:	80 e0       	ldi	r24, 0x00	; 0
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	a8 e4       	ldi	r26, 0x48	; 72
    5aca:	b2 e4       	ldi	r27, 0x42	; 66
    5acc:	89 8f       	std	Y+25, r24	; 0x19
    5ace:	9a 8f       	std	Y+26, r25	; 0x1a
    5ad0:	ab 8f       	std	Y+27, r26	; 0x1b
    5ad2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    5ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5adc:	26 e6       	ldi	r18, 0x66	; 102
    5ade:	36 e6       	ldi	r19, 0x66	; 102
    5ae0:	46 e6       	ldi	r20, 0x66	; 102
    5ae2:	55 e4       	ldi	r21, 0x45	; 69
    5ae4:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5ae8:	dc 01       	movw	r26, r24
    5aea:	cb 01       	movw	r24, r22
    5aec:	8d 8b       	std	Y+21, r24	; 0x15
    5aee:	9e 8b       	std	Y+22, r25	; 0x16
    5af0:	af 8b       	std	Y+23, r26	; 0x17
    5af2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5af4:	6d 89       	ldd	r22, Y+21	; 0x15
    5af6:	7e 89       	ldd	r23, Y+22	; 0x16
    5af8:	8f 89       	ldd	r24, Y+23	; 0x17
    5afa:	98 8d       	ldd	r25, Y+24	; 0x18
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	40 e8       	ldi	r20, 0x80	; 128
    5b02:	5f e3       	ldi	r21, 0x3F	; 63
    5b04:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5b08:	88 23       	and	r24, r24
    5b0a:	2c f4       	brge	.+10     	; 0x5b16 <anipick+0x276e>
		__ticks = 1;
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	9c 8b       	std	Y+20, r25	; 0x14
    5b12:	8b 8b       	std	Y+19, r24	; 0x13
    5b14:	3f c0       	rjmp	.+126    	; 0x5b94 <anipick+0x27ec>
	else if (__tmp > 65535)
    5b16:	6d 89       	ldd	r22, Y+21	; 0x15
    5b18:	7e 89       	ldd	r23, Y+22	; 0x16
    5b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    5b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    5b1e:	20 e0       	ldi	r18, 0x00	; 0
    5b20:	3f ef       	ldi	r19, 0xFF	; 255
    5b22:	4f e7       	ldi	r20, 0x7F	; 127
    5b24:	57 e4       	ldi	r21, 0x47	; 71
    5b26:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5b2a:	18 16       	cp	r1, r24
    5b2c:	4c f5       	brge	.+82     	; 0x5b80 <anipick+0x27d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    5b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b36:	20 e0       	ldi	r18, 0x00	; 0
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	40 e2       	ldi	r20, 0x20	; 32
    5b3c:	51 e4       	ldi	r21, 0x41	; 65
    5b3e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5b42:	dc 01       	movw	r26, r24
    5b44:	cb 01       	movw	r24, r22
    5b46:	bc 01       	movw	r22, r24
    5b48:	cd 01       	movw	r24, r26
    5b4a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5b4e:	dc 01       	movw	r26, r24
    5b50:	cb 01       	movw	r24, r22
    5b52:	9c 8b       	std	Y+20, r25	; 0x14
    5b54:	8b 8b       	std	Y+19, r24	; 0x13
    5b56:	0f c0       	rjmp	.+30     	; 0x5b76 <anipick+0x27ce>
    5b58:	80 e7       	ldi	r24, 0x70	; 112
    5b5a:	91 e0       	ldi	r25, 0x01	; 1
    5b5c:	9a 8b       	std	Y+18, r25	; 0x12
    5b5e:	89 8b       	std	Y+17, r24	; 0x11
    5b60:	89 89       	ldd	r24, Y+17	; 0x11
    5b62:	9a 89       	ldd	r25, Y+18	; 0x12
    5b64:	01 97       	sbiw	r24, 0x01	; 1
    5b66:	f1 f7       	brne	.-4      	; 0x5b64 <anipick+0x27bc>
    5b68:	9a 8b       	std	Y+18, r25	; 0x12
    5b6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    5b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    5b70:	01 97       	sbiw	r24, 0x01	; 1
    5b72:	9c 8b       	std	Y+20, r25	; 0x14
    5b74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b76:	8b 89       	ldd	r24, Y+19	; 0x13
    5b78:	9c 89       	ldd	r25, Y+20	; 0x14
    5b7a:	00 97       	sbiw	r24, 0x00	; 0
    5b7c:	69 f7       	brne	.-38     	; 0x5b58 <anipick+0x27b0>
    5b7e:	14 c0       	rjmp	.+40     	; 0x5ba8 <anipick+0x2800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b80:	6d 89       	ldd	r22, Y+21	; 0x15
    5b82:	7e 89       	ldd	r23, Y+22	; 0x16
    5b84:	8f 89       	ldd	r24, Y+23	; 0x17
    5b86:	98 8d       	ldd	r25, Y+24	; 0x18
    5b88:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5b8c:	dc 01       	movw	r26, r24
    5b8e:	cb 01       	movw	r24, r22
    5b90:	9c 8b       	std	Y+20, r25	; 0x14
    5b92:	8b 8b       	std	Y+19, r24	; 0x13
    5b94:	8b 89       	ldd	r24, Y+19	; 0x13
    5b96:	9c 89       	ldd	r25, Y+20	; 0x14
    5b98:	98 8b       	std	Y+16, r25	; 0x10
    5b9a:	8f 87       	std	Y+15, r24	; 0x0f
    5b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b9e:	98 89       	ldd	r25, Y+16	; 0x10
    5ba0:	01 97       	sbiw	r24, 0x01	; 1
    5ba2:	f1 f7       	brne	.-4      	; 0x5ba0 <anipick+0x27f8>
    5ba4:	98 8b       	std	Y+16, r25	; 0x10
    5ba6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			pick();
    5ba8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pick>
			back_mm(55);
    5bac:	87 e3       	ldi	r24, 0x37	; 55
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <back_mm>
			stop();
    5bb4:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	a8 e4       	ldi	r26, 0x48	; 72
    5bbe:	b2 e4       	ldi	r27, 0x42	; 66
    5bc0:	8b 87       	std	Y+11, r24	; 0x0b
    5bc2:	9c 87       	std	Y+12, r25	; 0x0c
    5bc4:	ad 87       	std	Y+13, r26	; 0x0d
    5bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bd0:	26 e6       	ldi	r18, 0x66	; 102
    5bd2:	36 e6       	ldi	r19, 0x66	; 102
    5bd4:	46 e6       	ldi	r20, 0x66	; 102
    5bd6:	55 e4       	ldi	r21, 0x45	; 69
    5bd8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5bdc:	dc 01       	movw	r26, r24
    5bde:	cb 01       	movw	r24, r22
    5be0:	8f 83       	std	Y+7, r24	; 0x07
    5be2:	98 87       	std	Y+8, r25	; 0x08
    5be4:	a9 87       	std	Y+9, r26	; 0x09
    5be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5be8:	6f 81       	ldd	r22, Y+7	; 0x07
    5bea:	78 85       	ldd	r23, Y+8	; 0x08
    5bec:	89 85       	ldd	r24, Y+9	; 0x09
    5bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bf0:	20 e0       	ldi	r18, 0x00	; 0
    5bf2:	30 e0       	ldi	r19, 0x00	; 0
    5bf4:	40 e8       	ldi	r20, 0x80	; 128
    5bf6:	5f e3       	ldi	r21, 0x3F	; 63
    5bf8:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5bfc:	88 23       	and	r24, r24
    5bfe:	2c f4       	brge	.+10     	; 0x5c0a <anipick+0x2862>
		__ticks = 1;
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	9e 83       	std	Y+6, r25	; 0x06
    5c06:	8d 83       	std	Y+5, r24	; 0x05
    5c08:	3f c0       	rjmp	.+126    	; 0x5c88 <anipick+0x28e0>
	else if (__tmp > 65535)
    5c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    5c0c:	78 85       	ldd	r23, Y+8	; 0x08
    5c0e:	89 85       	ldd	r24, Y+9	; 0x09
    5c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c12:	20 e0       	ldi	r18, 0x00	; 0
    5c14:	3f ef       	ldi	r19, 0xFF	; 255
    5c16:	4f e7       	ldi	r20, 0x7F	; 127
    5c18:	57 e4       	ldi	r21, 0x47	; 71
    5c1a:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5c1e:	18 16       	cp	r1, r24
    5c20:	4c f5       	brge	.+82     	; 0x5c74 <anipick+0x28cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	40 e2       	ldi	r20, 0x20	; 32
    5c30:	51 e4       	ldi	r21, 0x41	; 65
    5c32:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	bc 01       	movw	r22, r24
    5c3c:	cd 01       	movw	r24, r26
    5c3e:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5c42:	dc 01       	movw	r26, r24
    5c44:	cb 01       	movw	r24, r22
    5c46:	9e 83       	std	Y+6, r25	; 0x06
    5c48:	8d 83       	std	Y+5, r24	; 0x05
    5c4a:	0f c0       	rjmp	.+30     	; 0x5c6a <anipick+0x28c2>
    5c4c:	80 e7       	ldi	r24, 0x70	; 112
    5c4e:	91 e0       	ldi	r25, 0x01	; 1
    5c50:	9c 83       	std	Y+4, r25	; 0x04
    5c52:	8b 83       	std	Y+3, r24	; 0x03
    5c54:	8b 81       	ldd	r24, Y+3	; 0x03
    5c56:	9c 81       	ldd	r25, Y+4	; 0x04
    5c58:	01 97       	sbiw	r24, 0x01	; 1
    5c5a:	f1 f7       	brne	.-4      	; 0x5c58 <anipick+0x28b0>
    5c5c:	9c 83       	std	Y+4, r25	; 0x04
    5c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c60:	8d 81       	ldd	r24, Y+5	; 0x05
    5c62:	9e 81       	ldd	r25, Y+6	; 0x06
    5c64:	01 97       	sbiw	r24, 0x01	; 1
    5c66:	9e 83       	std	Y+6, r25	; 0x06
    5c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c6e:	00 97       	sbiw	r24, 0x00	; 0
    5c70:	69 f7       	brne	.-38     	; 0x5c4c <anipick+0x28a4>
    5c72:	14 c0       	rjmp	.+40     	; 0x5c9c <anipick+0x28f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c74:	6f 81       	ldd	r22, Y+7	; 0x07
    5c76:	78 85       	ldd	r23, Y+8	; 0x08
    5c78:	89 85       	ldd	r24, Y+9	; 0x09
    5c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c7c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	9e 83       	std	Y+6, r25	; 0x06
    5c86:	8d 83       	std	Y+5, r24	; 0x05
    5c88:	8d 81       	ldd	r24, Y+5	; 0x05
    5c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c8c:	9a 83       	std	Y+2, r25	; 0x02
    5c8e:	89 83       	std	Y+1, r24	; 0x01
    5c90:	89 81       	ldd	r24, Y+1	; 0x01
    5c92:	9a 81       	ldd	r25, Y+2	; 0x02
    5c94:	01 97       	sbiw	r24, 0x01	; 1
    5c96:	f1 f7       	brne	.-4      	; 0x5c94 <anipick+0x28ec>
    5c98:	9a 83       	std	Y+2, r25	; 0x02
    5c9a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
		}	
	}
	return;
}
    5c9c:	c6 57       	subi	r28, 0x76	; 118
    5c9e:	de 4f       	sbci	r29, 0xFE	; 254
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	f8 94       	cli
    5ca4:	de bf       	out	0x3e, r29	; 62
    5ca6:	0f be       	out	0x3f, r0	; 63
    5ca8:	cd bf       	out	0x3d, r28	; 61
    5caa:	cf 91       	pop	r28
    5cac:	df 91       	pop	r29
    5cae:	1f 91       	pop	r17
    5cb0:	0f 91       	pop	r16
    5cb2:	08 95       	ret

00005cb4 <nodetraverse>:



/* Function to read the white line sensors' values and follow the black line for given number of nodes (nodes) */
void nodetraverse(int nodes)
{
    5cb4:	df 93       	push	r29
    5cb6:	cf 93       	push	r28
    5cb8:	00 d0       	rcall	.+0      	; 0x5cba <nodetraverse+0x6>
    5cba:	00 d0       	rcall	.+0      	; 0x5cbc <nodetraverse+0x8>
    5cbc:	cd b7       	in	r28, 0x3d	; 61
    5cbe:	de b7       	in	r29, 0x3e	; 62
    5cc0:	9e 83       	std	Y+6, r25	; 0x06
    5cc2:	8d 83       	std	Y+5, r24	; 0x05
	/*
	Function Name: nodetraverse
	Input: nodes
	Output: None
	*/
	int node_cnt=0,cond_flag=0;
    5cc4:	1c 82       	std	Y+4, r1	; 0x04
    5cc6:	1b 82       	std	Y+3, r1	; 0x03
    5cc8:	1a 82       	std	Y+2, r1	; 0x02
    5cca:	19 82       	std	Y+1, r1	; 0x01
	init_devices();
    5ccc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
    while(1)
    {
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    5cd0:	83 e0       	ldi	r24, 0x03	; 3
    5cd2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    5cd6:	80 93 17 03 	sts	0x0317, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    5cda:	82 e0       	ldi	r24, 0x02	; 2
    5cdc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    5ce0:	80 93 18 03 	sts	0x0318, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    5ce4:	81 e0       	ldi	r24, 0x01	; 1
    5ce6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    5cea:	80 93 19 03 	sts	0x0319, r24
        cond_flag=0;
    5cee:	1a 82       	std	Y+2, r1	; 0x02
    5cf0:	19 82       	std	Y+1, r1	; 0x01
		//print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		//print_sensor(1,9,1);	//Prints Value of White Line Sensor3


		// If center white line sensor is on black line
		if((Center_white_line>=0x0a) && (Center_white_line<0x78) && (Left_white_line<=0x0a) && (Right_white_line<=0x0a))
    5cf2:	80 91 18 03 	lds	r24, 0x0318
    5cf6:	8a 30       	cpi	r24, 0x0A	; 10
    5cf8:	f8 f0       	brcs	.+62     	; 0x5d38 <nodetraverse+0x84>
    5cfa:	80 91 18 03 	lds	r24, 0x0318
    5cfe:	88 37       	cpi	r24, 0x78	; 120
    5d00:	d8 f4       	brcc	.+54     	; 0x5d38 <nodetraverse+0x84>
    5d02:	80 91 17 03 	lds	r24, 0x0317
    5d06:	8b 30       	cpi	r24, 0x0B	; 11
    5d08:	b8 f4       	brcc	.+46     	; 0x5d38 <nodetraverse+0x84>
    5d0a:	80 91 19 03 	lds	r24, 0x0319
    5d0e:	8b 30       	cpi	r24, 0x0B	; 11
    5d10:	98 f4       	brcc	.+38     	; 0x5d38 <nodetraverse+0x84>
		{
		    cond_flag=1;
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	9a 83       	std	Y+2, r25	; 0x02
    5d18:	89 83       	std	Y+1, r24	; 0x01
			forward();
    5d1a:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
			velocity(255,247);
    5d1e:	8f ef       	ldi	r24, 0xFF	; 255
    5d20:	67 ef       	ldi	r22, 0xF7	; 247
    5d22:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <velocity>
			q++;
    5d26:	80 91 2e 03 	lds	r24, 0x032E
    5d2a:	90 91 2f 03 	lds	r25, 0x032F
    5d2e:	01 96       	adiw	r24, 0x01	; 1
    5d30:	90 93 2f 03 	sts	0x032F, r25
    5d34:	80 93 2e 03 	sts	0x032E, r24
		}

		// If robot misses the black line completely
        if((Center_white_line<=0x0a) && (Left_white_line<=0x0a) && (Right_white_line<=0x0a))
    5d38:	80 91 18 03 	lds	r24, 0x0318
    5d3c:	8b 30       	cpi	r24, 0x0B	; 11
    5d3e:	d8 f4       	brcc	.+54     	; 0x5d76 <nodetraverse+0xc2>
    5d40:	80 91 17 03 	lds	r24, 0x0317
    5d44:	8b 30       	cpi	r24, 0x0B	; 11
    5d46:	b8 f4       	brcc	.+46     	; 0x5d76 <nodetraverse+0xc2>
    5d48:	80 91 19 03 	lds	r24, 0x0319
    5d4c:	8b 30       	cpi	r24, 0x0B	; 11
    5d4e:	98 f4       	brcc	.+38     	; 0x5d76 <nodetraverse+0xc2>
		{
			cond_flag=1;
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	9a 83       	std	Y+2, r25	; 0x02
    5d56:	89 83       	std	Y+1, r24	; 0x01
			forward();
    5d58:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
			velocity(255,247);
    5d5c:	8f ef       	ldi	r24, 0xFF	; 255
    5d5e:	67 ef       	ldi	r22, 0xF7	; 247
    5d60:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <velocity>
			q++;
    5d64:	80 91 2e 03 	lds	r24, 0x032E
    5d68:	90 91 2f 03 	lds	r25, 0x032F
    5d6c:	01 96       	adiw	r24, 0x01	; 1
    5d6e:	90 93 2f 03 	sts	0x032F, r25
    5d72:	80 93 2e 03 	sts	0x032E, r24
		}
		// If robot has deviated towards right
		if( cond_flag==0 && (Left_white_line>0x0a) && (Right_white_line<=0x0a)&&(Center_white_line<=0x0a))
    5d76:	89 81       	ldd	r24, Y+1	; 0x01
    5d78:	9a 81       	ldd	r25, Y+2	; 0x02
    5d7a:	00 97       	sbiw	r24, 0x00	; 0
    5d7c:	a1 f4       	brne	.+40     	; 0x5da6 <nodetraverse+0xf2>
    5d7e:	80 91 17 03 	lds	r24, 0x0317
    5d82:	8b 30       	cpi	r24, 0x0B	; 11
    5d84:	80 f0       	brcs	.+32     	; 0x5da6 <nodetraverse+0xf2>
    5d86:	80 91 19 03 	lds	r24, 0x0319
    5d8a:	8b 30       	cpi	r24, 0x0B	; 11
    5d8c:	60 f4       	brcc	.+24     	; 0x5da6 <nodetraverse+0xf2>
    5d8e:	80 91 18 03 	lds	r24, 0x0318
    5d92:	8b 30       	cpi	r24, 0x0B	; 11
    5d94:	40 f4       	brcc	.+16     	; 0x5da6 <nodetraverse+0xf2>
		{
			cond_flag=1;
    5d96:	81 e0       	ldi	r24, 0x01	; 1
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	9a 83       	std	Y+2, r25	; 0x02
    5d9c:	89 83       	std	Y+1, r24	; 0x01
			soft_left_degrees(2);
    5d9e:	82 e0       	ldi	r24, 0x02	; 2
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <soft_left_degrees>
		}

		// If robot has deviated towards left
		if(cond_flag==0 && (Right_white_line>0x0a) && (Left_white_line<=0x0a) && (Center_white_line<=0x0a))
    5da6:	89 81       	ldd	r24, Y+1	; 0x01
    5da8:	9a 81       	ldd	r25, Y+2	; 0x02
    5daa:	00 97       	sbiw	r24, 0x00	; 0
    5dac:	a1 f4       	brne	.+40     	; 0x5dd6 <nodetraverse+0x122>
    5dae:	80 91 19 03 	lds	r24, 0x0319
    5db2:	8b 30       	cpi	r24, 0x0B	; 11
    5db4:	80 f0       	brcs	.+32     	; 0x5dd6 <nodetraverse+0x122>
    5db6:	80 91 17 03 	lds	r24, 0x0317
    5dba:	8b 30       	cpi	r24, 0x0B	; 11
    5dbc:	60 f4       	brcc	.+24     	; 0x5dd6 <nodetraverse+0x122>
    5dbe:	80 91 18 03 	lds	r24, 0x0318
    5dc2:	8b 30       	cpi	r24, 0x0B	; 11
    5dc4:	40 f4       	brcc	.+16     	; 0x5dd6 <nodetraverse+0x122>
		{
			cond_flag=1;
    5dc6:	81 e0       	ldi	r24, 0x01	; 1
    5dc8:	90 e0       	ldi	r25, 0x00	; 0
    5dca:	9a 83       	std	Y+2, r25	; 0x02
    5dcc:	89 83       	std	Y+1, r24	; 0x01
		    soft_right_degrees(2);
    5dce:	82 e0       	ldi	r24, 0x02	; 2
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <soft_right_degrees>
		}

		// If robot passes through a node
		if(cond_flag==0 && (Center_white_line>=0x82 || Right_white_line>=0x82 || Left_white_line>=0x82))
    5dd6:	89 81       	ldd	r24, Y+1	; 0x01
    5dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dda:	00 97       	sbiw	r24, 0x00	; 0
    5ddc:	09 f0       	breq	.+2      	; 0x5de0 <nodetraverse+0x12c>
    5dde:	78 cf       	rjmp	.-272    	; 0x5cd0 <nodetraverse+0x1c>
    5de0:	80 91 18 03 	lds	r24, 0x0318
    5de4:	82 38       	cpi	r24, 0x82	; 130
    5de6:	48 f4       	brcc	.+18     	; 0x5dfa <nodetraverse+0x146>
    5de8:	80 91 19 03 	lds	r24, 0x0319
    5dec:	82 38       	cpi	r24, 0x82	; 130
    5dee:	28 f4       	brcc	.+10     	; 0x5dfa <nodetraverse+0x146>
    5df0:	80 91 17 03 	lds	r24, 0x0317
    5df4:	82 38       	cpi	r24, 0x82	; 130
    5df6:	08 f4       	brcc	.+2      	; 0x5dfa <nodetraverse+0x146>
    5df8:	6b cf       	rjmp	.-298    	; 0x5cd0 <nodetraverse+0x1c>
		{
		    cond_flag=1;
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	9a 83       	std	Y+2, r25	; 0x02
    5e00:	89 83       	std	Y+1, r24	; 0x01
		    if(node_cnt<nodes)
    5e02:	2b 81       	ldd	r18, Y+3	; 0x03
    5e04:	3c 81       	ldd	r19, Y+4	; 0x04
    5e06:	8d 81       	ldd	r24, Y+5	; 0x05
    5e08:	9e 81       	ldd	r25, Y+6	; 0x06
    5e0a:	28 17       	cp	r18, r24
    5e0c:	39 07       	cpc	r19, r25
    5e0e:	34 f4       	brge	.+12     	; 0x5e1c <nodetraverse+0x168>
			{
		       forward();
    5e10:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
		       velocity(255,247);
    5e14:	8f ef       	ldi	r24, 0xFF	; 255
    5e16:	67 ef       	ldi	r22, 0xF7	; 247
    5e18:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <velocity>
			}
			if(q>=20)
    5e1c:	80 91 2e 03 	lds	r24, 0x032E
    5e20:	90 91 2f 03 	lds	r25, 0x032F
    5e24:	84 31       	cpi	r24, 0x14	; 20
    5e26:	91 05       	cpc	r25, r1
    5e28:	0c f4       	brge	.+2      	; 0x5e2c <nodetraverse+0x178>
    5e2a:	52 cf       	rjmp	.-348    	; 0x5cd0 <nodetraverse+0x1c>
			{
			    node_cnt++;
    5e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    5e30:	01 96       	adiw	r24, 0x01	; 1
    5e32:	9c 83       	std	Y+4, r25	; 0x04
    5e34:	8b 83       	std	Y+3, r24	; 0x03
				q=0;
    5e36:	10 92 2f 03 	sts	0x032F, r1
    5e3a:	10 92 2e 03 	sts	0x032E, r1
				if(node_cnt==nodes) // If the robot successfully traversed given number of nodes
    5e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    5e40:	3c 81       	ldd	r19, Y+4	; 0x04
    5e42:	8d 81       	ldd	r24, Y+5	; 0x05
    5e44:	9e 81       	ldd	r25, Y+6	; 0x06
    5e46:	28 17       	cp	r18, r24
    5e48:	39 07       	cpc	r19, r25
    5e4a:	09 f0       	breq	.+2      	; 0x5e4e <nodetraverse+0x19a>
    5e4c:	41 cf       	rjmp	.-382    	; 0x5cd0 <nodetraverse+0x1c>
					break;
			}
		}
	}
	stop();
    5e4e:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
	forward();
    5e52:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
	velocity(0,0);
    5e56:	80 e0       	ldi	r24, 0x00	; 0
    5e58:	60 e0       	ldi	r22, 0x00	; 0
    5e5a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <velocity>
	return;
}
    5e5e:	26 96       	adiw	r28, 0x06	; 6
    5e60:	0f b6       	in	r0, 0x3f	; 63
    5e62:	f8 94       	cli
    5e64:	de bf       	out	0x3e, r29	; 62
    5e66:	0f be       	out	0x3f, r0	; 63
    5e68:	cd bf       	out	0x3d, r28	; 61
    5e6a:	cf 91       	pop	r28
    5e6c:	df 91       	pop	r29
    5e6e:	08 95       	ret

00005e70 <pick>:

/* Function to pick the animal using arm */
void pick()
{
    5e70:	df 93       	push	r29
    5e72:	cf 93       	push	r28
    5e74:	cd b7       	in	r28, 0x3d	; 61
    5e76:	de b7       	in	r29, 0x3e	; 62
    5e78:	e9 97       	sbiw	r28, 0x39	; 57
    5e7a:	0f b6       	in	r0, 0x3f	; 63
    5e7c:	f8 94       	cli
    5e7e:	de bf       	out	0x3e, r29	; 62
    5e80:	0f be       	out	0x3f, r0	; 63
    5e82:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: pick
	Input: None
	Output: None
	*/
	init_devices1();
    5e84:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <init_devices1>
	unsigned char i = 0;
    5e88:	19 ae       	std	Y+57, r1	; 0x39
	
	// Open the grip
	servo_1(10);
    5e8a:	8a e0       	ldi	r24, 0x0A	; 10
    5e8c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <servo_1>
    5e90:	80 e0       	ldi	r24, 0x00	; 0
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	aa ef       	ldi	r26, 0xFA	; 250
    5e96:	b3 e4       	ldi	r27, 0x43	; 67
    5e98:	8d ab       	std	Y+53, r24	; 0x35
    5e9a:	9e ab       	std	Y+54, r25	; 0x36
    5e9c:	af ab       	std	Y+55, r26	; 0x37
    5e9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    5ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    5ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    5ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    5ea8:	26 e6       	ldi	r18, 0x66	; 102
    5eaa:	36 e6       	ldi	r19, 0x66	; 102
    5eac:	46 e6       	ldi	r20, 0x66	; 102
    5eae:	55 e4       	ldi	r21, 0x45	; 69
    5eb0:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5eb4:	dc 01       	movw	r26, r24
    5eb6:	cb 01       	movw	r24, r22
    5eb8:	89 ab       	std	Y+49, r24	; 0x31
    5eba:	9a ab       	std	Y+50, r25	; 0x32
    5ebc:	ab ab       	std	Y+51, r26	; 0x33
    5ebe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    5ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    5ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    5ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    5ec8:	20 e0       	ldi	r18, 0x00	; 0
    5eca:	30 e0       	ldi	r19, 0x00	; 0
    5ecc:	40 e8       	ldi	r20, 0x80	; 128
    5ece:	5f e3       	ldi	r21, 0x3F	; 63
    5ed0:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5ed4:	88 23       	and	r24, r24
    5ed6:	2c f4       	brge	.+10     	; 0x5ee2 <pick+0x72>
		__ticks = 1;
    5ed8:	81 e0       	ldi	r24, 0x01	; 1
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	98 ab       	std	Y+48, r25	; 0x30
    5ede:	8f a7       	std	Y+47, r24	; 0x2f
    5ee0:	3f c0       	rjmp	.+126    	; 0x5f60 <pick+0xf0>
	else if (__tmp > 65535)
    5ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    5ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    5ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    5ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    5eea:	20 e0       	ldi	r18, 0x00	; 0
    5eec:	3f ef       	ldi	r19, 0xFF	; 255
    5eee:	4f e7       	ldi	r20, 0x7F	; 127
    5ef0:	57 e4       	ldi	r21, 0x47	; 71
    5ef2:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5ef6:	18 16       	cp	r1, r24
    5ef8:	4c f5       	brge	.+82     	; 0x5f4c <pick+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5efa:	6d a9       	ldd	r22, Y+53	; 0x35
    5efc:	7e a9       	ldd	r23, Y+54	; 0x36
    5efe:	8f a9       	ldd	r24, Y+55	; 0x37
    5f00:	98 ad       	ldd	r25, Y+56	; 0x38
    5f02:	20 e0       	ldi	r18, 0x00	; 0
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	40 e2       	ldi	r20, 0x20	; 32
    5f08:	51 e4       	ldi	r21, 0x41	; 65
    5f0a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5f0e:	dc 01       	movw	r26, r24
    5f10:	cb 01       	movw	r24, r22
    5f12:	bc 01       	movw	r22, r24
    5f14:	cd 01       	movw	r24, r26
    5f16:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5f1a:	dc 01       	movw	r26, r24
    5f1c:	cb 01       	movw	r24, r22
    5f1e:	98 ab       	std	Y+48, r25	; 0x30
    5f20:	8f a7       	std	Y+47, r24	; 0x2f
    5f22:	0f c0       	rjmp	.+30     	; 0x5f42 <pick+0xd2>
    5f24:	80 e7       	ldi	r24, 0x70	; 112
    5f26:	91 e0       	ldi	r25, 0x01	; 1
    5f28:	9e a7       	std	Y+46, r25	; 0x2e
    5f2a:	8d a7       	std	Y+45, r24	; 0x2d
    5f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f30:	01 97       	sbiw	r24, 0x01	; 1
    5f32:	f1 f7       	brne	.-4      	; 0x5f30 <pick+0xc0>
    5f34:	9e a7       	std	Y+46, r25	; 0x2e
    5f36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f38:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    5f3c:	01 97       	sbiw	r24, 0x01	; 1
    5f3e:	98 ab       	std	Y+48, r25	; 0x30
    5f40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f44:	98 a9       	ldd	r25, Y+48	; 0x30
    5f46:	00 97       	sbiw	r24, 0x00	; 0
    5f48:	69 f7       	brne	.-38     	; 0x5f24 <pick+0xb4>
    5f4a:	14 c0       	rjmp	.+40     	; 0x5f74 <pick+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f4c:	69 a9       	ldd	r22, Y+49	; 0x31
    5f4e:	7a a9       	ldd	r23, Y+50	; 0x32
    5f50:	8b a9       	ldd	r24, Y+51	; 0x33
    5f52:	9c a9       	ldd	r25, Y+52	; 0x34
    5f54:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    5f58:	dc 01       	movw	r26, r24
    5f5a:	cb 01       	movw	r24, r22
    5f5c:	98 ab       	std	Y+48, r25	; 0x30
    5f5e:	8f a7       	std	Y+47, r24	; 0x2f
    5f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f62:	98 a9       	ldd	r25, Y+48	; 0x30
    5f64:	9c a7       	std	Y+44, r25	; 0x2c
    5f66:	8b a7       	std	Y+43, r24	; 0x2b
    5f68:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f6c:	01 97       	sbiw	r24, 0x01	; 1
    5f6e:	f1 f7       	brne	.-4      	; 0x5f6c <pick+0xfc>
    5f70:	9c a7       	std	Y+44, r25	; 0x2c
    5f72:	8b a7       	std	Y+43, r24	; 0x2b
	
	_delay_ms(500);
	servo_1_free();
    5f74:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <servo_1_free>
	servo_2_free();
    5f78:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <servo_2_free>
	
	// Bend the arm down towards the animal
	servo_2(42);
    5f7c:	8a e2       	ldi	r24, 0x2A	; 42
    5f7e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <servo_2>
    5f82:	80 e0       	ldi	r24, 0x00	; 0
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	aa ef       	ldi	r26, 0xFA	; 250
    5f88:	b3 e4       	ldi	r27, 0x43	; 67
    5f8a:	8f a3       	std	Y+39, r24	; 0x27
    5f8c:	98 a7       	std	Y+40, r25	; 0x28
    5f8e:	a9 a7       	std	Y+41, r26	; 0x29
    5f90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f92:	6f a1       	ldd	r22, Y+39	; 0x27
    5f94:	78 a5       	ldd	r23, Y+40	; 0x28
    5f96:	89 a5       	ldd	r24, Y+41	; 0x29
    5f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f9a:	26 e6       	ldi	r18, 0x66	; 102
    5f9c:	36 e6       	ldi	r19, 0x66	; 102
    5f9e:	46 e6       	ldi	r20, 0x66	; 102
    5fa0:	55 e4       	ldi	r21, 0x45	; 69
    5fa2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	cb 01       	movw	r24, r22
    5faa:	8b a3       	std	Y+35, r24	; 0x23
    5fac:	9c a3       	std	Y+36, r25	; 0x24
    5fae:	ad a3       	std	Y+37, r26	; 0x25
    5fb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    5fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    5fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    5fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    5fba:	20 e0       	ldi	r18, 0x00	; 0
    5fbc:	30 e0       	ldi	r19, 0x00	; 0
    5fbe:	40 e8       	ldi	r20, 0x80	; 128
    5fc0:	5f e3       	ldi	r21, 0x3F	; 63
    5fc2:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    5fc6:	88 23       	and	r24, r24
    5fc8:	2c f4       	brge	.+10     	; 0x5fd4 <pick+0x164>
		__ticks = 1;
    5fca:	81 e0       	ldi	r24, 0x01	; 1
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	9a a3       	std	Y+34, r25	; 0x22
    5fd0:	89 a3       	std	Y+33, r24	; 0x21
    5fd2:	3f c0       	rjmp	.+126    	; 0x6052 <pick+0x1e2>
	else if (__tmp > 65535)
    5fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    5fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    5fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    5fda:	9e a1       	ldd	r25, Y+38	; 0x26
    5fdc:	20 e0       	ldi	r18, 0x00	; 0
    5fde:	3f ef       	ldi	r19, 0xFF	; 255
    5fe0:	4f e7       	ldi	r20, 0x7F	; 127
    5fe2:	57 e4       	ldi	r21, 0x47	; 71
    5fe4:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    5fe8:	18 16       	cp	r1, r24
    5fea:	4c f5       	brge	.+82     	; 0x603e <pick+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fec:	6f a1       	ldd	r22, Y+39	; 0x27
    5fee:	78 a5       	ldd	r23, Y+40	; 0x28
    5ff0:	89 a5       	ldd	r24, Y+41	; 0x29
    5ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ff4:	20 e0       	ldi	r18, 0x00	; 0
    5ff6:	30 e0       	ldi	r19, 0x00	; 0
    5ff8:	40 e2       	ldi	r20, 0x20	; 32
    5ffa:	51 e4       	ldi	r21, 0x41	; 65
    5ffc:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6000:	dc 01       	movw	r26, r24
    6002:	cb 01       	movw	r24, r22
    6004:	bc 01       	movw	r22, r24
    6006:	cd 01       	movw	r24, r26
    6008:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    600c:	dc 01       	movw	r26, r24
    600e:	cb 01       	movw	r24, r22
    6010:	9a a3       	std	Y+34, r25	; 0x22
    6012:	89 a3       	std	Y+33, r24	; 0x21
    6014:	0f c0       	rjmp	.+30     	; 0x6034 <pick+0x1c4>
    6016:	80 e7       	ldi	r24, 0x70	; 112
    6018:	91 e0       	ldi	r25, 0x01	; 1
    601a:	98 a3       	std	Y+32, r25	; 0x20
    601c:	8f 8f       	std	Y+31, r24	; 0x1f
    601e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6020:	98 a1       	ldd	r25, Y+32	; 0x20
    6022:	01 97       	sbiw	r24, 0x01	; 1
    6024:	f1 f7       	brne	.-4      	; 0x6022 <pick+0x1b2>
    6026:	98 a3       	std	Y+32, r25	; 0x20
    6028:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    602a:	89 a1       	ldd	r24, Y+33	; 0x21
    602c:	9a a1       	ldd	r25, Y+34	; 0x22
    602e:	01 97       	sbiw	r24, 0x01	; 1
    6030:	9a a3       	std	Y+34, r25	; 0x22
    6032:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6034:	89 a1       	ldd	r24, Y+33	; 0x21
    6036:	9a a1       	ldd	r25, Y+34	; 0x22
    6038:	00 97       	sbiw	r24, 0x00	; 0
    603a:	69 f7       	brne	.-38     	; 0x6016 <pick+0x1a6>
    603c:	14 c0       	rjmp	.+40     	; 0x6066 <pick+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    603e:	6b a1       	ldd	r22, Y+35	; 0x23
    6040:	7c a1       	ldd	r23, Y+36	; 0x24
    6042:	8d a1       	ldd	r24, Y+37	; 0x25
    6044:	9e a1       	ldd	r25, Y+38	; 0x26
    6046:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	9a a3       	std	Y+34, r25	; 0x22
    6050:	89 a3       	std	Y+33, r24	; 0x21
    6052:	89 a1       	ldd	r24, Y+33	; 0x21
    6054:	9a a1       	ldd	r25, Y+34	; 0x22
    6056:	9e 8f       	std	Y+30, r25	; 0x1e
    6058:	8d 8f       	std	Y+29, r24	; 0x1d
    605a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    605c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    605e:	01 97       	sbiw	r24, 0x01	; 1
    6060:	f1 f7       	brne	.-4      	; 0x605e <pick+0x1ee>
    6062:	9e 8f       	std	Y+30, r25	; 0x1e
    6064:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(500);
	servo_1_free();
    6066:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <servo_1_free>
	servo_2_free();
    606a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <servo_2_free>
	
	// Pick up the animal by closing the grip
	servo_1(18);
    606e:	82 e1       	ldi	r24, 0x12	; 18
    6070:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <servo_1>
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	aa ef       	ldi	r26, 0xFA	; 250
    607a:	b3 e4       	ldi	r27, 0x43	; 67
    607c:	89 8f       	std	Y+25, r24	; 0x19
    607e:	9a 8f       	std	Y+26, r25	; 0x1a
    6080:	ab 8f       	std	Y+27, r26	; 0x1b
    6082:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6084:	69 8d       	ldd	r22, Y+25	; 0x19
    6086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    608a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    608c:	26 e6       	ldi	r18, 0x66	; 102
    608e:	36 e6       	ldi	r19, 0x66	; 102
    6090:	46 e6       	ldi	r20, 0x66	; 102
    6092:	55 e4       	ldi	r21, 0x45	; 69
    6094:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6098:	dc 01       	movw	r26, r24
    609a:	cb 01       	movw	r24, r22
    609c:	8d 8b       	std	Y+21, r24	; 0x15
    609e:	9e 8b       	std	Y+22, r25	; 0x16
    60a0:	af 8b       	std	Y+23, r26	; 0x17
    60a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60a4:	6d 89       	ldd	r22, Y+21	; 0x15
    60a6:	7e 89       	ldd	r23, Y+22	; 0x16
    60a8:	8f 89       	ldd	r24, Y+23	; 0x17
    60aa:	98 8d       	ldd	r25, Y+24	; 0x18
    60ac:	20 e0       	ldi	r18, 0x00	; 0
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	40 e8       	ldi	r20, 0x80	; 128
    60b2:	5f e3       	ldi	r21, 0x3F	; 63
    60b4:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    60b8:	88 23       	and	r24, r24
    60ba:	2c f4       	brge	.+10     	; 0x60c6 <pick+0x256>
		__ticks = 1;
    60bc:	81 e0       	ldi	r24, 0x01	; 1
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	9c 8b       	std	Y+20, r25	; 0x14
    60c2:	8b 8b       	std	Y+19, r24	; 0x13
    60c4:	3f c0       	rjmp	.+126    	; 0x6144 <pick+0x2d4>
	else if (__tmp > 65535)
    60c6:	6d 89       	ldd	r22, Y+21	; 0x15
    60c8:	7e 89       	ldd	r23, Y+22	; 0x16
    60ca:	8f 89       	ldd	r24, Y+23	; 0x17
    60cc:	98 8d       	ldd	r25, Y+24	; 0x18
    60ce:	20 e0       	ldi	r18, 0x00	; 0
    60d0:	3f ef       	ldi	r19, 0xFF	; 255
    60d2:	4f e7       	ldi	r20, 0x7F	; 127
    60d4:	57 e4       	ldi	r21, 0x47	; 71
    60d6:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    60da:	18 16       	cp	r1, r24
    60dc:	4c f5       	brge	.+82     	; 0x6130 <pick+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60de:	69 8d       	ldd	r22, Y+25	; 0x19
    60e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60e6:	20 e0       	ldi	r18, 0x00	; 0
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	40 e2       	ldi	r20, 0x20	; 32
    60ec:	51 e4       	ldi	r21, 0x41	; 65
    60ee:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    60f2:	dc 01       	movw	r26, r24
    60f4:	cb 01       	movw	r24, r22
    60f6:	bc 01       	movw	r22, r24
    60f8:	cd 01       	movw	r24, r26
    60fa:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    60fe:	dc 01       	movw	r26, r24
    6100:	cb 01       	movw	r24, r22
    6102:	9c 8b       	std	Y+20, r25	; 0x14
    6104:	8b 8b       	std	Y+19, r24	; 0x13
    6106:	0f c0       	rjmp	.+30     	; 0x6126 <pick+0x2b6>
    6108:	80 e7       	ldi	r24, 0x70	; 112
    610a:	91 e0       	ldi	r25, 0x01	; 1
    610c:	9a 8b       	std	Y+18, r25	; 0x12
    610e:	89 8b       	std	Y+17, r24	; 0x11
    6110:	89 89       	ldd	r24, Y+17	; 0x11
    6112:	9a 89       	ldd	r25, Y+18	; 0x12
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	f1 f7       	brne	.-4      	; 0x6114 <pick+0x2a4>
    6118:	9a 8b       	std	Y+18, r25	; 0x12
    611a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    611c:	8b 89       	ldd	r24, Y+19	; 0x13
    611e:	9c 89       	ldd	r25, Y+20	; 0x14
    6120:	01 97       	sbiw	r24, 0x01	; 1
    6122:	9c 8b       	std	Y+20, r25	; 0x14
    6124:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6126:	8b 89       	ldd	r24, Y+19	; 0x13
    6128:	9c 89       	ldd	r25, Y+20	; 0x14
    612a:	00 97       	sbiw	r24, 0x00	; 0
    612c:	69 f7       	brne	.-38     	; 0x6108 <pick+0x298>
    612e:	14 c0       	rjmp	.+40     	; 0x6158 <pick+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6130:	6d 89       	ldd	r22, Y+21	; 0x15
    6132:	7e 89       	ldd	r23, Y+22	; 0x16
    6134:	8f 89       	ldd	r24, Y+23	; 0x17
    6136:	98 8d       	ldd	r25, Y+24	; 0x18
    6138:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    613c:	dc 01       	movw	r26, r24
    613e:	cb 01       	movw	r24, r22
    6140:	9c 8b       	std	Y+20, r25	; 0x14
    6142:	8b 8b       	std	Y+19, r24	; 0x13
    6144:	8b 89       	ldd	r24, Y+19	; 0x13
    6146:	9c 89       	ldd	r25, Y+20	; 0x14
    6148:	98 8b       	std	Y+16, r25	; 0x10
    614a:	8f 87       	std	Y+15, r24	; 0x0f
    614c:	8f 85       	ldd	r24, Y+15	; 0x0f
    614e:	98 89       	ldd	r25, Y+16	; 0x10
    6150:	01 97       	sbiw	r24, 0x01	; 1
    6152:	f1 f7       	brne	.-4      	; 0x6150 <pick+0x2e0>
    6154:	98 8b       	std	Y+16, r25	; 0x10
    6156:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(500);
	
	// Lift the animal by rotating the arm upwards
	servo_2(5);
    6158:	85 e0       	ldi	r24, 0x05	; 5
    615a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <servo_2>
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	aa ef       	ldi	r26, 0xFA	; 250
    6164:	b3 e4       	ldi	r27, 0x43	; 67
    6166:	8b 87       	std	Y+11, r24	; 0x0b
    6168:	9c 87       	std	Y+12, r25	; 0x0c
    616a:	ad 87       	std	Y+13, r26	; 0x0d
    616c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    616e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6170:	7c 85       	ldd	r23, Y+12	; 0x0c
    6172:	8d 85       	ldd	r24, Y+13	; 0x0d
    6174:	9e 85       	ldd	r25, Y+14	; 0x0e
    6176:	26 e6       	ldi	r18, 0x66	; 102
    6178:	36 e6       	ldi	r19, 0x66	; 102
    617a:	46 e6       	ldi	r20, 0x66	; 102
    617c:	55 e4       	ldi	r21, 0x45	; 69
    617e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6182:	dc 01       	movw	r26, r24
    6184:	cb 01       	movw	r24, r22
    6186:	8f 83       	std	Y+7, r24	; 0x07
    6188:	98 87       	std	Y+8, r25	; 0x08
    618a:	a9 87       	std	Y+9, r26	; 0x09
    618c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    618e:	6f 81       	ldd	r22, Y+7	; 0x07
    6190:	78 85       	ldd	r23, Y+8	; 0x08
    6192:	89 85       	ldd	r24, Y+9	; 0x09
    6194:	9a 85       	ldd	r25, Y+10	; 0x0a
    6196:	20 e0       	ldi	r18, 0x00	; 0
    6198:	30 e0       	ldi	r19, 0x00	; 0
    619a:	40 e8       	ldi	r20, 0x80	; 128
    619c:	5f e3       	ldi	r21, 0x3F	; 63
    619e:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    61a2:	88 23       	and	r24, r24
    61a4:	2c f4       	brge	.+10     	; 0x61b0 <pick+0x340>
		__ticks = 1;
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	9e 83       	std	Y+6, r25	; 0x06
    61ac:	8d 83       	std	Y+5, r24	; 0x05
    61ae:	3f c0       	rjmp	.+126    	; 0x622e <pick+0x3be>
	else if (__tmp > 65535)
    61b0:	6f 81       	ldd	r22, Y+7	; 0x07
    61b2:	78 85       	ldd	r23, Y+8	; 0x08
    61b4:	89 85       	ldd	r24, Y+9	; 0x09
    61b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b8:	20 e0       	ldi	r18, 0x00	; 0
    61ba:	3f ef       	ldi	r19, 0xFF	; 255
    61bc:	4f e7       	ldi	r20, 0x7F	; 127
    61be:	57 e4       	ldi	r21, 0x47	; 71
    61c0:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    61c4:	18 16       	cp	r1, r24
    61c6:	4c f5       	brge	.+82     	; 0x621a <pick+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    61ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    61cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    61ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    61d0:	20 e0       	ldi	r18, 0x00	; 0
    61d2:	30 e0       	ldi	r19, 0x00	; 0
    61d4:	40 e2       	ldi	r20, 0x20	; 32
    61d6:	51 e4       	ldi	r21, 0x41	; 65
    61d8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    61dc:	dc 01       	movw	r26, r24
    61de:	cb 01       	movw	r24, r22
    61e0:	bc 01       	movw	r22, r24
    61e2:	cd 01       	movw	r24, r26
    61e4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    61e8:	dc 01       	movw	r26, r24
    61ea:	cb 01       	movw	r24, r22
    61ec:	9e 83       	std	Y+6, r25	; 0x06
    61ee:	8d 83       	std	Y+5, r24	; 0x05
    61f0:	0f c0       	rjmp	.+30     	; 0x6210 <pick+0x3a0>
    61f2:	80 e7       	ldi	r24, 0x70	; 112
    61f4:	91 e0       	ldi	r25, 0x01	; 1
    61f6:	9c 83       	std	Y+4, r25	; 0x04
    61f8:	8b 83       	std	Y+3, r24	; 0x03
    61fa:	8b 81       	ldd	r24, Y+3	; 0x03
    61fc:	9c 81       	ldd	r25, Y+4	; 0x04
    61fe:	01 97       	sbiw	r24, 0x01	; 1
    6200:	f1 f7       	brne	.-4      	; 0x61fe <pick+0x38e>
    6202:	9c 83       	std	Y+4, r25	; 0x04
    6204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6206:	8d 81       	ldd	r24, Y+5	; 0x05
    6208:	9e 81       	ldd	r25, Y+6	; 0x06
    620a:	01 97       	sbiw	r24, 0x01	; 1
    620c:	9e 83       	std	Y+6, r25	; 0x06
    620e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6210:	8d 81       	ldd	r24, Y+5	; 0x05
    6212:	9e 81       	ldd	r25, Y+6	; 0x06
    6214:	00 97       	sbiw	r24, 0x00	; 0
    6216:	69 f7       	brne	.-38     	; 0x61f2 <pick+0x382>
    6218:	14 c0       	rjmp	.+40     	; 0x6242 <pick+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    621a:	6f 81       	ldd	r22, Y+7	; 0x07
    621c:	78 85       	ldd	r23, Y+8	; 0x08
    621e:	89 85       	ldd	r24, Y+9	; 0x09
    6220:	9a 85       	ldd	r25, Y+10	; 0x0a
    6222:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    6226:	dc 01       	movw	r26, r24
    6228:	cb 01       	movw	r24, r22
    622a:	9e 83       	std	Y+6, r25	; 0x06
    622c:	8d 83       	std	Y+5, r24	; 0x05
    622e:	8d 81       	ldd	r24, Y+5	; 0x05
    6230:	9e 81       	ldd	r25, Y+6	; 0x06
    6232:	9a 83       	std	Y+2, r25	; 0x02
    6234:	89 83       	std	Y+1, r24	; 0x01
    6236:	89 81       	ldd	r24, Y+1	; 0x01
    6238:	9a 81       	ldd	r25, Y+2	; 0x02
    623a:	01 97       	sbiw	r24, 0x01	; 1
    623c:	f1 f7       	brne	.-4      	; 0x623a <pick+0x3ca>
    623e:	9a 83       	std	Y+2, r25	; 0x02
    6240:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    6242:	e9 96       	adiw	r28, 0x39	; 57
    6244:	0f b6       	in	r0, 0x3f	; 63
    6246:	f8 94       	cli
    6248:	de bf       	out	0x3e, r29	; 62
    624a:	0f be       	out	0x3f, r0	; 63
    624c:	cd bf       	out	0x3d, r28	; 61
    624e:	cf 91       	pop	r28
    6250:	df 91       	pop	r29
    6252:	08 95       	ret

00006254 <drop>:

/* Function to drop the animal at the habitat using arm */
void drop()
{
    6254:	0f 93       	push	r16
    6256:	1f 93       	push	r17
    6258:	df 93       	push	r29
    625a:	cf 93       	push	r28
    625c:	cd b7       	in	r28, 0x3d	; 61
    625e:	de b7       	in	r29, 0x3e	; 62
    6260:	c5 55       	subi	r28, 0x55	; 85
    6262:	d0 40       	sbci	r29, 0x00	; 0
    6264:	0f b6       	in	r0, 0x3f	; 63
    6266:	f8 94       	cli
    6268:	de bf       	out	0x3e, r29	; 62
    626a:	0f be       	out	0x3f, r0	; 63
    626c:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: drop
	Input: None
	Output: None
	*/
	init_devices1();
    626e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <init_devices1>
	unsigned char i = 0;
    6272:	fe 01       	movw	r30, r28
    6274:	eb 5a       	subi	r30, 0xAB	; 171
    6276:	ff 4f       	sbci	r31, 0xFF	; 255
    6278:	10 82       	st	Z, r1
	servo_1(19);
    627a:	83 e1       	ldi	r24, 0x13	; 19
    627c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <servo_1>
    6280:	fe 01       	movw	r30, r28
    6282:	ef 5a       	subi	r30, 0xAF	; 175
    6284:	ff 4f       	sbci	r31, 0xFF	; 255
    6286:	80 e0       	ldi	r24, 0x00	; 0
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	a8 ec       	ldi	r26, 0xC8	; 200
    628c:	b3 e4       	ldi	r27, 0x43	; 67
    628e:	80 83       	st	Z, r24
    6290:	91 83       	std	Z+1, r25	; 0x01
    6292:	a2 83       	std	Z+2, r26	; 0x02
    6294:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6296:	8e 01       	movw	r16, r28
    6298:	03 5b       	subi	r16, 0xB3	; 179
    629a:	1f 4f       	sbci	r17, 0xFF	; 255
    629c:	fe 01       	movw	r30, r28
    629e:	ef 5a       	subi	r30, 0xAF	; 175
    62a0:	ff 4f       	sbci	r31, 0xFF	; 255
    62a2:	60 81       	ld	r22, Z
    62a4:	71 81       	ldd	r23, Z+1	; 0x01
    62a6:	82 81       	ldd	r24, Z+2	; 0x02
    62a8:	93 81       	ldd	r25, Z+3	; 0x03
    62aa:	26 e6       	ldi	r18, 0x66	; 102
    62ac:	36 e6       	ldi	r19, 0x66	; 102
    62ae:	46 e6       	ldi	r20, 0x66	; 102
    62b0:	55 e4       	ldi	r21, 0x45	; 69
    62b2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    62b6:	dc 01       	movw	r26, r24
    62b8:	cb 01       	movw	r24, r22
    62ba:	f8 01       	movw	r30, r16
    62bc:	80 83       	st	Z, r24
    62be:	91 83       	std	Z+1, r25	; 0x01
    62c0:	a2 83       	std	Z+2, r26	; 0x02
    62c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62c4:	fe 01       	movw	r30, r28
    62c6:	e3 5b       	subi	r30, 0xB3	; 179
    62c8:	ff 4f       	sbci	r31, 0xFF	; 255
    62ca:	60 81       	ld	r22, Z
    62cc:	71 81       	ldd	r23, Z+1	; 0x01
    62ce:	82 81       	ldd	r24, Z+2	; 0x02
    62d0:	93 81       	ldd	r25, Z+3	; 0x03
    62d2:	20 e0       	ldi	r18, 0x00	; 0
    62d4:	30 e0       	ldi	r19, 0x00	; 0
    62d6:	40 e8       	ldi	r20, 0x80	; 128
    62d8:	5f e3       	ldi	r21, 0x3F	; 63
    62da:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    62de:	88 23       	and	r24, r24
    62e0:	44 f4       	brge	.+16     	; 0x62f2 <drop+0x9e>
		__ticks = 1;
    62e2:	fe 01       	movw	r30, r28
    62e4:	e5 5b       	subi	r30, 0xB5	; 181
    62e6:	ff 4f       	sbci	r31, 0xFF	; 255
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	91 83       	std	Z+1, r25	; 0x01
    62ee:	80 83       	st	Z, r24
    62f0:	64 c0       	rjmp	.+200    	; 0x63ba <drop+0x166>
	else if (__tmp > 65535)
    62f2:	fe 01       	movw	r30, r28
    62f4:	e3 5b       	subi	r30, 0xB3	; 179
    62f6:	ff 4f       	sbci	r31, 0xFF	; 255
    62f8:	60 81       	ld	r22, Z
    62fa:	71 81       	ldd	r23, Z+1	; 0x01
    62fc:	82 81       	ldd	r24, Z+2	; 0x02
    62fe:	93 81       	ldd	r25, Z+3	; 0x03
    6300:	20 e0       	ldi	r18, 0x00	; 0
    6302:	3f ef       	ldi	r19, 0xFF	; 255
    6304:	4f e7       	ldi	r20, 0x7F	; 127
    6306:	57 e4       	ldi	r21, 0x47	; 71
    6308:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    630c:	18 16       	cp	r1, r24
    630e:	0c f0       	brlt	.+2      	; 0x6312 <drop+0xbe>
    6310:	43 c0       	rjmp	.+134    	; 0x6398 <drop+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6312:	fe 01       	movw	r30, r28
    6314:	ef 5a       	subi	r30, 0xAF	; 175
    6316:	ff 4f       	sbci	r31, 0xFF	; 255
    6318:	60 81       	ld	r22, Z
    631a:	71 81       	ldd	r23, Z+1	; 0x01
    631c:	82 81       	ldd	r24, Z+2	; 0x02
    631e:	93 81       	ldd	r25, Z+3	; 0x03
    6320:	20 e0       	ldi	r18, 0x00	; 0
    6322:	30 e0       	ldi	r19, 0x00	; 0
    6324:	40 e2       	ldi	r20, 0x20	; 32
    6326:	51 e4       	ldi	r21, 0x41	; 65
    6328:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    632c:	dc 01       	movw	r26, r24
    632e:	cb 01       	movw	r24, r22
    6330:	8e 01       	movw	r16, r28
    6332:	05 5b       	subi	r16, 0xB5	; 181
    6334:	1f 4f       	sbci	r17, 0xFF	; 255
    6336:	bc 01       	movw	r22, r24
    6338:	cd 01       	movw	r24, r26
    633a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    633e:	dc 01       	movw	r26, r24
    6340:	cb 01       	movw	r24, r22
    6342:	f8 01       	movw	r30, r16
    6344:	91 83       	std	Z+1, r25	; 0x01
    6346:	80 83       	st	Z, r24
    6348:	1f c0       	rjmp	.+62     	; 0x6388 <drop+0x134>
    634a:	fe 01       	movw	r30, r28
    634c:	e7 5b       	subi	r30, 0xB7	; 183
    634e:	ff 4f       	sbci	r31, 0xFF	; 255
    6350:	80 e7       	ldi	r24, 0x70	; 112
    6352:	91 e0       	ldi	r25, 0x01	; 1
    6354:	91 83       	std	Z+1, r25	; 0x01
    6356:	80 83       	st	Z, r24
    6358:	fe 01       	movw	r30, r28
    635a:	e7 5b       	subi	r30, 0xB7	; 183
    635c:	ff 4f       	sbci	r31, 0xFF	; 255
    635e:	80 81       	ld	r24, Z
    6360:	91 81       	ldd	r25, Z+1	; 0x01
    6362:	01 97       	sbiw	r24, 0x01	; 1
    6364:	f1 f7       	brne	.-4      	; 0x6362 <drop+0x10e>
    6366:	fe 01       	movw	r30, r28
    6368:	e7 5b       	subi	r30, 0xB7	; 183
    636a:	ff 4f       	sbci	r31, 0xFF	; 255
    636c:	91 83       	std	Z+1, r25	; 0x01
    636e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6370:	de 01       	movw	r26, r28
    6372:	a5 5b       	subi	r26, 0xB5	; 181
    6374:	bf 4f       	sbci	r27, 0xFF	; 255
    6376:	fe 01       	movw	r30, r28
    6378:	e5 5b       	subi	r30, 0xB5	; 181
    637a:	ff 4f       	sbci	r31, 0xFF	; 255
    637c:	80 81       	ld	r24, Z
    637e:	91 81       	ldd	r25, Z+1	; 0x01
    6380:	01 97       	sbiw	r24, 0x01	; 1
    6382:	11 96       	adiw	r26, 0x01	; 1
    6384:	9c 93       	st	X, r25
    6386:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6388:	fe 01       	movw	r30, r28
    638a:	e5 5b       	subi	r30, 0xB5	; 181
    638c:	ff 4f       	sbci	r31, 0xFF	; 255
    638e:	80 81       	ld	r24, Z
    6390:	91 81       	ldd	r25, Z+1	; 0x01
    6392:	00 97       	sbiw	r24, 0x00	; 0
    6394:	d1 f6       	brne	.-76     	; 0x634a <drop+0xf6>
    6396:	28 c0       	rjmp	.+80     	; 0x63e8 <drop+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6398:	8e 01       	movw	r16, r28
    639a:	05 5b       	subi	r16, 0xB5	; 181
    639c:	1f 4f       	sbci	r17, 0xFF	; 255
    639e:	fe 01       	movw	r30, r28
    63a0:	e3 5b       	subi	r30, 0xB3	; 179
    63a2:	ff 4f       	sbci	r31, 0xFF	; 255
    63a4:	60 81       	ld	r22, Z
    63a6:	71 81       	ldd	r23, Z+1	; 0x01
    63a8:	82 81       	ldd	r24, Z+2	; 0x02
    63aa:	93 81       	ldd	r25, Z+3	; 0x03
    63ac:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    63b0:	dc 01       	movw	r26, r24
    63b2:	cb 01       	movw	r24, r22
    63b4:	f8 01       	movw	r30, r16
    63b6:	91 83       	std	Z+1, r25	; 0x01
    63b8:	80 83       	st	Z, r24
    63ba:	de 01       	movw	r26, r28
    63bc:	a9 5b       	subi	r26, 0xB9	; 185
    63be:	bf 4f       	sbci	r27, 0xFF	; 255
    63c0:	fe 01       	movw	r30, r28
    63c2:	e5 5b       	subi	r30, 0xB5	; 181
    63c4:	ff 4f       	sbci	r31, 0xFF	; 255
    63c6:	80 81       	ld	r24, Z
    63c8:	91 81       	ldd	r25, Z+1	; 0x01
    63ca:	11 96       	adiw	r26, 0x01	; 1
    63cc:	9c 93       	st	X, r25
    63ce:	8e 93       	st	-X, r24
    63d0:	fe 01       	movw	r30, r28
    63d2:	e9 5b       	subi	r30, 0xB9	; 185
    63d4:	ff 4f       	sbci	r31, 0xFF	; 255
    63d6:	80 81       	ld	r24, Z
    63d8:	91 81       	ldd	r25, Z+1	; 0x01
    63da:	01 97       	sbiw	r24, 0x01	; 1
    63dc:	f1 f7       	brne	.-4      	; 0x63da <drop+0x186>
    63de:	fe 01       	movw	r30, r28
    63e0:	e9 5b       	subi	r30, 0xB9	; 185
    63e2:	ff 4f       	sbci	r31, 0xFF	; 255
    63e4:	91 83       	std	Z+1, r25	; 0x01
    63e6:	80 83       	st	Z, r24
	_delay_ms(400);
	// Bend the arm towards the habitat
	for (i = 0; i < 41; i++)
    63e8:	fe 01       	movw	r30, r28
    63ea:	eb 5a       	subi	r30, 0xAB	; 171
    63ec:	ff 4f       	sbci	r31, 0xFF	; 255
    63ee:	10 82       	st	Z, r1
    63f0:	94 c0       	rjmp	.+296    	; 0x651a <drop+0x2c6>
	{
		servo_2(i);
    63f2:	fe 01       	movw	r30, r28
    63f4:	eb 5a       	subi	r30, 0xAB	; 171
    63f6:	ff 4f       	sbci	r31, 0xFF	; 255
    63f8:	80 81       	ld	r24, Z
    63fa:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <servo_2>
    63fe:	fe 01       	movw	r30, r28
    6400:	ed 5b       	subi	r30, 0xBD	; 189
    6402:	ff 4f       	sbci	r31, 0xFF	; 255
    6404:	80 e0       	ldi	r24, 0x00	; 0
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	a0 e7       	ldi	r26, 0x70	; 112
    640a:	b1 e4       	ldi	r27, 0x41	; 65
    640c:	80 83       	st	Z, r24
    640e:	91 83       	std	Z+1, r25	; 0x01
    6410:	a2 83       	std	Z+2, r26	; 0x02
    6412:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6414:	8e 01       	movw	r16, r28
    6416:	01 5c       	subi	r16, 0xC1	; 193
    6418:	1f 4f       	sbci	r17, 0xFF	; 255
    641a:	fe 01       	movw	r30, r28
    641c:	ed 5b       	subi	r30, 0xBD	; 189
    641e:	ff 4f       	sbci	r31, 0xFF	; 255
    6420:	60 81       	ld	r22, Z
    6422:	71 81       	ldd	r23, Z+1	; 0x01
    6424:	82 81       	ldd	r24, Z+2	; 0x02
    6426:	93 81       	ldd	r25, Z+3	; 0x03
    6428:	26 e6       	ldi	r18, 0x66	; 102
    642a:	36 e6       	ldi	r19, 0x66	; 102
    642c:	46 e6       	ldi	r20, 0x66	; 102
    642e:	55 e4       	ldi	r21, 0x45	; 69
    6430:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6434:	dc 01       	movw	r26, r24
    6436:	cb 01       	movw	r24, r22
    6438:	f8 01       	movw	r30, r16
    643a:	80 83       	st	Z, r24
    643c:	91 83       	std	Z+1, r25	; 0x01
    643e:	a2 83       	std	Z+2, r26	; 0x02
    6440:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6442:	fe 01       	movw	r30, r28
    6444:	ff 96       	adiw	r30, 0x3f	; 63
    6446:	60 81       	ld	r22, Z
    6448:	71 81       	ldd	r23, Z+1	; 0x01
    644a:	82 81       	ldd	r24, Z+2	; 0x02
    644c:	93 81       	ldd	r25, Z+3	; 0x03
    644e:	20 e0       	ldi	r18, 0x00	; 0
    6450:	30 e0       	ldi	r19, 0x00	; 0
    6452:	40 e8       	ldi	r20, 0x80	; 128
    6454:	5f e3       	ldi	r21, 0x3F	; 63
    6456:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    645a:	88 23       	and	r24, r24
    645c:	2c f4       	brge	.+10     	; 0x6468 <drop+0x214>
		__ticks = 1;
    645e:	81 e0       	ldi	r24, 0x01	; 1
    6460:	90 e0       	ldi	r25, 0x00	; 0
    6462:	9e af       	std	Y+62, r25	; 0x3e
    6464:	8d af       	std	Y+61, r24	; 0x3d
    6466:	46 c0       	rjmp	.+140    	; 0x64f4 <drop+0x2a0>
	else if (__tmp > 65535)
    6468:	fe 01       	movw	r30, r28
    646a:	ff 96       	adiw	r30, 0x3f	; 63
    646c:	60 81       	ld	r22, Z
    646e:	71 81       	ldd	r23, Z+1	; 0x01
    6470:	82 81       	ldd	r24, Z+2	; 0x02
    6472:	93 81       	ldd	r25, Z+3	; 0x03
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	3f ef       	ldi	r19, 0xFF	; 255
    6478:	4f e7       	ldi	r20, 0x7F	; 127
    647a:	57 e4       	ldi	r21, 0x47	; 71
    647c:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    6480:	18 16       	cp	r1, r24
    6482:	64 f5       	brge	.+88     	; 0x64dc <drop+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6484:	fe 01       	movw	r30, r28
    6486:	ed 5b       	subi	r30, 0xBD	; 189
    6488:	ff 4f       	sbci	r31, 0xFF	; 255
    648a:	60 81       	ld	r22, Z
    648c:	71 81       	ldd	r23, Z+1	; 0x01
    648e:	82 81       	ldd	r24, Z+2	; 0x02
    6490:	93 81       	ldd	r25, Z+3	; 0x03
    6492:	20 e0       	ldi	r18, 0x00	; 0
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	40 e2       	ldi	r20, 0x20	; 32
    6498:	51 e4       	ldi	r21, 0x41	; 65
    649a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    649e:	dc 01       	movw	r26, r24
    64a0:	cb 01       	movw	r24, r22
    64a2:	bc 01       	movw	r22, r24
    64a4:	cd 01       	movw	r24, r26
    64a6:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    64aa:	dc 01       	movw	r26, r24
    64ac:	cb 01       	movw	r24, r22
    64ae:	9e af       	std	Y+62, r25	; 0x3e
    64b0:	8d af       	std	Y+61, r24	; 0x3d
    64b2:	0f c0       	rjmp	.+30     	; 0x64d2 <drop+0x27e>
    64b4:	80 e7       	ldi	r24, 0x70	; 112
    64b6:	91 e0       	ldi	r25, 0x01	; 1
    64b8:	9c af       	std	Y+60, r25	; 0x3c
    64ba:	8b af       	std	Y+59, r24	; 0x3b
    64bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    64be:	9c ad       	ldd	r25, Y+60	; 0x3c
    64c0:	01 97       	sbiw	r24, 0x01	; 1
    64c2:	f1 f7       	brne	.-4      	; 0x64c0 <drop+0x26c>
    64c4:	9c af       	std	Y+60, r25	; 0x3c
    64c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    64ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    64cc:	01 97       	sbiw	r24, 0x01	; 1
    64ce:	9e af       	std	Y+62, r25	; 0x3e
    64d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    64d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    64d6:	00 97       	sbiw	r24, 0x00	; 0
    64d8:	69 f7       	brne	.-38     	; 0x64b4 <drop+0x260>
    64da:	16 c0       	rjmp	.+44     	; 0x6508 <drop+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64dc:	fe 01       	movw	r30, r28
    64de:	ff 96       	adiw	r30, 0x3f	; 63
    64e0:	60 81       	ld	r22, Z
    64e2:	71 81       	ldd	r23, Z+1	; 0x01
    64e4:	82 81       	ldd	r24, Z+2	; 0x02
    64e6:	93 81       	ldd	r25, Z+3	; 0x03
    64e8:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    64ec:	dc 01       	movw	r26, r24
    64ee:	cb 01       	movw	r24, r22
    64f0:	9e af       	std	Y+62, r25	; 0x3e
    64f2:	8d af       	std	Y+61, r24	; 0x3d
    64f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    64f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    64f8:	9a af       	std	Y+58, r25	; 0x3a
    64fa:	89 af       	std	Y+57, r24	; 0x39
    64fc:	89 ad       	ldd	r24, Y+57	; 0x39
    64fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    6500:	01 97       	sbiw	r24, 0x01	; 1
    6502:	f1 f7       	brne	.-4      	; 0x6500 <drop+0x2ac>
    6504:	9a af       	std	Y+58, r25	; 0x3a
    6506:	89 af       	std	Y+57, r24	; 0x39
	init_devices1();
	unsigned char i = 0;
	servo_1(19);
	_delay_ms(400);
	// Bend the arm towards the habitat
	for (i = 0; i < 41; i++)
    6508:	de 01       	movw	r26, r28
    650a:	ab 5a       	subi	r26, 0xAB	; 171
    650c:	bf 4f       	sbci	r27, 0xFF	; 255
    650e:	fe 01       	movw	r30, r28
    6510:	eb 5a       	subi	r30, 0xAB	; 171
    6512:	ff 4f       	sbci	r31, 0xFF	; 255
    6514:	80 81       	ld	r24, Z
    6516:	8f 5f       	subi	r24, 0xFF	; 255
    6518:	8c 93       	st	X, r24
    651a:	fe 01       	movw	r30, r28
    651c:	eb 5a       	subi	r30, 0xAB	; 171
    651e:	ff 4f       	sbci	r31, 0xFF	; 255
    6520:	80 81       	ld	r24, Z
    6522:	89 32       	cpi	r24, 0x29	; 41
    6524:	08 f4       	brcc	.+2      	; 0x6528 <drop+0x2d4>
    6526:	65 cf       	rjmp	.-310    	; 0x63f2 <drop+0x19e>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	aa ef       	ldi	r26, 0xFA	; 250
    652e:	b3 e4       	ldi	r27, 0x43	; 67
    6530:	8d ab       	std	Y+53, r24	; 0x35
    6532:	9e ab       	std	Y+54, r25	; 0x36
    6534:	af ab       	std	Y+55, r26	; 0x37
    6536:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6538:	6d a9       	ldd	r22, Y+53	; 0x35
    653a:	7e a9       	ldd	r23, Y+54	; 0x36
    653c:	8f a9       	ldd	r24, Y+55	; 0x37
    653e:	98 ad       	ldd	r25, Y+56	; 0x38
    6540:	26 e6       	ldi	r18, 0x66	; 102
    6542:	36 e6       	ldi	r19, 0x66	; 102
    6544:	46 e6       	ldi	r20, 0x66	; 102
    6546:	55 e4       	ldi	r21, 0x45	; 69
    6548:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    654c:	dc 01       	movw	r26, r24
    654e:	cb 01       	movw	r24, r22
    6550:	89 ab       	std	Y+49, r24	; 0x31
    6552:	9a ab       	std	Y+50, r25	; 0x32
    6554:	ab ab       	std	Y+51, r26	; 0x33
    6556:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6558:	69 a9       	ldd	r22, Y+49	; 0x31
    655a:	7a a9       	ldd	r23, Y+50	; 0x32
    655c:	8b a9       	ldd	r24, Y+51	; 0x33
    655e:	9c a9       	ldd	r25, Y+52	; 0x34
    6560:	20 e0       	ldi	r18, 0x00	; 0
    6562:	30 e0       	ldi	r19, 0x00	; 0
    6564:	40 e8       	ldi	r20, 0x80	; 128
    6566:	5f e3       	ldi	r21, 0x3F	; 63
    6568:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    656c:	88 23       	and	r24, r24
    656e:	2c f4       	brge	.+10     	; 0x657a <drop+0x326>
		__ticks = 1;
    6570:	81 e0       	ldi	r24, 0x01	; 1
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	98 ab       	std	Y+48, r25	; 0x30
    6576:	8f a7       	std	Y+47, r24	; 0x2f
    6578:	3f c0       	rjmp	.+126    	; 0x65f8 <drop+0x3a4>
	else if (__tmp > 65535)
    657a:	69 a9       	ldd	r22, Y+49	; 0x31
    657c:	7a a9       	ldd	r23, Y+50	; 0x32
    657e:	8b a9       	ldd	r24, Y+51	; 0x33
    6580:	9c a9       	ldd	r25, Y+52	; 0x34
    6582:	20 e0       	ldi	r18, 0x00	; 0
    6584:	3f ef       	ldi	r19, 0xFF	; 255
    6586:	4f e7       	ldi	r20, 0x7F	; 127
    6588:	57 e4       	ldi	r21, 0x47	; 71
    658a:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    658e:	18 16       	cp	r1, r24
    6590:	4c f5       	brge	.+82     	; 0x65e4 <drop+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6592:	6d a9       	ldd	r22, Y+53	; 0x35
    6594:	7e a9       	ldd	r23, Y+54	; 0x36
    6596:	8f a9       	ldd	r24, Y+55	; 0x37
    6598:	98 ad       	ldd	r25, Y+56	; 0x38
    659a:	20 e0       	ldi	r18, 0x00	; 0
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	40 e2       	ldi	r20, 0x20	; 32
    65a0:	51 e4       	ldi	r21, 0x41	; 65
    65a2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    65a6:	dc 01       	movw	r26, r24
    65a8:	cb 01       	movw	r24, r22
    65aa:	bc 01       	movw	r22, r24
    65ac:	cd 01       	movw	r24, r26
    65ae:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    65b2:	dc 01       	movw	r26, r24
    65b4:	cb 01       	movw	r24, r22
    65b6:	98 ab       	std	Y+48, r25	; 0x30
    65b8:	8f a7       	std	Y+47, r24	; 0x2f
    65ba:	0f c0       	rjmp	.+30     	; 0x65da <drop+0x386>
    65bc:	80 e7       	ldi	r24, 0x70	; 112
    65be:	91 e0       	ldi	r25, 0x01	; 1
    65c0:	9e a7       	std	Y+46, r25	; 0x2e
    65c2:	8d a7       	std	Y+45, r24	; 0x2d
    65c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    65c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    65c8:	01 97       	sbiw	r24, 0x01	; 1
    65ca:	f1 f7       	brne	.-4      	; 0x65c8 <drop+0x374>
    65cc:	9e a7       	std	Y+46, r25	; 0x2e
    65ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    65d2:	98 a9       	ldd	r25, Y+48	; 0x30
    65d4:	01 97       	sbiw	r24, 0x01	; 1
    65d6:	98 ab       	std	Y+48, r25	; 0x30
    65d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65da:	8f a5       	ldd	r24, Y+47	; 0x2f
    65dc:	98 a9       	ldd	r25, Y+48	; 0x30
    65de:	00 97       	sbiw	r24, 0x00	; 0
    65e0:	69 f7       	brne	.-38     	; 0x65bc <drop+0x368>
    65e2:	14 c0       	rjmp	.+40     	; 0x660c <drop+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65e4:	69 a9       	ldd	r22, Y+49	; 0x31
    65e6:	7a a9       	ldd	r23, Y+50	; 0x32
    65e8:	8b a9       	ldd	r24, Y+51	; 0x33
    65ea:	9c a9       	ldd	r25, Y+52	; 0x34
    65ec:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    65f0:	dc 01       	movw	r26, r24
    65f2:	cb 01       	movw	r24, r22
    65f4:	98 ab       	std	Y+48, r25	; 0x30
    65f6:	8f a7       	std	Y+47, r24	; 0x2f
    65f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    65fa:	98 a9       	ldd	r25, Y+48	; 0x30
    65fc:	9c a7       	std	Y+44, r25	; 0x2c
    65fe:	8b a7       	std	Y+43, r24	; 0x2b
    6600:	8b a5       	ldd	r24, Y+43	; 0x2b
    6602:	9c a5       	ldd	r25, Y+44	; 0x2c
    6604:	01 97       	sbiw	r24, 0x01	; 1
    6606:	f1 f7       	brne	.-4      	; 0x6604 <drop+0x3b0>
    6608:	9c a7       	std	Y+44, r25	; 0x2c
    660a:	8b a7       	std	Y+43, r24	; 0x2b
	{
		servo_2(i);
		_delay_ms(15);
	}
	_delay_ms(500);
	servo_2_free();
    660c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <servo_2_free>
	
	// Open the grip and drop the animal
	for (i = 0; i < 10; i++)
    6610:	fe 01       	movw	r30, r28
    6612:	eb 5a       	subi	r30, 0xAB	; 171
    6614:	ff 4f       	sbci	r31, 0xFF	; 255
    6616:	10 82       	st	Z, r1
    6618:	81 c0       	rjmp	.+258    	; 0x671c <drop+0x4c8>
	{
		servo_1(i);
    661a:	fe 01       	movw	r30, r28
    661c:	eb 5a       	subi	r30, 0xAB	; 171
    661e:	ff 4f       	sbci	r31, 0xFF	; 255
    6620:	80 81       	ld	r24, Z
    6622:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <servo_1>
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	a0 e7       	ldi	r26, 0x70	; 112
    662c:	b1 e4       	ldi	r27, 0x41	; 65
    662e:	8f a3       	std	Y+39, r24	; 0x27
    6630:	98 a7       	std	Y+40, r25	; 0x28
    6632:	a9 a7       	std	Y+41, r26	; 0x29
    6634:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6636:	6f a1       	ldd	r22, Y+39	; 0x27
    6638:	78 a5       	ldd	r23, Y+40	; 0x28
    663a:	89 a5       	ldd	r24, Y+41	; 0x29
    663c:	9a a5       	ldd	r25, Y+42	; 0x2a
    663e:	26 e6       	ldi	r18, 0x66	; 102
    6640:	36 e6       	ldi	r19, 0x66	; 102
    6642:	46 e6       	ldi	r20, 0x66	; 102
    6644:	55 e4       	ldi	r21, 0x45	; 69
    6646:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    664a:	dc 01       	movw	r26, r24
    664c:	cb 01       	movw	r24, r22
    664e:	8b a3       	std	Y+35, r24	; 0x23
    6650:	9c a3       	std	Y+36, r25	; 0x24
    6652:	ad a3       	std	Y+37, r26	; 0x25
    6654:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6656:	6b a1       	ldd	r22, Y+35	; 0x23
    6658:	7c a1       	ldd	r23, Y+36	; 0x24
    665a:	8d a1       	ldd	r24, Y+37	; 0x25
    665c:	9e a1       	ldd	r25, Y+38	; 0x26
    665e:	20 e0       	ldi	r18, 0x00	; 0
    6660:	30 e0       	ldi	r19, 0x00	; 0
    6662:	40 e8       	ldi	r20, 0x80	; 128
    6664:	5f e3       	ldi	r21, 0x3F	; 63
    6666:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    666a:	88 23       	and	r24, r24
    666c:	2c f4       	brge	.+10     	; 0x6678 <drop+0x424>
		__ticks = 1;
    666e:	81 e0       	ldi	r24, 0x01	; 1
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	9a a3       	std	Y+34, r25	; 0x22
    6674:	89 a3       	std	Y+33, r24	; 0x21
    6676:	3f c0       	rjmp	.+126    	; 0x66f6 <drop+0x4a2>
	else if (__tmp > 65535)
    6678:	6b a1       	ldd	r22, Y+35	; 0x23
    667a:	7c a1       	ldd	r23, Y+36	; 0x24
    667c:	8d a1       	ldd	r24, Y+37	; 0x25
    667e:	9e a1       	ldd	r25, Y+38	; 0x26
    6680:	20 e0       	ldi	r18, 0x00	; 0
    6682:	3f ef       	ldi	r19, 0xFF	; 255
    6684:	4f e7       	ldi	r20, 0x7F	; 127
    6686:	57 e4       	ldi	r21, 0x47	; 71
    6688:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    668c:	18 16       	cp	r1, r24
    668e:	4c f5       	brge	.+82     	; 0x66e2 <drop+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6690:	6f a1       	ldd	r22, Y+39	; 0x27
    6692:	78 a5       	ldd	r23, Y+40	; 0x28
    6694:	89 a5       	ldd	r24, Y+41	; 0x29
    6696:	9a a5       	ldd	r25, Y+42	; 0x2a
    6698:	20 e0       	ldi	r18, 0x00	; 0
    669a:	30 e0       	ldi	r19, 0x00	; 0
    669c:	40 e2       	ldi	r20, 0x20	; 32
    669e:	51 e4       	ldi	r21, 0x41	; 65
    66a0:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    66a4:	dc 01       	movw	r26, r24
    66a6:	cb 01       	movw	r24, r22
    66a8:	bc 01       	movw	r22, r24
    66aa:	cd 01       	movw	r24, r26
    66ac:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    66b0:	dc 01       	movw	r26, r24
    66b2:	cb 01       	movw	r24, r22
    66b4:	9a a3       	std	Y+34, r25	; 0x22
    66b6:	89 a3       	std	Y+33, r24	; 0x21
    66b8:	0f c0       	rjmp	.+30     	; 0x66d8 <drop+0x484>
    66ba:	80 e7       	ldi	r24, 0x70	; 112
    66bc:	91 e0       	ldi	r25, 0x01	; 1
    66be:	98 a3       	std	Y+32, r25	; 0x20
    66c0:	8f 8f       	std	Y+31, r24	; 0x1f
    66c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    66c4:	98 a1       	ldd	r25, Y+32	; 0x20
    66c6:	01 97       	sbiw	r24, 0x01	; 1
    66c8:	f1 f7       	brne	.-4      	; 0x66c6 <drop+0x472>
    66ca:	98 a3       	std	Y+32, r25	; 0x20
    66cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ce:	89 a1       	ldd	r24, Y+33	; 0x21
    66d0:	9a a1       	ldd	r25, Y+34	; 0x22
    66d2:	01 97       	sbiw	r24, 0x01	; 1
    66d4:	9a a3       	std	Y+34, r25	; 0x22
    66d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66d8:	89 a1       	ldd	r24, Y+33	; 0x21
    66da:	9a a1       	ldd	r25, Y+34	; 0x22
    66dc:	00 97       	sbiw	r24, 0x00	; 0
    66de:	69 f7       	brne	.-38     	; 0x66ba <drop+0x466>
    66e0:	14 c0       	rjmp	.+40     	; 0x670a <drop+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66e2:	6b a1       	ldd	r22, Y+35	; 0x23
    66e4:	7c a1       	ldd	r23, Y+36	; 0x24
    66e6:	8d a1       	ldd	r24, Y+37	; 0x25
    66e8:	9e a1       	ldd	r25, Y+38	; 0x26
    66ea:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    66ee:	dc 01       	movw	r26, r24
    66f0:	cb 01       	movw	r24, r22
    66f2:	9a a3       	std	Y+34, r25	; 0x22
    66f4:	89 a3       	std	Y+33, r24	; 0x21
    66f6:	89 a1       	ldd	r24, Y+33	; 0x21
    66f8:	9a a1       	ldd	r25, Y+34	; 0x22
    66fa:	9e 8f       	std	Y+30, r25	; 0x1e
    66fc:	8d 8f       	std	Y+29, r24	; 0x1d
    66fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6700:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6702:	01 97       	sbiw	r24, 0x01	; 1
    6704:	f1 f7       	brne	.-4      	; 0x6702 <drop+0x4ae>
    6706:	9e 8f       	std	Y+30, r25	; 0x1e
    6708:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms(500);
	servo_2_free();
	
	// Open the grip and drop the animal
	for (i = 0; i < 10; i++)
    670a:	de 01       	movw	r26, r28
    670c:	ab 5a       	subi	r26, 0xAB	; 171
    670e:	bf 4f       	sbci	r27, 0xFF	; 255
    6710:	fe 01       	movw	r30, r28
    6712:	eb 5a       	subi	r30, 0xAB	; 171
    6714:	ff 4f       	sbci	r31, 0xFF	; 255
    6716:	80 81       	ld	r24, Z
    6718:	8f 5f       	subi	r24, 0xFF	; 255
    671a:	8c 93       	st	X, r24
    671c:	fe 01       	movw	r30, r28
    671e:	eb 5a       	subi	r30, 0xAB	; 171
    6720:	ff 4f       	sbci	r31, 0xFF	; 255
    6722:	80 81       	ld	r24, Z
    6724:	8a 30       	cpi	r24, 0x0A	; 10
    6726:	08 f4       	brcc	.+2      	; 0x672a <drop+0x4d6>
    6728:	78 cf       	rjmp	.-272    	; 0x661a <drop+0x3c6>
    672a:	80 e0       	ldi	r24, 0x00	; 0
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	aa ef       	ldi	r26, 0xFA	; 250
    6730:	b3 e4       	ldi	r27, 0x43	; 67
    6732:	89 8f       	std	Y+25, r24	; 0x19
    6734:	9a 8f       	std	Y+26, r25	; 0x1a
    6736:	ab 8f       	std	Y+27, r26	; 0x1b
    6738:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    673a:	69 8d       	ldd	r22, Y+25	; 0x19
    673c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    673e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6740:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6742:	26 e6       	ldi	r18, 0x66	; 102
    6744:	36 e6       	ldi	r19, 0x66	; 102
    6746:	46 e6       	ldi	r20, 0x66	; 102
    6748:	55 e4       	ldi	r21, 0x45	; 69
    674a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    674e:	dc 01       	movw	r26, r24
    6750:	cb 01       	movw	r24, r22
    6752:	8d 8b       	std	Y+21, r24	; 0x15
    6754:	9e 8b       	std	Y+22, r25	; 0x16
    6756:	af 8b       	std	Y+23, r26	; 0x17
    6758:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    675a:	6d 89       	ldd	r22, Y+21	; 0x15
    675c:	7e 89       	ldd	r23, Y+22	; 0x16
    675e:	8f 89       	ldd	r24, Y+23	; 0x17
    6760:	98 8d       	ldd	r25, Y+24	; 0x18
    6762:	20 e0       	ldi	r18, 0x00	; 0
    6764:	30 e0       	ldi	r19, 0x00	; 0
    6766:	40 e8       	ldi	r20, 0x80	; 128
    6768:	5f e3       	ldi	r21, 0x3F	; 63
    676a:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    676e:	88 23       	and	r24, r24
    6770:	2c f4       	brge	.+10     	; 0x677c <drop+0x528>
		__ticks = 1;
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	9c 8b       	std	Y+20, r25	; 0x14
    6778:	8b 8b       	std	Y+19, r24	; 0x13
    677a:	3f c0       	rjmp	.+126    	; 0x67fa <drop+0x5a6>
	else if (__tmp > 65535)
    677c:	6d 89       	ldd	r22, Y+21	; 0x15
    677e:	7e 89       	ldd	r23, Y+22	; 0x16
    6780:	8f 89       	ldd	r24, Y+23	; 0x17
    6782:	98 8d       	ldd	r25, Y+24	; 0x18
    6784:	20 e0       	ldi	r18, 0x00	; 0
    6786:	3f ef       	ldi	r19, 0xFF	; 255
    6788:	4f e7       	ldi	r20, 0x7F	; 127
    678a:	57 e4       	ldi	r21, 0x47	; 71
    678c:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    6790:	18 16       	cp	r1, r24
    6792:	4c f5       	brge	.+82     	; 0x67e6 <drop+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6794:	69 8d       	ldd	r22, Y+25	; 0x19
    6796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    679a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    679c:	20 e0       	ldi	r18, 0x00	; 0
    679e:	30 e0       	ldi	r19, 0x00	; 0
    67a0:	40 e2       	ldi	r20, 0x20	; 32
    67a2:	51 e4       	ldi	r21, 0x41	; 65
    67a4:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    67a8:	dc 01       	movw	r26, r24
    67aa:	cb 01       	movw	r24, r22
    67ac:	bc 01       	movw	r22, r24
    67ae:	cd 01       	movw	r24, r26
    67b0:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    67b4:	dc 01       	movw	r26, r24
    67b6:	cb 01       	movw	r24, r22
    67b8:	9c 8b       	std	Y+20, r25	; 0x14
    67ba:	8b 8b       	std	Y+19, r24	; 0x13
    67bc:	0f c0       	rjmp	.+30     	; 0x67dc <drop+0x588>
    67be:	80 e7       	ldi	r24, 0x70	; 112
    67c0:	91 e0       	ldi	r25, 0x01	; 1
    67c2:	9a 8b       	std	Y+18, r25	; 0x12
    67c4:	89 8b       	std	Y+17, r24	; 0x11
    67c6:	89 89       	ldd	r24, Y+17	; 0x11
    67c8:	9a 89       	ldd	r25, Y+18	; 0x12
    67ca:	01 97       	sbiw	r24, 0x01	; 1
    67cc:	f1 f7       	brne	.-4      	; 0x67ca <drop+0x576>
    67ce:	9a 8b       	std	Y+18, r25	; 0x12
    67d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67d2:	8b 89       	ldd	r24, Y+19	; 0x13
    67d4:	9c 89       	ldd	r25, Y+20	; 0x14
    67d6:	01 97       	sbiw	r24, 0x01	; 1
    67d8:	9c 8b       	std	Y+20, r25	; 0x14
    67da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67dc:	8b 89       	ldd	r24, Y+19	; 0x13
    67de:	9c 89       	ldd	r25, Y+20	; 0x14
    67e0:	00 97       	sbiw	r24, 0x00	; 0
    67e2:	69 f7       	brne	.-38     	; 0x67be <drop+0x56a>
    67e4:	14 c0       	rjmp	.+40     	; 0x680e <drop+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67e6:	6d 89       	ldd	r22, Y+21	; 0x15
    67e8:	7e 89       	ldd	r23, Y+22	; 0x16
    67ea:	8f 89       	ldd	r24, Y+23	; 0x17
    67ec:	98 8d       	ldd	r25, Y+24	; 0x18
    67ee:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    67f2:	dc 01       	movw	r26, r24
    67f4:	cb 01       	movw	r24, r22
    67f6:	9c 8b       	std	Y+20, r25	; 0x14
    67f8:	8b 8b       	std	Y+19, r24	; 0x13
    67fa:	8b 89       	ldd	r24, Y+19	; 0x13
    67fc:	9c 89       	ldd	r25, Y+20	; 0x14
    67fe:	98 8b       	std	Y+16, r25	; 0x10
    6800:	8f 87       	std	Y+15, r24	; 0x0f
    6802:	8f 85       	ldd	r24, Y+15	; 0x0f
    6804:	98 89       	ldd	r25, Y+16	; 0x10
    6806:	01 97       	sbiw	r24, 0x01	; 1
    6808:	f1 f7       	brne	.-4      	; 0x6806 <drop+0x5b2>
    680a:	98 8b       	std	Y+16, r25	; 0x10
    680c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15);
	}
	_delay_ms(500);
	
	// Lift the arm back
	servo_2(5);
    680e:	85 e0       	ldi	r24, 0x05	; 5
    6810:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <servo_2>
    6814:	80 e0       	ldi	r24, 0x00	; 0
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	aa ef       	ldi	r26, 0xFA	; 250
    681a:	b3 e4       	ldi	r27, 0x43	; 67
    681c:	8b 87       	std	Y+11, r24	; 0x0b
    681e:	9c 87       	std	Y+12, r25	; 0x0c
    6820:	ad 87       	std	Y+13, r26	; 0x0d
    6822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6824:	6b 85       	ldd	r22, Y+11	; 0x0b
    6826:	7c 85       	ldd	r23, Y+12	; 0x0c
    6828:	8d 85       	ldd	r24, Y+13	; 0x0d
    682a:	9e 85       	ldd	r25, Y+14	; 0x0e
    682c:	26 e6       	ldi	r18, 0x66	; 102
    682e:	36 e6       	ldi	r19, 0x66	; 102
    6830:	46 e6       	ldi	r20, 0x66	; 102
    6832:	55 e4       	ldi	r21, 0x45	; 69
    6834:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6838:	dc 01       	movw	r26, r24
    683a:	cb 01       	movw	r24, r22
    683c:	8f 83       	std	Y+7, r24	; 0x07
    683e:	98 87       	std	Y+8, r25	; 0x08
    6840:	a9 87       	std	Y+9, r26	; 0x09
    6842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6844:	6f 81       	ldd	r22, Y+7	; 0x07
    6846:	78 85       	ldd	r23, Y+8	; 0x08
    6848:	89 85       	ldd	r24, Y+9	; 0x09
    684a:	9a 85       	ldd	r25, Y+10	; 0x0a
    684c:	20 e0       	ldi	r18, 0x00	; 0
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	40 e8       	ldi	r20, 0x80	; 128
    6852:	5f e3       	ldi	r21, 0x3F	; 63
    6854:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    6858:	88 23       	and	r24, r24
    685a:	2c f4       	brge	.+10     	; 0x6866 <drop+0x612>
		__ticks = 1;
    685c:	81 e0       	ldi	r24, 0x01	; 1
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	9e 83       	std	Y+6, r25	; 0x06
    6862:	8d 83       	std	Y+5, r24	; 0x05
    6864:	3f c0       	rjmp	.+126    	; 0x68e4 <drop+0x690>
	else if (__tmp > 65535)
    6866:	6f 81       	ldd	r22, Y+7	; 0x07
    6868:	78 85       	ldd	r23, Y+8	; 0x08
    686a:	89 85       	ldd	r24, Y+9	; 0x09
    686c:	9a 85       	ldd	r25, Y+10	; 0x0a
    686e:	20 e0       	ldi	r18, 0x00	; 0
    6870:	3f ef       	ldi	r19, 0xFF	; 255
    6872:	4f e7       	ldi	r20, 0x7F	; 127
    6874:	57 e4       	ldi	r21, 0x47	; 71
    6876:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    687a:	18 16       	cp	r1, r24
    687c:	4c f5       	brge	.+82     	; 0x68d0 <drop+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    687e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6880:	7c 85       	ldd	r23, Y+12	; 0x0c
    6882:	8d 85       	ldd	r24, Y+13	; 0x0d
    6884:	9e 85       	ldd	r25, Y+14	; 0x0e
    6886:	20 e0       	ldi	r18, 0x00	; 0
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	40 e2       	ldi	r20, 0x20	; 32
    688c:	51 e4       	ldi	r21, 0x41	; 65
    688e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6892:	dc 01       	movw	r26, r24
    6894:	cb 01       	movw	r24, r22
    6896:	bc 01       	movw	r22, r24
    6898:	cd 01       	movw	r24, r26
    689a:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    689e:	dc 01       	movw	r26, r24
    68a0:	cb 01       	movw	r24, r22
    68a2:	9e 83       	std	Y+6, r25	; 0x06
    68a4:	8d 83       	std	Y+5, r24	; 0x05
    68a6:	0f c0       	rjmp	.+30     	; 0x68c6 <drop+0x672>
    68a8:	80 e7       	ldi	r24, 0x70	; 112
    68aa:	91 e0       	ldi	r25, 0x01	; 1
    68ac:	9c 83       	std	Y+4, r25	; 0x04
    68ae:	8b 83       	std	Y+3, r24	; 0x03
    68b0:	8b 81       	ldd	r24, Y+3	; 0x03
    68b2:	9c 81       	ldd	r25, Y+4	; 0x04
    68b4:	01 97       	sbiw	r24, 0x01	; 1
    68b6:	f1 f7       	brne	.-4      	; 0x68b4 <drop+0x660>
    68b8:	9c 83       	std	Y+4, r25	; 0x04
    68ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68bc:	8d 81       	ldd	r24, Y+5	; 0x05
    68be:	9e 81       	ldd	r25, Y+6	; 0x06
    68c0:	01 97       	sbiw	r24, 0x01	; 1
    68c2:	9e 83       	std	Y+6, r25	; 0x06
    68c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68c6:	8d 81       	ldd	r24, Y+5	; 0x05
    68c8:	9e 81       	ldd	r25, Y+6	; 0x06
    68ca:	00 97       	sbiw	r24, 0x00	; 0
    68cc:	69 f7       	brne	.-38     	; 0x68a8 <drop+0x654>
    68ce:	14 c0       	rjmp	.+40     	; 0x68f8 <drop+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68d0:	6f 81       	ldd	r22, Y+7	; 0x07
    68d2:	78 85       	ldd	r23, Y+8	; 0x08
    68d4:	89 85       	ldd	r24, Y+9	; 0x09
    68d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    68d8:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    68dc:	dc 01       	movw	r26, r24
    68de:	cb 01       	movw	r24, r22
    68e0:	9e 83       	std	Y+6, r25	; 0x06
    68e2:	8d 83       	std	Y+5, r24	; 0x05
    68e4:	8d 81       	ldd	r24, Y+5	; 0x05
    68e6:	9e 81       	ldd	r25, Y+6	; 0x06
    68e8:	9a 83       	std	Y+2, r25	; 0x02
    68ea:	89 83       	std	Y+1, r24	; 0x01
    68ec:	89 81       	ldd	r24, Y+1	; 0x01
    68ee:	9a 81       	ldd	r25, Y+2	; 0x02
    68f0:	01 97       	sbiw	r24, 0x01	; 1
    68f2:	f1 f7       	brne	.-4      	; 0x68f0 <drop+0x69c>
    68f4:	9a 83       	std	Y+2, r25	; 0x02
    68f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_1_free();
    68f8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <servo_1_free>
	servo_2_free();
    68fc:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <servo_2_free>
	
	// Close the grip
	servo_1(19);
    6900:	83 e1       	ldi	r24, 0x13	; 19
    6902:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <servo_1>
	servo_1_free();
    6906:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <servo_1_free>
	servo_2_free();
    690a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <servo_2_free>
	return;
}
    690e:	cb 5a       	subi	r28, 0xAB	; 171
    6910:	df 4f       	sbci	r29, 0xFF	; 255
    6912:	0f b6       	in	r0, 0x3f	; 63
    6914:	f8 94       	cli
    6916:	de bf       	out	0x3e, r29	; 62
    6918:	0f be       	out	0x3f, r0	; 63
    691a:	cd bf       	out	0x3d, r28	; 61
    691c:	cf 91       	pop	r28
    691e:	df 91       	pop	r29
    6920:	1f 91       	pop	r17
    6922:	0f 91       	pop	r16
    6924:	08 95       	ret

00006926 <main>:

#include "task.c"

//Main Function
int main()
{
    6926:	0f 93       	push	r16
    6928:	1f 93       	push	r17
    692a:	df 93       	push	r29
    692c:	cf 93       	push	r28
    692e:	cd b7       	in	r28, 0x3d	; 61
    6930:	de b7       	in	r29, 0x3e	; 62
    6932:	c8 54       	subi	r28, 0x48	; 72
    6934:	d0 40       	sbci	r29, 0x00	; 0
    6936:	0f b6       	in	r0, 0x3f	; 63
    6938:	f8 94       	cli
    693a:	de bf       	out	0x3e, r29	; 62
    693c:	0f be       	out	0x3f, r0	; 63
    693e:	cd bf       	out	0x3d, r28	; 61
	/*
	Function Name: main
	Input: None
	Output: None
	*/
	init_devices();
    6940:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
	int len=0,h=0,c=0,n,rx,ry,*temp,x1,y1,m=0,x=0,y=0;
    6944:	1c ae       	std	Y+60, r1	; 0x3c
    6946:	1b ae       	std	Y+59, r1	; 0x3b
    6948:	1a ae       	std	Y+58, r1	; 0x3a
    694a:	19 ae       	std	Y+57, r1	; 0x39
    694c:	18 ae       	std	Y+56, r1	; 0x38
    694e:	1f aa       	std	Y+55, r1	; 0x37
    6950:	1a a6       	std	Y+42, r1	; 0x2a
    6952:	19 a6       	std	Y+41, r1	; 0x29
    6954:	18 a6       	std	Y+40, r1	; 0x28
    6956:	1f a2       	std	Y+39, r1	; 0x27
    6958:	1e a2       	std	Y+38, r1	; 0x26
    695a:	1d a2       	std	Y+37, r1	; 0x25
	char* locations, *a;
	char pos[2];
	while(1)
	{
		if((PINE & 0x80) == 0x80) // If boot switch is not pressed
    695c:	ec e2       	ldi	r30, 0x2C	; 44
    695e:	f0 e0       	ldi	r31, 0x00	; 0
    6960:	80 81       	ld	r24, Z
    6962:	88 23       	and	r24, r24
    6964:	dc f7       	brge	.-10     	; 0x695c <main+0x36>
		{  
			lcd_port_config();
    6966:	0e 94 a7 0c 	call	0x194e	; 0x194e <lcd_port_config>
			lcd_set_4bit();
    696a:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
			lcd_init();
    696e:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
			len=strlen(serial_ip);
    6972:	8e e3       	ldi	r24, 0x3E	; 62
    6974:	93 e0       	ldi	r25, 0x03	; 3
    6976:	0e 94 31 40 	call	0x8062	; 0x8062 <strlen>
    697a:	9c af       	std	Y+60, r25	; 0x3c
    697c:	8b af       	std	Y+59, r24	; 0x3b
			if(serial_ip[len-1]=='#') // To check for end of serial input
    697e:	8b ad       	ldd	r24, Y+59	; 0x3b
    6980:	9c ad       	ldd	r25, Y+60	; 0x3c
    6982:	01 97       	sbiw	r24, 0x01	; 1
    6984:	fc 01       	movw	r30, r24
    6986:	e2 5c       	subi	r30, 0xC2	; 194
    6988:	fc 4f       	sbci	r31, 0xFC	; 252
    698a:	80 81       	ld	r24, Z
    698c:	83 32       	cpi	r24, 0x23	; 35
    698e:	31 f7       	brne	.-52     	; 0x695c <main+0x36>
			{
				/* Extract animal and habitat locations and store them in "processed_ip" */
				h=0;
    6990:	1a ae       	std	Y+58, r1	; 0x3a
    6992:	19 ae       	std	Y+57, r1	; 0x39
				for(i=0;i<strlen(serial_ip);i++)
    6994:	10 92 3a 03 	sts	0x033A, r1
    6998:	10 92 39 03 	sts	0x0339, r1
    699c:	3a c0       	rjmp	.+116    	; 0x6a12 <main+0xec>
				{
					if(serial_ip[i]!='\\' && serial_ip[i]!='n' && serial_ip[i]!='#')
    699e:	80 91 39 03 	lds	r24, 0x0339
    69a2:	90 91 3a 03 	lds	r25, 0x033A
    69a6:	fc 01       	movw	r30, r24
    69a8:	e2 5c       	subi	r30, 0xC2	; 194
    69aa:	fc 4f       	sbci	r31, 0xFC	; 252
    69ac:	80 81       	ld	r24, Z
    69ae:	8c 35       	cpi	r24, 0x5C	; 92
    69b0:	39 f1       	breq	.+78     	; 0x6a00 <main+0xda>
    69b2:	80 91 39 03 	lds	r24, 0x0339
    69b6:	90 91 3a 03 	lds	r25, 0x033A
    69ba:	fc 01       	movw	r30, r24
    69bc:	e2 5c       	subi	r30, 0xC2	; 194
    69be:	fc 4f       	sbci	r31, 0xFC	; 252
    69c0:	80 81       	ld	r24, Z
    69c2:	8e 36       	cpi	r24, 0x6E	; 110
    69c4:	e9 f0       	breq	.+58     	; 0x6a00 <main+0xda>
    69c6:	80 91 39 03 	lds	r24, 0x0339
    69ca:	90 91 3a 03 	lds	r25, 0x033A
    69ce:	fc 01       	movw	r30, r24
    69d0:	e2 5c       	subi	r30, 0xC2	; 194
    69d2:	fc 4f       	sbci	r31, 0xFC	; 252
    69d4:	80 81       	ld	r24, Z
    69d6:	83 32       	cpi	r24, 0x23	; 35
    69d8:	99 f0       	breq	.+38     	; 0x6a00 <main+0xda>
						processed_ip[h++]=serial_ip[i];
    69da:	29 ad       	ldd	r18, Y+57	; 0x39
    69dc:	3a ad       	ldd	r19, Y+58	; 0x3a
    69de:	80 91 39 03 	lds	r24, 0x0339
    69e2:	90 91 3a 03 	lds	r25, 0x033A
    69e6:	fc 01       	movw	r30, r24
    69e8:	e2 5c       	subi	r30, 0xC2	; 194
    69ea:	fc 4f       	sbci	r31, 0xFC	; 252
    69ec:	80 81       	ld	r24, Z
    69ee:	f9 01       	movw	r30, r18
    69f0:	ec 55       	subi	r30, 0x5C	; 92
    69f2:	fc 4f       	sbci	r31, 0xFC	; 252
    69f4:	80 83       	st	Z, r24
    69f6:	89 ad       	ldd	r24, Y+57	; 0x39
    69f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    69fa:	01 96       	adiw	r24, 0x01	; 1
    69fc:	9a af       	std	Y+58, r25	; 0x3a
    69fe:	89 af       	std	Y+57, r24	; 0x39
			len=strlen(serial_ip);
			if(serial_ip[len-1]=='#') // To check for end of serial input
			{
				/* Extract animal and habitat locations and store them in "processed_ip" */
				h=0;
				for(i=0;i<strlen(serial_ip);i++)
    6a00:	80 91 39 03 	lds	r24, 0x0339
    6a04:	90 91 3a 03 	lds	r25, 0x033A
    6a08:	01 96       	adiw	r24, 0x01	; 1
    6a0a:	90 93 3a 03 	sts	0x033A, r25
    6a0e:	80 93 39 03 	sts	0x0339, r24
    6a12:	80 91 39 03 	lds	r24, 0x0339
    6a16:	90 91 3a 03 	lds	r25, 0x033A
    6a1a:	8c 01       	movw	r16, r24
    6a1c:	8e e3       	ldi	r24, 0x3E	; 62
    6a1e:	93 e0       	ldi	r25, 0x03	; 3
    6a20:	0e 94 31 40 	call	0x8062	; 0x8062 <strlen>
    6a24:	08 17       	cp	r16, r24
    6a26:	19 07       	cpc	r17, r25
    6a28:	08 f4       	brcc	.+2      	; 0x6a2c <main+0x106>
    6a2a:	b9 cf       	rjmp	.-142    	; 0x699e <main+0x78>
				{
					if(serial_ip[i]!='\\' && serial_ip[i]!='n' && serial_ip[i]!='#')
						processed_ip[h++]=serial_ip[i];
				}
				locations=strtok(processed_ip,", ");
    6a2c:	84 ea       	ldi	r24, 0xA4	; 164
    6a2e:	93 e0       	ldi	r25, 0x03	; 3
    6a30:	24 e0       	ldi	r18, 0x04	; 4
    6a32:	32 e0       	ldi	r19, 0x02	; 2
    6a34:	b9 01       	movw	r22, r18
    6a36:	0e 94 25 40 	call	0x804a	; 0x804a <strtok>
    6a3a:	9c a3       	std	Y+36, r25	; 0x24
    6a3c:	8b a3       	std	Y+35, r24	; 0x23
    6a3e:	37 c0       	rjmp	.+110    	; 0x6aae <main+0x188>
				while(locations!=NULL)
				{
					a=mapping[count];
    6a40:	48 e0       	ldi	r20, 0x08	; 8
    6a42:	54 e0       	ldi	r21, 0x04	; 4
    6a44:	80 91 24 03 	lds	r24, 0x0324
    6a48:	90 91 25 03 	lds	r25, 0x0325
    6a4c:	9c 01       	movw	r18, r24
    6a4e:	c9 01       	movw	r24, r18
    6a50:	88 0f       	add	r24, r24
    6a52:	99 1f       	adc	r25, r25
    6a54:	82 0f       	add	r24, r18
    6a56:	93 1f       	adc	r25, r19
    6a58:	9c 01       	movw	r18, r24
    6a5a:	22 0f       	add	r18, r18
    6a5c:	33 1f       	adc	r19, r19
    6a5e:	22 0f       	add	r18, r18
    6a60:	33 1f       	adc	r19, r19
    6a62:	82 0f       	add	r24, r18
    6a64:	93 1f       	adc	r25, r19
    6a66:	88 0f       	add	r24, r24
    6a68:	99 1f       	adc	r25, r25
    6a6a:	84 0f       	add	r24, r20
    6a6c:	95 1f       	adc	r25, r21
    6a6e:	9a a3       	std	Y+34, r25	; 0x22
    6a70:	89 a3       	std	Y+33, r24	; 0x21
					strcpy(a,locations);
    6a72:	89 a1       	ldd	r24, Y+33	; 0x21
    6a74:	9a a1       	ldd	r25, Y+34	; 0x22
    6a76:	2b a1       	ldd	r18, Y+35	; 0x23
    6a78:	3c a1       	ldd	r19, Y+36	; 0x24
    6a7a:	b9 01       	movw	r22, r18
    6a7c:	0e 94 2a 40 	call	0x8054	; 0x8054 <strcpy>
					locations=strtok(NULL,", ");
    6a80:	24 e0       	ldi	r18, 0x04	; 4
    6a82:	32 e0       	ldi	r19, 0x02	; 2
    6a84:	80 e0       	ldi	r24, 0x00	; 0
    6a86:	90 e0       	ldi	r25, 0x00	; 0
    6a88:	b9 01       	movw	r22, r18
    6a8a:	0e 94 25 40 	call	0x804a	; 0x804a <strtok>
    6a8e:	9c a3       	std	Y+36, r25	; 0x24
    6a90:	8b a3       	std	Y+35, r24	; 0x23
					a++;
    6a92:	89 a1       	ldd	r24, Y+33	; 0x21
    6a94:	9a a1       	ldd	r25, Y+34	; 0x22
    6a96:	01 96       	adiw	r24, 0x01	; 1
    6a98:	9a a3       	std	Y+34, r25	; 0x22
    6a9a:	89 a3       	std	Y+33, r24	; 0x21
					count++;
    6a9c:	80 91 24 03 	lds	r24, 0x0324
    6aa0:	90 91 25 03 	lds	r25, 0x0325
    6aa4:	01 96       	adiw	r24, 0x01	; 1
    6aa6:	90 93 25 03 	sts	0x0325, r25
    6aaa:	80 93 24 03 	sts	0x0324, r24
				{
					if(serial_ip[i]!='\\' && serial_ip[i]!='n' && serial_ip[i]!='#')
						processed_ip[h++]=serial_ip[i];
				}
				locations=strtok(processed_ip,", ");
				while(locations!=NULL)
    6aae:	8b a1       	ldd	r24, Y+35	; 0x23
    6ab0:	9c a1       	ldd	r25, Y+36	; 0x24
    6ab2:	00 97       	sbiw	r24, 0x00	; 0
    6ab4:	29 f6       	brne	.-118    	; 0x6a40 <main+0x11a>
				}

				/* Print the received data on LCD */

				// Print habitat locations
				for(int e=0;e<count/2;e++)
    6ab6:	18 a2       	std	Y+32, r1	; 0x20
    6ab8:	1f 8e       	std	Y+31, r1	; 0x1f
    6aba:	44 c0       	rjmp	.+136    	; 0x6b44 <main+0x21e>
				{
					lcd_string(mapping[e]);
    6abc:	48 e0       	ldi	r20, 0x08	; 8
    6abe:	54 e0       	ldi	r21, 0x04	; 4
    6ac0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6ac2:	38 a1       	ldd	r19, Y+32	; 0x20
    6ac4:	c9 01       	movw	r24, r18
    6ac6:	88 0f       	add	r24, r24
    6ac8:	99 1f       	adc	r25, r25
    6aca:	82 0f       	add	r24, r18
    6acc:	93 1f       	adc	r25, r19
    6ace:	9c 01       	movw	r18, r24
    6ad0:	22 0f       	add	r18, r18
    6ad2:	33 1f       	adc	r19, r19
    6ad4:	22 0f       	add	r18, r18
    6ad6:	33 1f       	adc	r19, r19
    6ad8:	82 0f       	add	r24, r18
    6ada:	93 1f       	adc	r25, r19
    6adc:	88 0f       	add	r24, r24
    6ade:	99 1f       	adc	r25, r25
    6ae0:	84 0f       	add	r24, r20
    6ae2:	95 1f       	adc	r25, r21
    6ae4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
					if(e<(count/2)-1)
    6ae8:	80 91 24 03 	lds	r24, 0x0324
    6aec:	90 91 25 03 	lds	r25, 0x0325
    6af0:	21 96       	adiw	r28, 0x01	; 1
    6af2:	9f af       	std	Y+63, r25	; 0x3f
    6af4:	8e af       	std	Y+62, r24	; 0x3e
    6af6:	21 97       	sbiw	r28, 0x01	; 1
    6af8:	21 96       	adiw	r28, 0x01	; 1
    6afa:	8e ad       	ldd	r24, Y+62	; 0x3e
    6afc:	9f ad       	ldd	r25, Y+63	; 0x3f
    6afe:	21 97       	sbiw	r28, 0x01	; 1
    6b00:	99 23       	and	r25, r25
    6b02:	4c f4       	brge	.+18     	; 0x6b16 <main+0x1f0>
    6b04:	21 96       	adiw	r28, 0x01	; 1
    6b06:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b08:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b0a:	21 97       	sbiw	r28, 0x01	; 1
    6b0c:	01 96       	adiw	r24, 0x01	; 1
    6b0e:	21 96       	adiw	r28, 0x01	; 1
    6b10:	9f af       	std	Y+63, r25	; 0x3f
    6b12:	8e af       	std	Y+62, r24	; 0x3e
    6b14:	21 97       	sbiw	r28, 0x01	; 1
    6b16:	21 96       	adiw	r28, 0x01	; 1
    6b18:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b1c:	21 97       	sbiw	r28, 0x01	; 1
    6b1e:	95 95       	asr	r25
    6b20:	87 95       	ror	r24
    6b22:	9c 01       	movw	r18, r24
    6b24:	21 50       	subi	r18, 0x01	; 1
    6b26:	30 40       	sbci	r19, 0x00	; 0
    6b28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b2a:	98 a1       	ldd	r25, Y+32	; 0x20
    6b2c:	82 17       	cp	r24, r18
    6b2e:	93 07       	cpc	r25, r19
    6b30:	24 f4       	brge	.+8      	; 0x6b3a <main+0x214>
					   lcd_string(", ");
    6b32:	84 e0       	ldi	r24, 0x04	; 4
    6b34:	92 e0       	ldi	r25, 0x02	; 2
    6b36:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
				}

				/* Print the received data on LCD */

				// Print habitat locations
				for(int e=0;e<count/2;e++)
    6b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b3c:	98 a1       	ldd	r25, Y+32	; 0x20
    6b3e:	01 96       	adiw	r24, 0x01	; 1
    6b40:	98 a3       	std	Y+32, r25	; 0x20
    6b42:	8f 8f       	std	Y+31, r24	; 0x1f
    6b44:	80 91 24 03 	lds	r24, 0x0324
    6b48:	90 91 25 03 	lds	r25, 0x0325
    6b4c:	23 96       	adiw	r28, 0x03	; 3
    6b4e:	9f af       	std	Y+63, r25	; 0x3f
    6b50:	8e af       	std	Y+62, r24	; 0x3e
    6b52:	23 97       	sbiw	r28, 0x03	; 3
    6b54:	23 96       	adiw	r28, 0x03	; 3
    6b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b5a:	23 97       	sbiw	r28, 0x03	; 3
    6b5c:	99 23       	and	r25, r25
    6b5e:	4c f4       	brge	.+18     	; 0x6b72 <main+0x24c>
    6b60:	23 96       	adiw	r28, 0x03	; 3
    6b62:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b64:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b66:	23 97       	sbiw	r28, 0x03	; 3
    6b68:	01 96       	adiw	r24, 0x01	; 1
    6b6a:	23 96       	adiw	r28, 0x03	; 3
    6b6c:	9f af       	std	Y+63, r25	; 0x3f
    6b6e:	8e af       	std	Y+62, r24	; 0x3e
    6b70:	23 97       	sbiw	r28, 0x03	; 3
    6b72:	23 96       	adiw	r28, 0x03	; 3
    6b74:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b76:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b78:	23 97       	sbiw	r28, 0x03	; 3
    6b7a:	95 95       	asr	r25
    6b7c:	87 95       	ror	r24
    6b7e:	9c 01       	movw	r18, r24
    6b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b82:	98 a1       	ldd	r25, Y+32	; 0x20
    6b84:	82 17       	cp	r24, r18
    6b86:	93 07       	cpc	r25, r19
    6b88:	0c f4       	brge	.+2      	; 0x6b8c <main+0x266>
    6b8a:	98 cf       	rjmp	.-208    	; 0x6abc <main+0x196>
				{
					lcd_string(mapping[e]);
					if(e<(count/2)-1)
					   lcd_string(", ");
			    }
				lcd_cursor(2,1);
    6b8c:	82 e0       	ldi	r24, 0x02	; 2
    6b8e:	61 e0       	ldi	r22, 0x01	; 1
    6b90:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>

				// Print animal locations
				for(int e1=count/2;e1<count;e1++)
    6b94:	80 91 24 03 	lds	r24, 0x0324
    6b98:	90 91 25 03 	lds	r25, 0x0325
    6b9c:	25 96       	adiw	r28, 0x05	; 5
    6b9e:	9f af       	std	Y+63, r25	; 0x3f
    6ba0:	8e af       	std	Y+62, r24	; 0x3e
    6ba2:	25 97       	sbiw	r28, 0x05	; 5
    6ba4:	25 96       	adiw	r28, 0x05	; 5
    6ba6:	8e ad       	ldd	r24, Y+62	; 0x3e
    6ba8:	9f ad       	ldd	r25, Y+63	; 0x3f
    6baa:	25 97       	sbiw	r28, 0x05	; 5
    6bac:	99 23       	and	r25, r25
    6bae:	4c f4       	brge	.+18     	; 0x6bc2 <main+0x29c>
    6bb0:	25 96       	adiw	r28, 0x05	; 5
    6bb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    6bb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    6bb6:	25 97       	sbiw	r28, 0x05	; 5
    6bb8:	01 96       	adiw	r24, 0x01	; 1
    6bba:	25 96       	adiw	r28, 0x05	; 5
    6bbc:	9f af       	std	Y+63, r25	; 0x3f
    6bbe:	8e af       	std	Y+62, r24	; 0x3e
    6bc0:	25 97       	sbiw	r28, 0x05	; 5
    6bc2:	25 96       	adiw	r28, 0x05	; 5
    6bc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    6bc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    6bc8:	25 97       	sbiw	r28, 0x05	; 5
    6bca:	95 95       	asr	r25
    6bcc:	87 95       	ror	r24
    6bce:	9e 8f       	std	Y+30, r25	; 0x1e
    6bd0:	8d 8f       	std	Y+29, r24	; 0x1d
    6bd2:	2b c0       	rjmp	.+86     	; 0x6c2a <main+0x304>
				{
					lcd_string(mapping[e1]);
    6bd4:	48 e0       	ldi	r20, 0x08	; 8
    6bd6:	54 e0       	ldi	r21, 0x04	; 4
    6bd8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6bda:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6bdc:	c9 01       	movw	r24, r18
    6bde:	88 0f       	add	r24, r24
    6be0:	99 1f       	adc	r25, r25
    6be2:	82 0f       	add	r24, r18
    6be4:	93 1f       	adc	r25, r19
    6be6:	9c 01       	movw	r18, r24
    6be8:	22 0f       	add	r18, r18
    6bea:	33 1f       	adc	r19, r19
    6bec:	22 0f       	add	r18, r18
    6bee:	33 1f       	adc	r19, r19
    6bf0:	82 0f       	add	r24, r18
    6bf2:	93 1f       	adc	r25, r19
    6bf4:	88 0f       	add	r24, r24
    6bf6:	99 1f       	adc	r25, r25
    6bf8:	84 0f       	add	r24, r20
    6bfa:	95 1f       	adc	r25, r21
    6bfc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
					if(e1<(count-1))
    6c00:	80 91 24 03 	lds	r24, 0x0324
    6c04:	90 91 25 03 	lds	r25, 0x0325
    6c08:	9c 01       	movw	r18, r24
    6c0a:	21 50       	subi	r18, 0x01	; 1
    6c0c:	30 40       	sbci	r19, 0x00	; 0
    6c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6c10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6c12:	82 17       	cp	r24, r18
    6c14:	93 07       	cpc	r25, r19
    6c16:	24 f4       	brge	.+8      	; 0x6c20 <main+0x2fa>
					   lcd_string(", ");
    6c18:	84 e0       	ldi	r24, 0x04	; 4
    6c1a:	92 e0       	ldi	r25, 0x02	; 2
    6c1c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
					   lcd_string(", ");
			    }
				lcd_cursor(2,1);

				// Print animal locations
				for(int e1=count/2;e1<count;e1++)
    6c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6c24:	01 96       	adiw	r24, 0x01	; 1
    6c26:	9e 8f       	std	Y+30, r25	; 0x1e
    6c28:	8d 8f       	std	Y+29, r24	; 0x1d
    6c2a:	20 91 24 03 	lds	r18, 0x0324
    6c2e:	30 91 25 03 	lds	r19, 0x0325
    6c32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6c34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6c36:	82 17       	cp	r24, r18
    6c38:	93 07       	cpc	r25, r19
    6c3a:	64 f2       	brlt	.-104    	; 0x6bd4 <main+0x2ae>
		}
	}   
	while(1)
	{	
		
		if((PINE & 0x80) != 0x80) // If boot switch is pressed
    6c3c:	ec e2       	ldi	r30, 0x2C	; 44
    6c3e:	f0 e0       	ldi	r31, 0x00	; 0
    6c40:	80 81       	ld	r24, Z
    6c42:	88 23       	and	r24, r24
    6c44:	dc f3       	brlt	.-10     	; 0x6c3c <main+0x316>
		{	    init_devices();
    6c46:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
			    c=0;
    6c4a:	18 ae       	std	Y+56, r1	; 0x38
    6c4c:	1f aa       	std	Y+55, r1	; 0x37
				m=count/2;
    6c4e:	80 91 24 03 	lds	r24, 0x0324
    6c52:	90 91 25 03 	lds	r25, 0x0325
    6c56:	27 96       	adiw	r28, 0x07	; 7
    6c58:	9f af       	std	Y+63, r25	; 0x3f
    6c5a:	8e af       	std	Y+62, r24	; 0x3e
    6c5c:	27 97       	sbiw	r28, 0x07	; 7
    6c5e:	27 96       	adiw	r28, 0x07	; 7
    6c60:	8e ad       	ldd	r24, Y+62	; 0x3e
    6c62:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c64:	27 97       	sbiw	r28, 0x07	; 7
    6c66:	99 23       	and	r25, r25
    6c68:	4c f4       	brge	.+18     	; 0x6c7c <main+0x356>
    6c6a:	27 96       	adiw	r28, 0x07	; 7
    6c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    6c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c70:	27 97       	sbiw	r28, 0x07	; 7
    6c72:	01 96       	adiw	r24, 0x01	; 1
    6c74:	27 96       	adiw	r28, 0x07	; 7
    6c76:	9f af       	std	Y+63, r25	; 0x3f
    6c78:	8e af       	std	Y+62, r24	; 0x3e
    6c7a:	27 97       	sbiw	r28, 0x07	; 7
    6c7c:	27 96       	adiw	r28, 0x07	; 7
    6c7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6c80:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c82:	27 97       	sbiw	r28, 0x07	; 7
    6c84:	95 95       	asr	r25
    6c86:	87 95       	ror	r24
    6c88:	9a a7       	std	Y+42, r25	; 0x2a
    6c8a:	89 a7       	std	Y+41, r24	; 0x29
				while(1)
				{   
					Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    6c8c:	83 e0       	ldi	r24, 0x03	; 3
    6c8e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    6c92:	80 93 17 03 	sts	0x0317, r24
					Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    6c96:	82 e0       	ldi	r24, 0x02	; 2
    6c98:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    6c9c:	80 93 18 03 	sts	0x0318, r24
					Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    6ca0:	81 e0       	ldi	r24, 0x01	; 1
    6ca2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <ADC_Conversion>
    6ca6:	80 93 19 03 	sts	0x0319, r24

					if(Center_white_line>0x70 || Left_white_line>0x70 || Right_white_line>0x70 )
    6caa:	80 91 18 03 	lds	r24, 0x0318
    6cae:	81 37       	cpi	r24, 0x71	; 113
    6cb0:	48 f4       	brcc	.+18     	; 0x6cc4 <main+0x39e>
    6cb2:	80 91 17 03 	lds	r24, 0x0317
    6cb6:	81 37       	cpi	r24, 0x71	; 113
    6cb8:	28 f4       	brcc	.+10     	; 0x6cc4 <main+0x39e>
    6cba:	80 91 19 03 	lds	r24, 0x0319
    6cbe:	81 37       	cpi	r24, 0x71	; 113
    6cc0:	08 f4       	brcc	.+2      	; 0x6cc4 <main+0x39e>
    6cc2:	81 c0       	rjmp	.+258    	; 0x6dc6 <main+0x4a0>
					{
						forward();
    6cc4:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
						velocity(0,0);
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	60 e0       	ldi	r22, 0x00	; 0
    6ccc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <velocity>
					{
						forward();
						velocity(150,150);
					}
				}
				init_devices();
    6cd0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
                forward_mm(5);
    6cd4:	85 e0       	ldi	r24, 0x05	; 5
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <forward_mm>
				stop();
    6cdc:	0e 94 9d 0c 	call	0x193a	; 0x193a <stop>
    6ce0:	80 e0       	ldi	r24, 0x00	; 0
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	a8 e4       	ldi	r26, 0x48	; 72
    6ce6:	b2 e4       	ldi	r27, 0x42	; 66
    6ce8:	89 8f       	std	Y+25, r24	; 0x19
    6cea:	9a 8f       	std	Y+26, r25	; 0x1a
    6cec:	ab 8f       	std	Y+27, r26	; 0x1b
    6cee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    6cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cf8:	26 e6       	ldi	r18, 0x66	; 102
    6cfa:	36 e6       	ldi	r19, 0x66	; 102
    6cfc:	46 e6       	ldi	r20, 0x66	; 102
    6cfe:	55 e4       	ldi	r21, 0x45	; 69
    6d00:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6d04:	dc 01       	movw	r26, r24
    6d06:	cb 01       	movw	r24, r22
    6d08:	8d 8b       	std	Y+21, r24	; 0x15
    6d0a:	9e 8b       	std	Y+22, r25	; 0x16
    6d0c:	af 8b       	std	Y+23, r26	; 0x17
    6d0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6d10:	6d 89       	ldd	r22, Y+21	; 0x15
    6d12:	7e 89       	ldd	r23, Y+22	; 0x16
    6d14:	8f 89       	ldd	r24, Y+23	; 0x17
    6d16:	98 8d       	ldd	r25, Y+24	; 0x18
    6d18:	20 e0       	ldi	r18, 0x00	; 0
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	40 e8       	ldi	r20, 0x80	; 128
    6d1e:	5f e3       	ldi	r21, 0x3F	; 63
    6d20:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    6d24:	88 23       	and	r24, r24
    6d26:	2c f4       	brge	.+10     	; 0x6d32 <main+0x40c>
		__ticks = 1;
    6d28:	81 e0       	ldi	r24, 0x01	; 1
    6d2a:	90 e0       	ldi	r25, 0x00	; 0
    6d2c:	9c 8b       	std	Y+20, r25	; 0x14
    6d2e:	8b 8b       	std	Y+19, r24	; 0x13
    6d30:	3f c0       	rjmp	.+126    	; 0x6db0 <main+0x48a>
	else if (__tmp > 65535)
    6d32:	6d 89       	ldd	r22, Y+21	; 0x15
    6d34:	7e 89       	ldd	r23, Y+22	; 0x16
    6d36:	8f 89       	ldd	r24, Y+23	; 0x17
    6d38:	98 8d       	ldd	r25, Y+24	; 0x18
    6d3a:	20 e0       	ldi	r18, 0x00	; 0
    6d3c:	3f ef       	ldi	r19, 0xFF	; 255
    6d3e:	4f e7       	ldi	r20, 0x7F	; 127
    6d40:	57 e4       	ldi	r21, 0x47	; 71
    6d42:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    6d46:	18 16       	cp	r1, r24
    6d48:	4c f5       	brge	.+82     	; 0x6d9c <main+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    6d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	40 e2       	ldi	r20, 0x20	; 32
    6d58:	51 e4       	ldi	r21, 0x41	; 65
    6d5a:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6d5e:	dc 01       	movw	r26, r24
    6d60:	cb 01       	movw	r24, r22
    6d62:	bc 01       	movw	r22, r24
    6d64:	cd 01       	movw	r24, r26
    6d66:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    6d6a:	dc 01       	movw	r26, r24
    6d6c:	cb 01       	movw	r24, r22
    6d6e:	9c 8b       	std	Y+20, r25	; 0x14
    6d70:	8b 8b       	std	Y+19, r24	; 0x13
    6d72:	0f c0       	rjmp	.+30     	; 0x6d92 <main+0x46c>
    6d74:	80 e7       	ldi	r24, 0x70	; 112
    6d76:	91 e0       	ldi	r25, 0x01	; 1
    6d78:	9a 8b       	std	Y+18, r25	; 0x12
    6d7a:	89 8b       	std	Y+17, r24	; 0x11
    6d7c:	89 89       	ldd	r24, Y+17	; 0x11
    6d7e:	9a 89       	ldd	r25, Y+18	; 0x12
    6d80:	01 97       	sbiw	r24, 0x01	; 1
    6d82:	f1 f7       	brne	.-4      	; 0x6d80 <main+0x45a>
    6d84:	9a 8b       	std	Y+18, r25	; 0x12
    6d86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d88:	8b 89       	ldd	r24, Y+19	; 0x13
    6d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    6d8c:	01 97       	sbiw	r24, 0x01	; 1
    6d8e:	9c 8b       	std	Y+20, r25	; 0x14
    6d90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d92:	8b 89       	ldd	r24, Y+19	; 0x13
    6d94:	9c 89       	ldd	r25, Y+20	; 0x14
    6d96:	00 97       	sbiw	r24, 0x00	; 0
    6d98:	69 f7       	brne	.-38     	; 0x6d74 <main+0x44e>
    6d9a:	c0 c0       	rjmp	.+384    	; 0x6f1c <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    6d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    6da0:	8f 89       	ldd	r24, Y+23	; 0x17
    6da2:	98 8d       	ldd	r25, Y+24	; 0x18
    6da4:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    6da8:	dc 01       	movw	r26, r24
    6daa:	cb 01       	movw	r24, r22
    6dac:	9c 8b       	std	Y+20, r25	; 0x14
    6dae:	8b 8b       	std	Y+19, r24	; 0x13
    6db0:	8b 89       	ldd	r24, Y+19	; 0x13
    6db2:	9c 89       	ldd	r25, Y+20	; 0x14
    6db4:	98 8b       	std	Y+16, r25	; 0x10
    6db6:	8f 87       	std	Y+15, r24	; 0x0f
    6db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dba:	98 89       	ldd	r25, Y+16	; 0x10
    6dbc:	01 97       	sbiw	r24, 0x01	; 1
    6dbe:	f1 f7       	brne	.-4      	; 0x6dbc <main+0x496>
    6dc0:	98 8b       	std	Y+16, r25	; 0x10
    6dc2:	8f 87       	std	Y+15, r24	; 0x0f
    6dc4:	ab c0       	rjmp	.+342    	; 0x6f1c <main+0x5f6>
						velocity(0,0);
						break;
					}
					else
					{
						forward();
    6dc6:	0e 94 4d 0c 	call	0x189a	; 0x189a <forward>
						velocity(150,150);
    6dca:	86 e9       	ldi	r24, 0x96	; 150
    6dcc:	66 e9       	ldi	r22, 0x96	; 150
    6dce:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <velocity>
    6dd2:	5c cf       	rjmp	.-328    	; 0x6c8c <main+0x366>
				stop();
				_delay_ms(50);
				while(c<count/2)
				{
					/* Extract individual animal and habitat locations & call functions for each pair to move them to their respective locations */
					n=atoi(mapping[c]);
    6dd4:	48 e0       	ldi	r20, 0x08	; 8
    6dd6:	54 e0       	ldi	r21, 0x04	; 4
    6dd8:	2f a9       	ldd	r18, Y+55	; 0x37
    6dda:	38 ad       	ldd	r19, Y+56	; 0x38
    6ddc:	c9 01       	movw	r24, r18
    6dde:	88 0f       	add	r24, r24
    6de0:	99 1f       	adc	r25, r25
    6de2:	82 0f       	add	r24, r18
    6de4:	93 1f       	adc	r25, r19
    6de6:	9c 01       	movw	r18, r24
    6de8:	22 0f       	add	r18, r18
    6dea:	33 1f       	adc	r19, r19
    6dec:	22 0f       	add	r18, r18
    6dee:	33 1f       	adc	r19, r19
    6df0:	82 0f       	add	r24, r18
    6df2:	93 1f       	adc	r25, r19
    6df4:	88 0f       	add	r24, r24
    6df6:	99 1f       	adc	r25, r25
    6df8:	84 0f       	add	r24, r20
    6dfa:	95 1f       	adc	r25, r21
    6dfc:	0e 94 07 40 	call	0x800e	; 0x800e <atoi>
    6e00:	9e ab       	std	Y+54, r25	; 0x36
    6e02:	8d ab       	std	Y+53, r24	; 0x35
					init_devices();
    6e04:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>
					strcpy(pos, mapping[m++]);
    6e08:	48 e0       	ldi	r20, 0x08	; 8
    6e0a:	54 e0       	ldi	r21, 0x04	; 4
    6e0c:	29 a5       	ldd	r18, Y+41	; 0x29
    6e0e:	3a a5       	ldd	r19, Y+42	; 0x2a
    6e10:	c9 01       	movw	r24, r18
    6e12:	88 0f       	add	r24, r24
    6e14:	99 1f       	adc	r25, r25
    6e16:	82 0f       	add	r24, r18
    6e18:	93 1f       	adc	r25, r19
    6e1a:	9c 01       	movw	r18, r24
    6e1c:	22 0f       	add	r18, r18
    6e1e:	33 1f       	adc	r19, r19
    6e20:	22 0f       	add	r18, r18
    6e22:	33 1f       	adc	r19, r19
    6e24:	82 0f       	add	r24, r18
    6e26:	93 1f       	adc	r25, r19
    6e28:	88 0f       	add	r24, r24
    6e2a:	99 1f       	adc	r25, r25
    6e2c:	9a 01       	movw	r18, r20
    6e2e:	28 0f       	add	r18, r24
    6e30:	39 1f       	adc	r19, r25
    6e32:	89 a5       	ldd	r24, Y+41	; 0x29
    6e34:	9a a5       	ldd	r25, Y+42	; 0x2a
    6e36:	01 96       	adiw	r24, 0x01	; 1
    6e38:	9a a7       	std	Y+42, r25	; 0x2a
    6e3a:	89 a7       	std	Y+41, r24	; 0x29
    6e3c:	ce 01       	movw	r24, r28
    6e3e:	cd 96       	adiw	r24, 0x3d	; 61
    6e40:	b9 01       	movw	r22, r18
    6e42:	0e 94 2a 40 	call	0x8054	; 0x8054 <strcpy>
					x=pos[0]-65;
    6e46:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e48:	88 2f       	mov	r24, r24
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	81 54       	subi	r24, 0x41	; 65
    6e4e:	90 40       	sbci	r25, 0x00	; 0
    6e50:	98 a7       	std	Y+40, r25	; 0x28
    6e52:	8f a3       	std	Y+39, r24	; 0x27
					y=pos[1]-'1';
    6e54:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e56:	88 2f       	mov	r24, r24
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	c1 97       	sbiw	r24, 0x31	; 49
    6e5c:	9e a3       	std	Y+38, r25	; 0x26
    6e5e:	8d a3       	std	Y+37, r24	; 0x25
					temp=nodes(n-1,x,y);
    6e60:	8d a9       	ldd	r24, Y+53	; 0x35
    6e62:	9e a9       	ldd	r25, Y+54	; 0x36
    6e64:	01 97       	sbiw	r24, 0x01	; 1
    6e66:	2f a1       	ldd	r18, Y+39	; 0x27
    6e68:	38 a5       	ldd	r19, Y+40	; 0x28
    6e6a:	4d a1       	ldd	r20, Y+37	; 0x25
    6e6c:	5e a1       	ldd	r21, Y+38	; 0x26
    6e6e:	b9 01       	movw	r22, r18
    6e70:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <nodes>
    6e74:	98 ab       	std	Y+48, r25	; 0x30
    6e76:	8f a7       	std	Y+47, r24	; 0x2f
					rx=temp[0];
    6e78:	ef a5       	ldd	r30, Y+47	; 0x2f
    6e7a:	f8 a9       	ldd	r31, Y+48	; 0x30
    6e7c:	80 81       	ld	r24, Z
    6e7e:	91 81       	ldd	r25, Z+1	; 0x01
    6e80:	9c ab       	std	Y+52, r25	; 0x34
    6e82:	8b ab       	std	Y+51, r24	; 0x33
					ry=temp[1];
    6e84:	8f a5       	ldd	r24, Y+47	; 0x2f
    6e86:	98 a9       	ldd	r25, Y+48	; 0x30
    6e88:	fc 01       	movw	r30, r24
    6e8a:	32 96       	adiw	r30, 0x02	; 2
    6e8c:	80 81       	ld	r24, Z
    6e8e:	91 81       	ldd	r25, Z+1	; 0x01
    6e90:	9a ab       	std	Y+50, r25	; 0x32
    6e92:	89 ab       	std	Y+49, r24	; 0x31
					if(c==0) // Move from start node to first animal
    6e94:	8f a9       	ldd	r24, Y+55	; 0x37
    6e96:	98 ad       	ldd	r25, Y+56	; 0x38
    6e98:	00 97       	sbiw	r24, 0x00	; 0
    6e9a:	69 f4       	brne	.+26     	; 0x6eb6 <main+0x590>
						path(0,0,x,y);
    6e9c:	2f a1       	ldd	r18, Y+39	; 0x27
    6e9e:	38 a5       	ldd	r19, Y+40	; 0x28
    6ea0:	ed a1       	ldd	r30, Y+37	; 0x25
    6ea2:	fe a1       	ldd	r31, Y+38	; 0x26
    6ea4:	80 e0       	ldi	r24, 0x00	; 0
    6ea6:	90 e0       	ldi	r25, 0x00	; 0
    6ea8:	60 e0       	ldi	r22, 0x00	; 0
    6eaa:	70 e0       	ldi	r23, 0x00	; 0
    6eac:	a9 01       	movw	r20, r18
    6eae:	9f 01       	movw	r18, r30
    6eb0:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <path>
    6eb4:	0c c0       	rjmp	.+24     	; 0x6ece <main+0x5a8>
					else // Move from a given habitat to the next animal
						path(x1,y1,x,y);
    6eb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    6eb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    6eba:	2b a5       	ldd	r18, Y+43	; 0x2b
    6ebc:	3c a5       	ldd	r19, Y+44	; 0x2c
    6ebe:	4f a1       	ldd	r20, Y+39	; 0x27
    6ec0:	58 a5       	ldd	r21, Y+40	; 0x28
    6ec2:	ed a1       	ldd	r30, Y+37	; 0x25
    6ec4:	fe a1       	ldd	r31, Y+38	; 0x26
    6ec6:	b9 01       	movw	r22, r18
    6ec8:	9f 01       	movw	r18, r30
    6eca:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <path>

					anipick(pos); // Pick the animal
    6ece:	ce 01       	movw	r24, r28
    6ed0:	cd 96       	adiw	r24, 0x3d	; 61
    6ed2:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <anipick>
					path(x,y,rx,ry); // Move to its habitat
    6ed6:	8f a1       	ldd	r24, Y+39	; 0x27
    6ed8:	98 a5       	ldd	r25, Y+40	; 0x28
    6eda:	2d a1       	ldd	r18, Y+37	; 0x25
    6edc:	3e a1       	ldd	r19, Y+38	; 0x26
    6ede:	4b a9       	ldd	r20, Y+51	; 0x33
    6ee0:	5c a9       	ldd	r21, Y+52	; 0x34
    6ee2:	e9 a9       	ldd	r30, Y+49	; 0x31
    6ee4:	fa a9       	ldd	r31, Y+50	; 0x32
    6ee6:	b9 01       	movw	r22, r18
    6ee8:	9f 01       	movw	r18, r30
    6eea:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <path>
					habidrop(n-1,rx,ry); // Drop the animal
    6eee:	8d a9       	ldd	r24, Y+53	; 0x35
    6ef0:	9e a9       	ldd	r25, Y+54	; 0x36
    6ef2:	01 97       	sbiw	r24, 0x01	; 1
    6ef4:	2b a9       	ldd	r18, Y+51	; 0x33
    6ef6:	3c a9       	ldd	r19, Y+52	; 0x34
    6ef8:	49 a9       	ldd	r20, Y+49	; 0x31
    6efa:	5a a9       	ldd	r21, Y+50	; 0x32
    6efc:	b9 01       	movw	r22, r18
    6efe:	0e 94 a9 18 	call	0x3152	; 0x3152 <habidrop>

					// Update the current position of the robot
					x1=rx;
    6f02:	8b a9       	ldd	r24, Y+51	; 0x33
    6f04:	9c a9       	ldd	r25, Y+52	; 0x34
    6f06:	9e a7       	std	Y+46, r25	; 0x2e
    6f08:	8d a7       	std	Y+45, r24	; 0x2d
					y1=ry;
    6f0a:	89 a9       	ldd	r24, Y+49	; 0x31
    6f0c:	9a a9       	ldd	r25, Y+50	; 0x32
    6f0e:	9c a7       	std	Y+44, r25	; 0x2c
    6f10:	8b a7       	std	Y+43, r24	; 0x2b
					c++;
    6f12:	8f a9       	ldd	r24, Y+55	; 0x37
    6f14:	98 ad       	ldd	r25, Y+56	; 0x38
    6f16:	01 96       	adiw	r24, 0x01	; 1
    6f18:	98 af       	std	Y+56, r25	; 0x38
    6f1a:	8f ab       	std	Y+55, r24	; 0x37
				}
				init_devices();
                forward_mm(5);
				stop();
				_delay_ms(50);
				while(c<count/2)
    6f1c:	80 91 24 03 	lds	r24, 0x0324
    6f20:	90 91 25 03 	lds	r25, 0x0325
    6f24:	29 96       	adiw	r28, 0x09	; 9
    6f26:	9f af       	std	Y+63, r25	; 0x3f
    6f28:	8e af       	std	Y+62, r24	; 0x3e
    6f2a:	29 97       	sbiw	r28, 0x09	; 9
    6f2c:	29 96       	adiw	r28, 0x09	; 9
    6f2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6f30:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f32:	29 97       	sbiw	r28, 0x09	; 9
    6f34:	99 23       	and	r25, r25
    6f36:	4c f4       	brge	.+18     	; 0x6f4a <main+0x624>
    6f38:	29 96       	adiw	r28, 0x09	; 9
    6f3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    6f3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f3e:	29 97       	sbiw	r28, 0x09	; 9
    6f40:	01 96       	adiw	r24, 0x01	; 1
    6f42:	29 96       	adiw	r28, 0x09	; 9
    6f44:	9f af       	std	Y+63, r25	; 0x3f
    6f46:	8e af       	std	Y+62, r24	; 0x3e
    6f48:	29 97       	sbiw	r28, 0x09	; 9
    6f4a:	29 96       	adiw	r28, 0x09	; 9
    6f4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    6f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f50:	29 97       	sbiw	r28, 0x09	; 9
    6f52:	95 95       	asr	r25
    6f54:	87 95       	ror	r24
    6f56:	9c 01       	movw	r18, r24
    6f58:	8f a9       	ldd	r24, Y+55	; 0x37
    6f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    6f5c:	82 17       	cp	r24, r18
    6f5e:	93 07       	cpc	r25, r19
    6f60:	0c f4       	brge	.+2      	; 0x6f64 <main+0x63e>
    6f62:	38 cf       	rjmp	.-400    	; 0x6dd4 <main+0x4ae>
					y1=ry;
					c++;
				}

			   // Sound buzzer to indicate completion of task
			   buzzer_on();
    6f64:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <buzzer_on>
    6f68:	80 e0       	ldi	r24, 0x00	; 0
    6f6a:	90 e4       	ldi	r25, 0x40	; 64
    6f6c:	ac e9       	ldi	r26, 0x9C	; 156
    6f6e:	b5 e4       	ldi	r27, 0x45	; 69
    6f70:	8b 87       	std	Y+11, r24	; 0x0b
    6f72:	9c 87       	std	Y+12, r25	; 0x0c
    6f74:	ad 87       	std	Y+13, r26	; 0x0d
    6f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f80:	26 e6       	ldi	r18, 0x66	; 102
    6f82:	36 e6       	ldi	r19, 0x66	; 102
    6f84:	46 e6       	ldi	r20, 0x66	; 102
    6f86:	55 e4       	ldi	r21, 0x45	; 69
    6f88:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	cb 01       	movw	r24, r22
    6f90:	8f 83       	std	Y+7, r24	; 0x07
    6f92:	98 87       	std	Y+8, r25	; 0x08
    6f94:	a9 87       	std	Y+9, r26	; 0x09
    6f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f98:	6f 81       	ldd	r22, Y+7	; 0x07
    6f9a:	78 85       	ldd	r23, Y+8	; 0x08
    6f9c:	89 85       	ldd	r24, Y+9	; 0x09
    6f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fa0:	20 e0       	ldi	r18, 0x00	; 0
    6fa2:	30 e0       	ldi	r19, 0x00	; 0
    6fa4:	40 e8       	ldi	r20, 0x80	; 128
    6fa6:	5f e3       	ldi	r21, 0x3F	; 63
    6fa8:	0e 94 10 3c 	call	0x7820	; 0x7820 <__ltsf2>
    6fac:	88 23       	and	r24, r24
    6fae:	2c f4       	brge	.+10     	; 0x6fba <main+0x694>
		__ticks = 1;
    6fb0:	81 e0       	ldi	r24, 0x01	; 1
    6fb2:	90 e0       	ldi	r25, 0x00	; 0
    6fb4:	9e 83       	std	Y+6, r25	; 0x06
    6fb6:	8d 83       	std	Y+5, r24	; 0x05
    6fb8:	3f c0       	rjmp	.+126    	; 0x7038 <main+0x712>
	else if (__tmp > 65535)
    6fba:	6f 81       	ldd	r22, Y+7	; 0x07
    6fbc:	78 85       	ldd	r23, Y+8	; 0x08
    6fbe:	89 85       	ldd	r24, Y+9	; 0x09
    6fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fc2:	20 e0       	ldi	r18, 0x00	; 0
    6fc4:	3f ef       	ldi	r19, 0xFF	; 255
    6fc6:	4f e7       	ldi	r20, 0x7F	; 127
    6fc8:	57 e4       	ldi	r21, 0x47	; 71
    6fca:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__gtsf2>
    6fce:	18 16       	cp	r1, r24
    6fd0:	4c f5       	brge	.+82     	; 0x7024 <main+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fda:	20 e0       	ldi	r18, 0x00	; 0
    6fdc:	30 e0       	ldi	r19, 0x00	; 0
    6fde:	40 e2       	ldi	r20, 0x20	; 32
    6fe0:	51 e4       	ldi	r21, 0x41	; 65
    6fe2:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__mulsf3>
    6fe6:	dc 01       	movw	r26, r24
    6fe8:	cb 01       	movw	r24, r22
    6fea:	bc 01       	movw	r22, r24
    6fec:	cd 01       	movw	r24, r26
    6fee:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    6ff2:	dc 01       	movw	r26, r24
    6ff4:	cb 01       	movw	r24, r22
    6ff6:	9e 83       	std	Y+6, r25	; 0x06
    6ff8:	8d 83       	std	Y+5, r24	; 0x05
    6ffa:	0f c0       	rjmp	.+30     	; 0x701a <main+0x6f4>
    6ffc:	80 e7       	ldi	r24, 0x70	; 112
    6ffe:	91 e0       	ldi	r25, 0x01	; 1
    7000:	9c 83       	std	Y+4, r25	; 0x04
    7002:	8b 83       	std	Y+3, r24	; 0x03
    7004:	8b 81       	ldd	r24, Y+3	; 0x03
    7006:	9c 81       	ldd	r25, Y+4	; 0x04
    7008:	01 97       	sbiw	r24, 0x01	; 1
    700a:	f1 f7       	brne	.-4      	; 0x7008 <main+0x6e2>
    700c:	9c 83       	std	Y+4, r25	; 0x04
    700e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7010:	8d 81       	ldd	r24, Y+5	; 0x05
    7012:	9e 81       	ldd	r25, Y+6	; 0x06
    7014:	01 97       	sbiw	r24, 0x01	; 1
    7016:	9e 83       	std	Y+6, r25	; 0x06
    7018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    701a:	8d 81       	ldd	r24, Y+5	; 0x05
    701c:	9e 81       	ldd	r25, Y+6	; 0x06
    701e:	00 97       	sbiw	r24, 0x00	; 0
    7020:	69 f7       	brne	.-38     	; 0x6ffc <main+0x6d6>
    7022:	14 c0       	rjmp	.+40     	; 0x704c <main+0x726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7024:	6f 81       	ldd	r22, Y+7	; 0x07
    7026:	78 85       	ldd	r23, Y+8	; 0x08
    7028:	89 85       	ldd	r24, Y+9	; 0x09
    702a:	9a 85       	ldd	r25, Y+10	; 0x0a
    702c:	0e 94 34 38 	call	0x7068	; 0x7068 <__fixunssfsi>
    7030:	dc 01       	movw	r26, r24
    7032:	cb 01       	movw	r24, r22
    7034:	9e 83       	std	Y+6, r25	; 0x06
    7036:	8d 83       	std	Y+5, r24	; 0x05
    7038:	8d 81       	ldd	r24, Y+5	; 0x05
    703a:	9e 81       	ldd	r25, Y+6	; 0x06
    703c:	9a 83       	std	Y+2, r25	; 0x02
    703e:	89 83       	std	Y+1, r24	; 0x01
    7040:	89 81       	ldd	r24, Y+1	; 0x01
    7042:	9a 81       	ldd	r25, Y+2	; 0x02
    7044:	01 97       	sbiw	r24, 0x01	; 1
    7046:	f1 f7       	brne	.-4      	; 0x7044 <main+0x71e>
    7048:	9a 83       	std	Y+2, r25	; 0x02
    704a:	89 83       	std	Y+1, r24	; 0x01
			   _delay_ms(5000);
			   buzzer_off();
    704c:	0e 94 92 0a 	call	0x1524	; 0x1524 <buzzer_off>
			   break;
		}
	}
	return;
}
    7050:	c8 5b       	subi	r28, 0xB8	; 184
    7052:	df 4f       	sbci	r29, 0xFF	; 255
    7054:	0f b6       	in	r0, 0x3f	; 63
    7056:	f8 94       	cli
    7058:	de bf       	out	0x3e, r29	; 62
    705a:	0f be       	out	0x3f, r0	; 63
    705c:	cd bf       	out	0x3d, r28	; 61
    705e:	cf 91       	pop	r28
    7060:	df 91       	pop	r29
    7062:	1f 91       	pop	r17
    7064:	0f 91       	pop	r16
    7066:	08 95       	ret

00007068 <__fixunssfsi>:
    7068:	ef 92       	push	r14
    706a:	ff 92       	push	r15
    706c:	0f 93       	push	r16
    706e:	1f 93       	push	r17
    7070:	7b 01       	movw	r14, r22
    7072:	8c 01       	movw	r16, r24
    7074:	20 e0       	ldi	r18, 0x00	; 0
    7076:	30 e0       	ldi	r19, 0x00	; 0
    7078:	40 e0       	ldi	r20, 0x00	; 0
    707a:	5f e4       	ldi	r21, 0x4F	; 79
    707c:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <__gesf2>
    7080:	88 23       	and	r24, r24
    7082:	8c f0       	brlt	.+34     	; 0x70a6 <__fixunssfsi+0x3e>
    7084:	c8 01       	movw	r24, r16
    7086:	b7 01       	movw	r22, r14
    7088:	20 e0       	ldi	r18, 0x00	; 0
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	40 e0       	ldi	r20, 0x00	; 0
    708e:	5f e4       	ldi	r21, 0x4F	; 79
    7090:	0e 94 ac 39 	call	0x7358	; 0x7358 <__subsf3>
    7094:	0e 94 40 3c 	call	0x7880	; 0x7880 <__fixsfsi>
    7098:	9b 01       	movw	r18, r22
    709a:	ac 01       	movw	r20, r24
    709c:	20 50       	subi	r18, 0x00	; 0
    709e:	30 40       	sbci	r19, 0x00	; 0
    70a0:	40 40       	sbci	r20, 0x00	; 0
    70a2:	50 48       	sbci	r21, 0x80	; 128
    70a4:	06 c0       	rjmp	.+12     	; 0x70b2 <__fixunssfsi+0x4a>
    70a6:	c8 01       	movw	r24, r16
    70a8:	b7 01       	movw	r22, r14
    70aa:	0e 94 40 3c 	call	0x7880	; 0x7880 <__fixsfsi>
    70ae:	9b 01       	movw	r18, r22
    70b0:	ac 01       	movw	r20, r24
    70b2:	b9 01       	movw	r22, r18
    70b4:	ca 01       	movw	r24, r20
    70b6:	1f 91       	pop	r17
    70b8:	0f 91       	pop	r16
    70ba:	ff 90       	pop	r15
    70bc:	ef 90       	pop	r14
    70be:	08 95       	ret

000070c0 <_fpadd_parts>:
    70c0:	a0 e0       	ldi	r26, 0x00	; 0
    70c2:	b0 e0       	ldi	r27, 0x00	; 0
    70c4:	e6 e6       	ldi	r30, 0x66	; 102
    70c6:	f8 e3       	ldi	r31, 0x38	; 56
    70c8:	0c 94 9b 40 	jmp	0x8136	; 0x8136 <__prologue_saves__>
    70cc:	dc 01       	movw	r26, r24
    70ce:	2b 01       	movw	r4, r22
    70d0:	fa 01       	movw	r30, r20
    70d2:	9c 91       	ld	r25, X
    70d4:	92 30       	cpi	r25, 0x02	; 2
    70d6:	08 f4       	brcc	.+2      	; 0x70da <_fpadd_parts+0x1a>
    70d8:	39 c1       	rjmp	.+626    	; 0x734c <_fpadd_parts+0x28c>
    70da:	eb 01       	movw	r28, r22
    70dc:	88 81       	ld	r24, Y
    70de:	82 30       	cpi	r24, 0x02	; 2
    70e0:	08 f4       	brcc	.+2      	; 0x70e4 <_fpadd_parts+0x24>
    70e2:	33 c1       	rjmp	.+614    	; 0x734a <_fpadd_parts+0x28a>
    70e4:	94 30       	cpi	r25, 0x04	; 4
    70e6:	69 f4       	brne	.+26     	; 0x7102 <_fpadd_parts+0x42>
    70e8:	84 30       	cpi	r24, 0x04	; 4
    70ea:	09 f0       	breq	.+2      	; 0x70ee <_fpadd_parts+0x2e>
    70ec:	2f c1       	rjmp	.+606    	; 0x734c <_fpadd_parts+0x28c>
    70ee:	11 96       	adiw	r26, 0x01	; 1
    70f0:	9c 91       	ld	r25, X
    70f2:	11 97       	sbiw	r26, 0x01	; 1
    70f4:	89 81       	ldd	r24, Y+1	; 0x01
    70f6:	98 17       	cp	r25, r24
    70f8:	09 f4       	brne	.+2      	; 0x70fc <_fpadd_parts+0x3c>
    70fa:	28 c1       	rjmp	.+592    	; 0x734c <_fpadd_parts+0x28c>
    70fc:	a7 e0       	ldi	r26, 0x07	; 7
    70fe:	b2 e0       	ldi	r27, 0x02	; 2
    7100:	25 c1       	rjmp	.+586    	; 0x734c <_fpadd_parts+0x28c>
    7102:	84 30       	cpi	r24, 0x04	; 4
    7104:	09 f4       	brne	.+2      	; 0x7108 <_fpadd_parts+0x48>
    7106:	21 c1       	rjmp	.+578    	; 0x734a <_fpadd_parts+0x28a>
    7108:	82 30       	cpi	r24, 0x02	; 2
    710a:	a9 f4       	brne	.+42     	; 0x7136 <_fpadd_parts+0x76>
    710c:	92 30       	cpi	r25, 0x02	; 2
    710e:	09 f0       	breq	.+2      	; 0x7112 <_fpadd_parts+0x52>
    7110:	1d c1       	rjmp	.+570    	; 0x734c <_fpadd_parts+0x28c>
    7112:	9a 01       	movw	r18, r20
    7114:	ad 01       	movw	r20, r26
    7116:	88 e0       	ldi	r24, 0x08	; 8
    7118:	ea 01       	movw	r28, r20
    711a:	09 90       	ld	r0, Y+
    711c:	ae 01       	movw	r20, r28
    711e:	e9 01       	movw	r28, r18
    7120:	09 92       	st	Y+, r0
    7122:	9e 01       	movw	r18, r28
    7124:	81 50       	subi	r24, 0x01	; 1
    7126:	c1 f7       	brne	.-16     	; 0x7118 <_fpadd_parts+0x58>
    7128:	e2 01       	movw	r28, r4
    712a:	89 81       	ldd	r24, Y+1	; 0x01
    712c:	11 96       	adiw	r26, 0x01	; 1
    712e:	9c 91       	ld	r25, X
    7130:	89 23       	and	r24, r25
    7132:	81 83       	std	Z+1, r24	; 0x01
    7134:	08 c1       	rjmp	.+528    	; 0x7346 <_fpadd_parts+0x286>
    7136:	92 30       	cpi	r25, 0x02	; 2
    7138:	09 f4       	brne	.+2      	; 0x713c <_fpadd_parts+0x7c>
    713a:	07 c1       	rjmp	.+526    	; 0x734a <_fpadd_parts+0x28a>
    713c:	12 96       	adiw	r26, 0x02	; 2
    713e:	2d 90       	ld	r2, X+
    7140:	3c 90       	ld	r3, X
    7142:	13 97       	sbiw	r26, 0x03	; 3
    7144:	eb 01       	movw	r28, r22
    7146:	8a 81       	ldd	r24, Y+2	; 0x02
    7148:	9b 81       	ldd	r25, Y+3	; 0x03
    714a:	14 96       	adiw	r26, 0x04	; 4
    714c:	ad 90       	ld	r10, X+
    714e:	bd 90       	ld	r11, X+
    7150:	cd 90       	ld	r12, X+
    7152:	dc 90       	ld	r13, X
    7154:	17 97       	sbiw	r26, 0x07	; 7
    7156:	ec 80       	ldd	r14, Y+4	; 0x04
    7158:	fd 80       	ldd	r15, Y+5	; 0x05
    715a:	0e 81       	ldd	r16, Y+6	; 0x06
    715c:	1f 81       	ldd	r17, Y+7	; 0x07
    715e:	91 01       	movw	r18, r2
    7160:	28 1b       	sub	r18, r24
    7162:	39 0b       	sbc	r19, r25
    7164:	b9 01       	movw	r22, r18
    7166:	37 ff       	sbrs	r19, 7
    7168:	04 c0       	rjmp	.+8      	; 0x7172 <_fpadd_parts+0xb2>
    716a:	66 27       	eor	r22, r22
    716c:	77 27       	eor	r23, r23
    716e:	62 1b       	sub	r22, r18
    7170:	73 0b       	sbc	r23, r19
    7172:	60 32       	cpi	r22, 0x20	; 32
    7174:	71 05       	cpc	r23, r1
    7176:	0c f0       	brlt	.+2      	; 0x717a <_fpadd_parts+0xba>
    7178:	61 c0       	rjmp	.+194    	; 0x723c <_fpadd_parts+0x17c>
    717a:	12 16       	cp	r1, r18
    717c:	13 06       	cpc	r1, r19
    717e:	6c f5       	brge	.+90     	; 0x71da <_fpadd_parts+0x11a>
    7180:	37 01       	movw	r6, r14
    7182:	48 01       	movw	r8, r16
    7184:	06 2e       	mov	r0, r22
    7186:	04 c0       	rjmp	.+8      	; 0x7190 <_fpadd_parts+0xd0>
    7188:	96 94       	lsr	r9
    718a:	87 94       	ror	r8
    718c:	77 94       	ror	r7
    718e:	67 94       	ror	r6
    7190:	0a 94       	dec	r0
    7192:	d2 f7       	brpl	.-12     	; 0x7188 <_fpadd_parts+0xc8>
    7194:	21 e0       	ldi	r18, 0x01	; 1
    7196:	30 e0       	ldi	r19, 0x00	; 0
    7198:	40 e0       	ldi	r20, 0x00	; 0
    719a:	50 e0       	ldi	r21, 0x00	; 0
    719c:	04 c0       	rjmp	.+8      	; 0x71a6 <_fpadd_parts+0xe6>
    719e:	22 0f       	add	r18, r18
    71a0:	33 1f       	adc	r19, r19
    71a2:	44 1f       	adc	r20, r20
    71a4:	55 1f       	adc	r21, r21
    71a6:	6a 95       	dec	r22
    71a8:	d2 f7       	brpl	.-12     	; 0x719e <_fpadd_parts+0xde>
    71aa:	21 50       	subi	r18, 0x01	; 1
    71ac:	30 40       	sbci	r19, 0x00	; 0
    71ae:	40 40       	sbci	r20, 0x00	; 0
    71b0:	50 40       	sbci	r21, 0x00	; 0
    71b2:	2e 21       	and	r18, r14
    71b4:	3f 21       	and	r19, r15
    71b6:	40 23       	and	r20, r16
    71b8:	51 23       	and	r21, r17
    71ba:	21 15       	cp	r18, r1
    71bc:	31 05       	cpc	r19, r1
    71be:	41 05       	cpc	r20, r1
    71c0:	51 05       	cpc	r21, r1
    71c2:	21 f0       	breq	.+8      	; 0x71cc <_fpadd_parts+0x10c>
    71c4:	21 e0       	ldi	r18, 0x01	; 1
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	40 e0       	ldi	r20, 0x00	; 0
    71ca:	50 e0       	ldi	r21, 0x00	; 0
    71cc:	79 01       	movw	r14, r18
    71ce:	8a 01       	movw	r16, r20
    71d0:	e6 28       	or	r14, r6
    71d2:	f7 28       	or	r15, r7
    71d4:	08 29       	or	r16, r8
    71d6:	19 29       	or	r17, r9
    71d8:	3c c0       	rjmp	.+120    	; 0x7252 <_fpadd_parts+0x192>
    71da:	23 2b       	or	r18, r19
    71dc:	d1 f1       	breq	.+116    	; 0x7252 <_fpadd_parts+0x192>
    71de:	26 0e       	add	r2, r22
    71e0:	37 1e       	adc	r3, r23
    71e2:	35 01       	movw	r6, r10
    71e4:	46 01       	movw	r8, r12
    71e6:	06 2e       	mov	r0, r22
    71e8:	04 c0       	rjmp	.+8      	; 0x71f2 <_fpadd_parts+0x132>
    71ea:	96 94       	lsr	r9
    71ec:	87 94       	ror	r8
    71ee:	77 94       	ror	r7
    71f0:	67 94       	ror	r6
    71f2:	0a 94       	dec	r0
    71f4:	d2 f7       	brpl	.-12     	; 0x71ea <_fpadd_parts+0x12a>
    71f6:	21 e0       	ldi	r18, 0x01	; 1
    71f8:	30 e0       	ldi	r19, 0x00	; 0
    71fa:	40 e0       	ldi	r20, 0x00	; 0
    71fc:	50 e0       	ldi	r21, 0x00	; 0
    71fe:	04 c0       	rjmp	.+8      	; 0x7208 <_fpadd_parts+0x148>
    7200:	22 0f       	add	r18, r18
    7202:	33 1f       	adc	r19, r19
    7204:	44 1f       	adc	r20, r20
    7206:	55 1f       	adc	r21, r21
    7208:	6a 95       	dec	r22
    720a:	d2 f7       	brpl	.-12     	; 0x7200 <_fpadd_parts+0x140>
    720c:	21 50       	subi	r18, 0x01	; 1
    720e:	30 40       	sbci	r19, 0x00	; 0
    7210:	40 40       	sbci	r20, 0x00	; 0
    7212:	50 40       	sbci	r21, 0x00	; 0
    7214:	2a 21       	and	r18, r10
    7216:	3b 21       	and	r19, r11
    7218:	4c 21       	and	r20, r12
    721a:	5d 21       	and	r21, r13
    721c:	21 15       	cp	r18, r1
    721e:	31 05       	cpc	r19, r1
    7220:	41 05       	cpc	r20, r1
    7222:	51 05       	cpc	r21, r1
    7224:	21 f0       	breq	.+8      	; 0x722e <_fpadd_parts+0x16e>
    7226:	21 e0       	ldi	r18, 0x01	; 1
    7228:	30 e0       	ldi	r19, 0x00	; 0
    722a:	40 e0       	ldi	r20, 0x00	; 0
    722c:	50 e0       	ldi	r21, 0x00	; 0
    722e:	59 01       	movw	r10, r18
    7230:	6a 01       	movw	r12, r20
    7232:	a6 28       	or	r10, r6
    7234:	b7 28       	or	r11, r7
    7236:	c8 28       	or	r12, r8
    7238:	d9 28       	or	r13, r9
    723a:	0b c0       	rjmp	.+22     	; 0x7252 <_fpadd_parts+0x192>
    723c:	82 15       	cp	r24, r2
    723e:	93 05       	cpc	r25, r3
    7240:	2c f0       	brlt	.+10     	; 0x724c <_fpadd_parts+0x18c>
    7242:	1c 01       	movw	r2, r24
    7244:	aa 24       	eor	r10, r10
    7246:	bb 24       	eor	r11, r11
    7248:	65 01       	movw	r12, r10
    724a:	03 c0       	rjmp	.+6      	; 0x7252 <_fpadd_parts+0x192>
    724c:	ee 24       	eor	r14, r14
    724e:	ff 24       	eor	r15, r15
    7250:	87 01       	movw	r16, r14
    7252:	11 96       	adiw	r26, 0x01	; 1
    7254:	9c 91       	ld	r25, X
    7256:	d2 01       	movw	r26, r4
    7258:	11 96       	adiw	r26, 0x01	; 1
    725a:	8c 91       	ld	r24, X
    725c:	98 17       	cp	r25, r24
    725e:	09 f4       	brne	.+2      	; 0x7262 <_fpadd_parts+0x1a2>
    7260:	45 c0       	rjmp	.+138    	; 0x72ec <_fpadd_parts+0x22c>
    7262:	99 23       	and	r25, r25
    7264:	39 f0       	breq	.+14     	; 0x7274 <_fpadd_parts+0x1b4>
    7266:	a8 01       	movw	r20, r16
    7268:	97 01       	movw	r18, r14
    726a:	2a 19       	sub	r18, r10
    726c:	3b 09       	sbc	r19, r11
    726e:	4c 09       	sbc	r20, r12
    7270:	5d 09       	sbc	r21, r13
    7272:	06 c0       	rjmp	.+12     	; 0x7280 <_fpadd_parts+0x1c0>
    7274:	a6 01       	movw	r20, r12
    7276:	95 01       	movw	r18, r10
    7278:	2e 19       	sub	r18, r14
    727a:	3f 09       	sbc	r19, r15
    727c:	40 0b       	sbc	r20, r16
    727e:	51 0b       	sbc	r21, r17
    7280:	57 fd       	sbrc	r21, 7
    7282:	08 c0       	rjmp	.+16     	; 0x7294 <_fpadd_parts+0x1d4>
    7284:	11 82       	std	Z+1, r1	; 0x01
    7286:	33 82       	std	Z+3, r3	; 0x03
    7288:	22 82       	std	Z+2, r2	; 0x02
    728a:	24 83       	std	Z+4, r18	; 0x04
    728c:	35 83       	std	Z+5, r19	; 0x05
    728e:	46 83       	std	Z+6, r20	; 0x06
    7290:	57 83       	std	Z+7, r21	; 0x07
    7292:	1d c0       	rjmp	.+58     	; 0x72ce <_fpadd_parts+0x20e>
    7294:	81 e0       	ldi	r24, 0x01	; 1
    7296:	81 83       	std	Z+1, r24	; 0x01
    7298:	33 82       	std	Z+3, r3	; 0x03
    729a:	22 82       	std	Z+2, r2	; 0x02
    729c:	88 27       	eor	r24, r24
    729e:	99 27       	eor	r25, r25
    72a0:	dc 01       	movw	r26, r24
    72a2:	82 1b       	sub	r24, r18
    72a4:	93 0b       	sbc	r25, r19
    72a6:	a4 0b       	sbc	r26, r20
    72a8:	b5 0b       	sbc	r27, r21
    72aa:	84 83       	std	Z+4, r24	; 0x04
    72ac:	95 83       	std	Z+5, r25	; 0x05
    72ae:	a6 83       	std	Z+6, r26	; 0x06
    72b0:	b7 83       	std	Z+7, r27	; 0x07
    72b2:	0d c0       	rjmp	.+26     	; 0x72ce <_fpadd_parts+0x20e>
    72b4:	22 0f       	add	r18, r18
    72b6:	33 1f       	adc	r19, r19
    72b8:	44 1f       	adc	r20, r20
    72ba:	55 1f       	adc	r21, r21
    72bc:	24 83       	std	Z+4, r18	; 0x04
    72be:	35 83       	std	Z+5, r19	; 0x05
    72c0:	46 83       	std	Z+6, r20	; 0x06
    72c2:	57 83       	std	Z+7, r21	; 0x07
    72c4:	82 81       	ldd	r24, Z+2	; 0x02
    72c6:	93 81       	ldd	r25, Z+3	; 0x03
    72c8:	01 97       	sbiw	r24, 0x01	; 1
    72ca:	93 83       	std	Z+3, r25	; 0x03
    72cc:	82 83       	std	Z+2, r24	; 0x02
    72ce:	24 81       	ldd	r18, Z+4	; 0x04
    72d0:	35 81       	ldd	r19, Z+5	; 0x05
    72d2:	46 81       	ldd	r20, Z+6	; 0x06
    72d4:	57 81       	ldd	r21, Z+7	; 0x07
    72d6:	da 01       	movw	r26, r20
    72d8:	c9 01       	movw	r24, r18
    72da:	01 97       	sbiw	r24, 0x01	; 1
    72dc:	a1 09       	sbc	r26, r1
    72de:	b1 09       	sbc	r27, r1
    72e0:	8f 5f       	subi	r24, 0xFF	; 255
    72e2:	9f 4f       	sbci	r25, 0xFF	; 255
    72e4:	af 4f       	sbci	r26, 0xFF	; 255
    72e6:	bf 43       	sbci	r27, 0x3F	; 63
    72e8:	28 f3       	brcs	.-54     	; 0x72b4 <_fpadd_parts+0x1f4>
    72ea:	0b c0       	rjmp	.+22     	; 0x7302 <_fpadd_parts+0x242>
    72ec:	91 83       	std	Z+1, r25	; 0x01
    72ee:	33 82       	std	Z+3, r3	; 0x03
    72f0:	22 82       	std	Z+2, r2	; 0x02
    72f2:	ea 0c       	add	r14, r10
    72f4:	fb 1c       	adc	r15, r11
    72f6:	0c 1d       	adc	r16, r12
    72f8:	1d 1d       	adc	r17, r13
    72fa:	e4 82       	std	Z+4, r14	; 0x04
    72fc:	f5 82       	std	Z+5, r15	; 0x05
    72fe:	06 83       	std	Z+6, r16	; 0x06
    7300:	17 83       	std	Z+7, r17	; 0x07
    7302:	83 e0       	ldi	r24, 0x03	; 3
    7304:	80 83       	st	Z, r24
    7306:	24 81       	ldd	r18, Z+4	; 0x04
    7308:	35 81       	ldd	r19, Z+5	; 0x05
    730a:	46 81       	ldd	r20, Z+6	; 0x06
    730c:	57 81       	ldd	r21, Z+7	; 0x07
    730e:	57 ff       	sbrs	r21, 7
    7310:	1a c0       	rjmp	.+52     	; 0x7346 <_fpadd_parts+0x286>
    7312:	c9 01       	movw	r24, r18
    7314:	aa 27       	eor	r26, r26
    7316:	97 fd       	sbrc	r25, 7
    7318:	a0 95       	com	r26
    731a:	ba 2f       	mov	r27, r26
    731c:	81 70       	andi	r24, 0x01	; 1
    731e:	90 70       	andi	r25, 0x00	; 0
    7320:	a0 70       	andi	r26, 0x00	; 0
    7322:	b0 70       	andi	r27, 0x00	; 0
    7324:	56 95       	lsr	r21
    7326:	47 95       	ror	r20
    7328:	37 95       	ror	r19
    732a:	27 95       	ror	r18
    732c:	82 2b       	or	r24, r18
    732e:	93 2b       	or	r25, r19
    7330:	a4 2b       	or	r26, r20
    7332:	b5 2b       	or	r27, r21
    7334:	84 83       	std	Z+4, r24	; 0x04
    7336:	95 83       	std	Z+5, r25	; 0x05
    7338:	a6 83       	std	Z+6, r26	; 0x06
    733a:	b7 83       	std	Z+7, r27	; 0x07
    733c:	82 81       	ldd	r24, Z+2	; 0x02
    733e:	93 81       	ldd	r25, Z+3	; 0x03
    7340:	01 96       	adiw	r24, 0x01	; 1
    7342:	93 83       	std	Z+3, r25	; 0x03
    7344:	82 83       	std	Z+2, r24	; 0x02
    7346:	df 01       	movw	r26, r30
    7348:	01 c0       	rjmp	.+2      	; 0x734c <_fpadd_parts+0x28c>
    734a:	d2 01       	movw	r26, r4
    734c:	cd 01       	movw	r24, r26
    734e:	cd b7       	in	r28, 0x3d	; 61
    7350:	de b7       	in	r29, 0x3e	; 62
    7352:	e2 e1       	ldi	r30, 0x12	; 18
    7354:	0c 94 b7 40 	jmp	0x816e	; 0x816e <__epilogue_restores__>

00007358 <__subsf3>:
    7358:	a0 e2       	ldi	r26, 0x20	; 32
    735a:	b0 e0       	ldi	r27, 0x00	; 0
    735c:	e2 eb       	ldi	r30, 0xB2	; 178
    735e:	f9 e3       	ldi	r31, 0x39	; 57
    7360:	0c 94 a7 40 	jmp	0x814e	; 0x814e <__prologue_saves__+0x18>
    7364:	69 83       	std	Y+1, r22	; 0x01
    7366:	7a 83       	std	Y+2, r23	; 0x02
    7368:	8b 83       	std	Y+3, r24	; 0x03
    736a:	9c 83       	std	Y+4, r25	; 0x04
    736c:	2d 83       	std	Y+5, r18	; 0x05
    736e:	3e 83       	std	Y+6, r19	; 0x06
    7370:	4f 83       	std	Y+7, r20	; 0x07
    7372:	58 87       	std	Y+8, r21	; 0x08
    7374:	e9 e0       	ldi	r30, 0x09	; 9
    7376:	ee 2e       	mov	r14, r30
    7378:	f1 2c       	mov	r15, r1
    737a:	ec 0e       	add	r14, r28
    737c:	fd 1e       	adc	r15, r29
    737e:	ce 01       	movw	r24, r28
    7380:	01 96       	adiw	r24, 0x01	; 1
    7382:	b7 01       	movw	r22, r14
    7384:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7388:	8e 01       	movw	r16, r28
    738a:	0f 5e       	subi	r16, 0xEF	; 239
    738c:	1f 4f       	sbci	r17, 0xFF	; 255
    738e:	ce 01       	movw	r24, r28
    7390:	05 96       	adiw	r24, 0x05	; 5
    7392:	b8 01       	movw	r22, r16
    7394:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7398:	8a 89       	ldd	r24, Y+18	; 0x12
    739a:	91 e0       	ldi	r25, 0x01	; 1
    739c:	89 27       	eor	r24, r25
    739e:	8a 8b       	std	Y+18, r24	; 0x12
    73a0:	c7 01       	movw	r24, r14
    73a2:	b8 01       	movw	r22, r16
    73a4:	ae 01       	movw	r20, r28
    73a6:	47 5e       	subi	r20, 0xE7	; 231
    73a8:	5f 4f       	sbci	r21, 0xFF	; 255
    73aa:	0e 94 60 38 	call	0x70c0	; 0x70c0 <_fpadd_parts>
    73ae:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <__pack_f>
    73b2:	a0 96       	adiw	r28, 0x20	; 32
    73b4:	e6 e0       	ldi	r30, 0x06	; 6
    73b6:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <__epilogue_restores__+0x18>

000073ba <__addsf3>:
    73ba:	a0 e2       	ldi	r26, 0x20	; 32
    73bc:	b0 e0       	ldi	r27, 0x00	; 0
    73be:	e3 ee       	ldi	r30, 0xE3	; 227
    73c0:	f9 e3       	ldi	r31, 0x39	; 57
    73c2:	0c 94 a7 40 	jmp	0x814e	; 0x814e <__prologue_saves__+0x18>
    73c6:	69 83       	std	Y+1, r22	; 0x01
    73c8:	7a 83       	std	Y+2, r23	; 0x02
    73ca:	8b 83       	std	Y+3, r24	; 0x03
    73cc:	9c 83       	std	Y+4, r25	; 0x04
    73ce:	2d 83       	std	Y+5, r18	; 0x05
    73d0:	3e 83       	std	Y+6, r19	; 0x06
    73d2:	4f 83       	std	Y+7, r20	; 0x07
    73d4:	58 87       	std	Y+8, r21	; 0x08
    73d6:	f9 e0       	ldi	r31, 0x09	; 9
    73d8:	ef 2e       	mov	r14, r31
    73da:	f1 2c       	mov	r15, r1
    73dc:	ec 0e       	add	r14, r28
    73de:	fd 1e       	adc	r15, r29
    73e0:	ce 01       	movw	r24, r28
    73e2:	01 96       	adiw	r24, 0x01	; 1
    73e4:	b7 01       	movw	r22, r14
    73e6:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    73ea:	8e 01       	movw	r16, r28
    73ec:	0f 5e       	subi	r16, 0xEF	; 239
    73ee:	1f 4f       	sbci	r17, 0xFF	; 255
    73f0:	ce 01       	movw	r24, r28
    73f2:	05 96       	adiw	r24, 0x05	; 5
    73f4:	b8 01       	movw	r22, r16
    73f6:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    73fa:	c7 01       	movw	r24, r14
    73fc:	b8 01       	movw	r22, r16
    73fe:	ae 01       	movw	r20, r28
    7400:	47 5e       	subi	r20, 0xE7	; 231
    7402:	5f 4f       	sbci	r21, 0xFF	; 255
    7404:	0e 94 60 38 	call	0x70c0	; 0x70c0 <_fpadd_parts>
    7408:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <__pack_f>
    740c:	a0 96       	adiw	r28, 0x20	; 32
    740e:	e6 e0       	ldi	r30, 0x06	; 6
    7410:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <__epilogue_restores__+0x18>

00007414 <__mulsf3>:
    7414:	a0 e2       	ldi	r26, 0x20	; 32
    7416:	b0 e0       	ldi	r27, 0x00	; 0
    7418:	e0 e1       	ldi	r30, 0x10	; 16
    741a:	fa e3       	ldi	r31, 0x3A	; 58
    741c:	0c 94 9b 40 	jmp	0x8136	; 0x8136 <__prologue_saves__>
    7420:	69 83       	std	Y+1, r22	; 0x01
    7422:	7a 83       	std	Y+2, r23	; 0x02
    7424:	8b 83       	std	Y+3, r24	; 0x03
    7426:	9c 83       	std	Y+4, r25	; 0x04
    7428:	2d 83       	std	Y+5, r18	; 0x05
    742a:	3e 83       	std	Y+6, r19	; 0x06
    742c:	4f 83       	std	Y+7, r20	; 0x07
    742e:	58 87       	std	Y+8, r21	; 0x08
    7430:	ce 01       	movw	r24, r28
    7432:	01 96       	adiw	r24, 0x01	; 1
    7434:	be 01       	movw	r22, r28
    7436:	67 5f       	subi	r22, 0xF7	; 247
    7438:	7f 4f       	sbci	r23, 0xFF	; 255
    743a:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    743e:	ce 01       	movw	r24, r28
    7440:	05 96       	adiw	r24, 0x05	; 5
    7442:	be 01       	movw	r22, r28
    7444:	6f 5e       	subi	r22, 0xEF	; 239
    7446:	7f 4f       	sbci	r23, 0xFF	; 255
    7448:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    744c:	99 85       	ldd	r25, Y+9	; 0x09
    744e:	92 30       	cpi	r25, 0x02	; 2
    7450:	88 f0       	brcs	.+34     	; 0x7474 <__mulsf3+0x60>
    7452:	89 89       	ldd	r24, Y+17	; 0x11
    7454:	82 30       	cpi	r24, 0x02	; 2
    7456:	c8 f0       	brcs	.+50     	; 0x748a <__mulsf3+0x76>
    7458:	94 30       	cpi	r25, 0x04	; 4
    745a:	19 f4       	brne	.+6      	; 0x7462 <__mulsf3+0x4e>
    745c:	82 30       	cpi	r24, 0x02	; 2
    745e:	51 f4       	brne	.+20     	; 0x7474 <__mulsf3+0x60>
    7460:	04 c0       	rjmp	.+8      	; 0x746a <__mulsf3+0x56>
    7462:	84 30       	cpi	r24, 0x04	; 4
    7464:	29 f4       	brne	.+10     	; 0x7470 <__mulsf3+0x5c>
    7466:	92 30       	cpi	r25, 0x02	; 2
    7468:	81 f4       	brne	.+32     	; 0x748a <__mulsf3+0x76>
    746a:	87 e0       	ldi	r24, 0x07	; 7
    746c:	92 e0       	ldi	r25, 0x02	; 2
    746e:	c6 c0       	rjmp	.+396    	; 0x75fc <__mulsf3+0x1e8>
    7470:	92 30       	cpi	r25, 0x02	; 2
    7472:	49 f4       	brne	.+18     	; 0x7486 <__mulsf3+0x72>
    7474:	20 e0       	ldi	r18, 0x00	; 0
    7476:	9a 85       	ldd	r25, Y+10	; 0x0a
    7478:	8a 89       	ldd	r24, Y+18	; 0x12
    747a:	98 13       	cpse	r25, r24
    747c:	21 e0       	ldi	r18, 0x01	; 1
    747e:	2a 87       	std	Y+10, r18	; 0x0a
    7480:	ce 01       	movw	r24, r28
    7482:	09 96       	adiw	r24, 0x09	; 9
    7484:	bb c0       	rjmp	.+374    	; 0x75fc <__mulsf3+0x1e8>
    7486:	82 30       	cpi	r24, 0x02	; 2
    7488:	49 f4       	brne	.+18     	; 0x749c <__mulsf3+0x88>
    748a:	20 e0       	ldi	r18, 0x00	; 0
    748c:	9a 85       	ldd	r25, Y+10	; 0x0a
    748e:	8a 89       	ldd	r24, Y+18	; 0x12
    7490:	98 13       	cpse	r25, r24
    7492:	21 e0       	ldi	r18, 0x01	; 1
    7494:	2a 8b       	std	Y+18, r18	; 0x12
    7496:	ce 01       	movw	r24, r28
    7498:	41 96       	adiw	r24, 0x11	; 17
    749a:	b0 c0       	rjmp	.+352    	; 0x75fc <__mulsf3+0x1e8>
    749c:	2d 84       	ldd	r2, Y+13	; 0x0d
    749e:	3e 84       	ldd	r3, Y+14	; 0x0e
    74a0:	4f 84       	ldd	r4, Y+15	; 0x0f
    74a2:	58 88       	ldd	r5, Y+16	; 0x10
    74a4:	6d 88       	ldd	r6, Y+21	; 0x15
    74a6:	7e 88       	ldd	r7, Y+22	; 0x16
    74a8:	8f 88       	ldd	r8, Y+23	; 0x17
    74aa:	98 8c       	ldd	r9, Y+24	; 0x18
    74ac:	ee 24       	eor	r14, r14
    74ae:	ff 24       	eor	r15, r15
    74b0:	87 01       	movw	r16, r14
    74b2:	aa 24       	eor	r10, r10
    74b4:	bb 24       	eor	r11, r11
    74b6:	65 01       	movw	r12, r10
    74b8:	40 e0       	ldi	r20, 0x00	; 0
    74ba:	50 e0       	ldi	r21, 0x00	; 0
    74bc:	60 e0       	ldi	r22, 0x00	; 0
    74be:	70 e0       	ldi	r23, 0x00	; 0
    74c0:	e0 e0       	ldi	r30, 0x00	; 0
    74c2:	f0 e0       	ldi	r31, 0x00	; 0
    74c4:	c1 01       	movw	r24, r2
    74c6:	81 70       	andi	r24, 0x01	; 1
    74c8:	90 70       	andi	r25, 0x00	; 0
    74ca:	89 2b       	or	r24, r25
    74cc:	e9 f0       	breq	.+58     	; 0x7508 <__mulsf3+0xf4>
    74ce:	e6 0c       	add	r14, r6
    74d0:	f7 1c       	adc	r15, r7
    74d2:	08 1d       	adc	r16, r8
    74d4:	19 1d       	adc	r17, r9
    74d6:	9a 01       	movw	r18, r20
    74d8:	ab 01       	movw	r20, r22
    74da:	2a 0d       	add	r18, r10
    74dc:	3b 1d       	adc	r19, r11
    74de:	4c 1d       	adc	r20, r12
    74e0:	5d 1d       	adc	r21, r13
    74e2:	80 e0       	ldi	r24, 0x00	; 0
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	a0 e0       	ldi	r26, 0x00	; 0
    74e8:	b0 e0       	ldi	r27, 0x00	; 0
    74ea:	e6 14       	cp	r14, r6
    74ec:	f7 04       	cpc	r15, r7
    74ee:	08 05       	cpc	r16, r8
    74f0:	19 05       	cpc	r17, r9
    74f2:	20 f4       	brcc	.+8      	; 0x74fc <__mulsf3+0xe8>
    74f4:	81 e0       	ldi	r24, 0x01	; 1
    74f6:	90 e0       	ldi	r25, 0x00	; 0
    74f8:	a0 e0       	ldi	r26, 0x00	; 0
    74fa:	b0 e0       	ldi	r27, 0x00	; 0
    74fc:	ba 01       	movw	r22, r20
    74fe:	a9 01       	movw	r20, r18
    7500:	48 0f       	add	r20, r24
    7502:	59 1f       	adc	r21, r25
    7504:	6a 1f       	adc	r22, r26
    7506:	7b 1f       	adc	r23, r27
    7508:	aa 0c       	add	r10, r10
    750a:	bb 1c       	adc	r11, r11
    750c:	cc 1c       	adc	r12, r12
    750e:	dd 1c       	adc	r13, r13
    7510:	97 fe       	sbrs	r9, 7
    7512:	08 c0       	rjmp	.+16     	; 0x7524 <__mulsf3+0x110>
    7514:	81 e0       	ldi	r24, 0x01	; 1
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	a0 e0       	ldi	r26, 0x00	; 0
    751a:	b0 e0       	ldi	r27, 0x00	; 0
    751c:	a8 2a       	or	r10, r24
    751e:	b9 2a       	or	r11, r25
    7520:	ca 2a       	or	r12, r26
    7522:	db 2a       	or	r13, r27
    7524:	31 96       	adiw	r30, 0x01	; 1
    7526:	e0 32       	cpi	r30, 0x20	; 32
    7528:	f1 05       	cpc	r31, r1
    752a:	49 f0       	breq	.+18     	; 0x753e <__mulsf3+0x12a>
    752c:	66 0c       	add	r6, r6
    752e:	77 1c       	adc	r7, r7
    7530:	88 1c       	adc	r8, r8
    7532:	99 1c       	adc	r9, r9
    7534:	56 94       	lsr	r5
    7536:	47 94       	ror	r4
    7538:	37 94       	ror	r3
    753a:	27 94       	ror	r2
    753c:	c3 cf       	rjmp	.-122    	; 0x74c4 <__mulsf3+0xb0>
    753e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7540:	ea 89       	ldd	r30, Y+18	; 0x12
    7542:	2b 89       	ldd	r18, Y+19	; 0x13
    7544:	3c 89       	ldd	r19, Y+20	; 0x14
    7546:	8b 85       	ldd	r24, Y+11	; 0x0b
    7548:	9c 85       	ldd	r25, Y+12	; 0x0c
    754a:	28 0f       	add	r18, r24
    754c:	39 1f       	adc	r19, r25
    754e:	2e 5f       	subi	r18, 0xFE	; 254
    7550:	3f 4f       	sbci	r19, 0xFF	; 255
    7552:	17 c0       	rjmp	.+46     	; 0x7582 <__mulsf3+0x16e>
    7554:	ca 01       	movw	r24, r20
    7556:	81 70       	andi	r24, 0x01	; 1
    7558:	90 70       	andi	r25, 0x00	; 0
    755a:	89 2b       	or	r24, r25
    755c:	61 f0       	breq	.+24     	; 0x7576 <__mulsf3+0x162>
    755e:	16 95       	lsr	r17
    7560:	07 95       	ror	r16
    7562:	f7 94       	ror	r15
    7564:	e7 94       	ror	r14
    7566:	80 e0       	ldi	r24, 0x00	; 0
    7568:	90 e0       	ldi	r25, 0x00	; 0
    756a:	a0 e0       	ldi	r26, 0x00	; 0
    756c:	b0 e8       	ldi	r27, 0x80	; 128
    756e:	e8 2a       	or	r14, r24
    7570:	f9 2a       	or	r15, r25
    7572:	0a 2b       	or	r16, r26
    7574:	1b 2b       	or	r17, r27
    7576:	76 95       	lsr	r23
    7578:	67 95       	ror	r22
    757a:	57 95       	ror	r21
    757c:	47 95       	ror	r20
    757e:	2f 5f       	subi	r18, 0xFF	; 255
    7580:	3f 4f       	sbci	r19, 0xFF	; 255
    7582:	77 fd       	sbrc	r23, 7
    7584:	e7 cf       	rjmp	.-50     	; 0x7554 <__mulsf3+0x140>
    7586:	0c c0       	rjmp	.+24     	; 0x75a0 <__mulsf3+0x18c>
    7588:	44 0f       	add	r20, r20
    758a:	55 1f       	adc	r21, r21
    758c:	66 1f       	adc	r22, r22
    758e:	77 1f       	adc	r23, r23
    7590:	17 fd       	sbrc	r17, 7
    7592:	41 60       	ori	r20, 0x01	; 1
    7594:	ee 0c       	add	r14, r14
    7596:	ff 1c       	adc	r15, r15
    7598:	00 1f       	adc	r16, r16
    759a:	11 1f       	adc	r17, r17
    759c:	21 50       	subi	r18, 0x01	; 1
    759e:	30 40       	sbci	r19, 0x00	; 0
    75a0:	40 30       	cpi	r20, 0x00	; 0
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	59 07       	cpc	r21, r25
    75a6:	90 e0       	ldi	r25, 0x00	; 0
    75a8:	69 07       	cpc	r22, r25
    75aa:	90 e4       	ldi	r25, 0x40	; 64
    75ac:	79 07       	cpc	r23, r25
    75ae:	60 f3       	brcs	.-40     	; 0x7588 <__mulsf3+0x174>
    75b0:	2b 8f       	std	Y+27, r18	; 0x1b
    75b2:	3c 8f       	std	Y+28, r19	; 0x1c
    75b4:	db 01       	movw	r26, r22
    75b6:	ca 01       	movw	r24, r20
    75b8:	8f 77       	andi	r24, 0x7F	; 127
    75ba:	90 70       	andi	r25, 0x00	; 0
    75bc:	a0 70       	andi	r26, 0x00	; 0
    75be:	b0 70       	andi	r27, 0x00	; 0
    75c0:	80 34       	cpi	r24, 0x40	; 64
    75c2:	91 05       	cpc	r25, r1
    75c4:	a1 05       	cpc	r26, r1
    75c6:	b1 05       	cpc	r27, r1
    75c8:	61 f4       	brne	.+24     	; 0x75e2 <__mulsf3+0x1ce>
    75ca:	47 fd       	sbrc	r20, 7
    75cc:	0a c0       	rjmp	.+20     	; 0x75e2 <__mulsf3+0x1ce>
    75ce:	e1 14       	cp	r14, r1
    75d0:	f1 04       	cpc	r15, r1
    75d2:	01 05       	cpc	r16, r1
    75d4:	11 05       	cpc	r17, r1
    75d6:	29 f0       	breq	.+10     	; 0x75e2 <__mulsf3+0x1ce>
    75d8:	40 5c       	subi	r20, 0xC0	; 192
    75da:	5f 4f       	sbci	r21, 0xFF	; 255
    75dc:	6f 4f       	sbci	r22, 0xFF	; 255
    75de:	7f 4f       	sbci	r23, 0xFF	; 255
    75e0:	40 78       	andi	r20, 0x80	; 128
    75e2:	1a 8e       	std	Y+26, r1	; 0x1a
    75e4:	fe 17       	cp	r31, r30
    75e6:	11 f0       	breq	.+4      	; 0x75ec <__mulsf3+0x1d8>
    75e8:	81 e0       	ldi	r24, 0x01	; 1
    75ea:	8a 8f       	std	Y+26, r24	; 0x1a
    75ec:	4d 8f       	std	Y+29, r20	; 0x1d
    75ee:	5e 8f       	std	Y+30, r21	; 0x1e
    75f0:	6f 8f       	std	Y+31, r22	; 0x1f
    75f2:	78 a3       	std	Y+32, r23	; 0x20
    75f4:	83 e0       	ldi	r24, 0x03	; 3
    75f6:	89 8f       	std	Y+25, r24	; 0x19
    75f8:	ce 01       	movw	r24, r28
    75fa:	49 96       	adiw	r24, 0x19	; 25
    75fc:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <__pack_f>
    7600:	a0 96       	adiw	r28, 0x20	; 32
    7602:	e2 e1       	ldi	r30, 0x12	; 18
    7604:	0c 94 b7 40 	jmp	0x816e	; 0x816e <__epilogue_restores__>

00007608 <__divsf3>:
    7608:	a8 e1       	ldi	r26, 0x18	; 24
    760a:	b0 e0       	ldi	r27, 0x00	; 0
    760c:	ea e0       	ldi	r30, 0x0A	; 10
    760e:	fb e3       	ldi	r31, 0x3B	; 59
    7610:	0c 94 a3 40 	jmp	0x8146	; 0x8146 <__prologue_saves__+0x10>
    7614:	69 83       	std	Y+1, r22	; 0x01
    7616:	7a 83       	std	Y+2, r23	; 0x02
    7618:	8b 83       	std	Y+3, r24	; 0x03
    761a:	9c 83       	std	Y+4, r25	; 0x04
    761c:	2d 83       	std	Y+5, r18	; 0x05
    761e:	3e 83       	std	Y+6, r19	; 0x06
    7620:	4f 83       	std	Y+7, r20	; 0x07
    7622:	58 87       	std	Y+8, r21	; 0x08
    7624:	b9 e0       	ldi	r27, 0x09	; 9
    7626:	eb 2e       	mov	r14, r27
    7628:	f1 2c       	mov	r15, r1
    762a:	ec 0e       	add	r14, r28
    762c:	fd 1e       	adc	r15, r29
    762e:	ce 01       	movw	r24, r28
    7630:	01 96       	adiw	r24, 0x01	; 1
    7632:	b7 01       	movw	r22, r14
    7634:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7638:	8e 01       	movw	r16, r28
    763a:	0f 5e       	subi	r16, 0xEF	; 239
    763c:	1f 4f       	sbci	r17, 0xFF	; 255
    763e:	ce 01       	movw	r24, r28
    7640:	05 96       	adiw	r24, 0x05	; 5
    7642:	b8 01       	movw	r22, r16
    7644:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7648:	29 85       	ldd	r18, Y+9	; 0x09
    764a:	22 30       	cpi	r18, 0x02	; 2
    764c:	08 f4       	brcc	.+2      	; 0x7650 <__divsf3+0x48>
    764e:	7e c0       	rjmp	.+252    	; 0x774c <__divsf3+0x144>
    7650:	39 89       	ldd	r19, Y+17	; 0x11
    7652:	32 30       	cpi	r19, 0x02	; 2
    7654:	10 f4       	brcc	.+4      	; 0x765a <__divsf3+0x52>
    7656:	b8 01       	movw	r22, r16
    7658:	7c c0       	rjmp	.+248    	; 0x7752 <__divsf3+0x14a>
    765a:	8a 85       	ldd	r24, Y+10	; 0x0a
    765c:	9a 89       	ldd	r25, Y+18	; 0x12
    765e:	89 27       	eor	r24, r25
    7660:	8a 87       	std	Y+10, r24	; 0x0a
    7662:	24 30       	cpi	r18, 0x04	; 4
    7664:	11 f0       	breq	.+4      	; 0x766a <__divsf3+0x62>
    7666:	22 30       	cpi	r18, 0x02	; 2
    7668:	31 f4       	brne	.+12     	; 0x7676 <__divsf3+0x6e>
    766a:	23 17       	cp	r18, r19
    766c:	09 f0       	breq	.+2      	; 0x7670 <__divsf3+0x68>
    766e:	6e c0       	rjmp	.+220    	; 0x774c <__divsf3+0x144>
    7670:	67 e0       	ldi	r22, 0x07	; 7
    7672:	72 e0       	ldi	r23, 0x02	; 2
    7674:	6e c0       	rjmp	.+220    	; 0x7752 <__divsf3+0x14a>
    7676:	34 30       	cpi	r19, 0x04	; 4
    7678:	39 f4       	brne	.+14     	; 0x7688 <__divsf3+0x80>
    767a:	1d 86       	std	Y+13, r1	; 0x0d
    767c:	1e 86       	std	Y+14, r1	; 0x0e
    767e:	1f 86       	std	Y+15, r1	; 0x0f
    7680:	18 8a       	std	Y+16, r1	; 0x10
    7682:	1c 86       	std	Y+12, r1	; 0x0c
    7684:	1b 86       	std	Y+11, r1	; 0x0b
    7686:	04 c0       	rjmp	.+8      	; 0x7690 <__divsf3+0x88>
    7688:	32 30       	cpi	r19, 0x02	; 2
    768a:	21 f4       	brne	.+8      	; 0x7694 <__divsf3+0x8c>
    768c:	84 e0       	ldi	r24, 0x04	; 4
    768e:	89 87       	std	Y+9, r24	; 0x09
    7690:	b7 01       	movw	r22, r14
    7692:	5f c0       	rjmp	.+190    	; 0x7752 <__divsf3+0x14a>
    7694:	2b 85       	ldd	r18, Y+11	; 0x0b
    7696:	3c 85       	ldd	r19, Y+12	; 0x0c
    7698:	8b 89       	ldd	r24, Y+19	; 0x13
    769a:	9c 89       	ldd	r25, Y+20	; 0x14
    769c:	28 1b       	sub	r18, r24
    769e:	39 0b       	sbc	r19, r25
    76a0:	3c 87       	std	Y+12, r19	; 0x0c
    76a2:	2b 87       	std	Y+11, r18	; 0x0b
    76a4:	ed 84       	ldd	r14, Y+13	; 0x0d
    76a6:	fe 84       	ldd	r15, Y+14	; 0x0e
    76a8:	0f 85       	ldd	r16, Y+15	; 0x0f
    76aa:	18 89       	ldd	r17, Y+16	; 0x10
    76ac:	ad 88       	ldd	r10, Y+21	; 0x15
    76ae:	be 88       	ldd	r11, Y+22	; 0x16
    76b0:	cf 88       	ldd	r12, Y+23	; 0x17
    76b2:	d8 8c       	ldd	r13, Y+24	; 0x18
    76b4:	ea 14       	cp	r14, r10
    76b6:	fb 04       	cpc	r15, r11
    76b8:	0c 05       	cpc	r16, r12
    76ba:	1d 05       	cpc	r17, r13
    76bc:	40 f4       	brcc	.+16     	; 0x76ce <__divsf3+0xc6>
    76be:	ee 0c       	add	r14, r14
    76c0:	ff 1c       	adc	r15, r15
    76c2:	00 1f       	adc	r16, r16
    76c4:	11 1f       	adc	r17, r17
    76c6:	21 50       	subi	r18, 0x01	; 1
    76c8:	30 40       	sbci	r19, 0x00	; 0
    76ca:	3c 87       	std	Y+12, r19	; 0x0c
    76cc:	2b 87       	std	Y+11, r18	; 0x0b
    76ce:	20 e0       	ldi	r18, 0x00	; 0
    76d0:	30 e0       	ldi	r19, 0x00	; 0
    76d2:	40 e0       	ldi	r20, 0x00	; 0
    76d4:	50 e0       	ldi	r21, 0x00	; 0
    76d6:	80 e0       	ldi	r24, 0x00	; 0
    76d8:	90 e0       	ldi	r25, 0x00	; 0
    76da:	a0 e0       	ldi	r26, 0x00	; 0
    76dc:	b0 e4       	ldi	r27, 0x40	; 64
    76de:	60 e0       	ldi	r22, 0x00	; 0
    76e0:	70 e0       	ldi	r23, 0x00	; 0
    76e2:	ea 14       	cp	r14, r10
    76e4:	fb 04       	cpc	r15, r11
    76e6:	0c 05       	cpc	r16, r12
    76e8:	1d 05       	cpc	r17, r13
    76ea:	40 f0       	brcs	.+16     	; 0x76fc <__divsf3+0xf4>
    76ec:	28 2b       	or	r18, r24
    76ee:	39 2b       	or	r19, r25
    76f0:	4a 2b       	or	r20, r26
    76f2:	5b 2b       	or	r21, r27
    76f4:	ea 18       	sub	r14, r10
    76f6:	fb 08       	sbc	r15, r11
    76f8:	0c 09       	sbc	r16, r12
    76fa:	1d 09       	sbc	r17, r13
    76fc:	b6 95       	lsr	r27
    76fe:	a7 95       	ror	r26
    7700:	97 95       	ror	r25
    7702:	87 95       	ror	r24
    7704:	ee 0c       	add	r14, r14
    7706:	ff 1c       	adc	r15, r15
    7708:	00 1f       	adc	r16, r16
    770a:	11 1f       	adc	r17, r17
    770c:	6f 5f       	subi	r22, 0xFF	; 255
    770e:	7f 4f       	sbci	r23, 0xFF	; 255
    7710:	6f 31       	cpi	r22, 0x1F	; 31
    7712:	71 05       	cpc	r23, r1
    7714:	31 f7       	brne	.-52     	; 0x76e2 <__divsf3+0xda>
    7716:	da 01       	movw	r26, r20
    7718:	c9 01       	movw	r24, r18
    771a:	8f 77       	andi	r24, 0x7F	; 127
    771c:	90 70       	andi	r25, 0x00	; 0
    771e:	a0 70       	andi	r26, 0x00	; 0
    7720:	b0 70       	andi	r27, 0x00	; 0
    7722:	80 34       	cpi	r24, 0x40	; 64
    7724:	91 05       	cpc	r25, r1
    7726:	a1 05       	cpc	r26, r1
    7728:	b1 05       	cpc	r27, r1
    772a:	61 f4       	brne	.+24     	; 0x7744 <__divsf3+0x13c>
    772c:	27 fd       	sbrc	r18, 7
    772e:	0a c0       	rjmp	.+20     	; 0x7744 <__divsf3+0x13c>
    7730:	e1 14       	cp	r14, r1
    7732:	f1 04       	cpc	r15, r1
    7734:	01 05       	cpc	r16, r1
    7736:	11 05       	cpc	r17, r1
    7738:	29 f0       	breq	.+10     	; 0x7744 <__divsf3+0x13c>
    773a:	20 5c       	subi	r18, 0xC0	; 192
    773c:	3f 4f       	sbci	r19, 0xFF	; 255
    773e:	4f 4f       	sbci	r20, 0xFF	; 255
    7740:	5f 4f       	sbci	r21, 0xFF	; 255
    7742:	20 78       	andi	r18, 0x80	; 128
    7744:	2d 87       	std	Y+13, r18	; 0x0d
    7746:	3e 87       	std	Y+14, r19	; 0x0e
    7748:	4f 87       	std	Y+15, r20	; 0x0f
    774a:	58 8b       	std	Y+16, r21	; 0x10
    774c:	be 01       	movw	r22, r28
    774e:	67 5f       	subi	r22, 0xF7	; 247
    7750:	7f 4f       	sbci	r23, 0xFF	; 255
    7752:	cb 01       	movw	r24, r22
    7754:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <__pack_f>
    7758:	68 96       	adiw	r28, 0x18	; 24
    775a:	ea e0       	ldi	r30, 0x0A	; 10
    775c:	0c 94 bf 40 	jmp	0x817e	; 0x817e <__epilogue_restores__+0x10>

00007760 <__gtsf2>:
    7760:	a8 e1       	ldi	r26, 0x18	; 24
    7762:	b0 e0       	ldi	r27, 0x00	; 0
    7764:	e6 eb       	ldi	r30, 0xB6	; 182
    7766:	fb e3       	ldi	r31, 0x3B	; 59
    7768:	0c 94 a7 40 	jmp	0x814e	; 0x814e <__prologue_saves__+0x18>
    776c:	69 83       	std	Y+1, r22	; 0x01
    776e:	7a 83       	std	Y+2, r23	; 0x02
    7770:	8b 83       	std	Y+3, r24	; 0x03
    7772:	9c 83       	std	Y+4, r25	; 0x04
    7774:	2d 83       	std	Y+5, r18	; 0x05
    7776:	3e 83       	std	Y+6, r19	; 0x06
    7778:	4f 83       	std	Y+7, r20	; 0x07
    777a:	58 87       	std	Y+8, r21	; 0x08
    777c:	89 e0       	ldi	r24, 0x09	; 9
    777e:	e8 2e       	mov	r14, r24
    7780:	f1 2c       	mov	r15, r1
    7782:	ec 0e       	add	r14, r28
    7784:	fd 1e       	adc	r15, r29
    7786:	ce 01       	movw	r24, r28
    7788:	01 96       	adiw	r24, 0x01	; 1
    778a:	b7 01       	movw	r22, r14
    778c:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7790:	8e 01       	movw	r16, r28
    7792:	0f 5e       	subi	r16, 0xEF	; 239
    7794:	1f 4f       	sbci	r17, 0xFF	; 255
    7796:	ce 01       	movw	r24, r28
    7798:	05 96       	adiw	r24, 0x05	; 5
    779a:	b8 01       	movw	r22, r16
    779c:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    77a0:	89 85       	ldd	r24, Y+9	; 0x09
    77a2:	82 30       	cpi	r24, 0x02	; 2
    77a4:	40 f0       	brcs	.+16     	; 0x77b6 <__gtsf2+0x56>
    77a6:	89 89       	ldd	r24, Y+17	; 0x11
    77a8:	82 30       	cpi	r24, 0x02	; 2
    77aa:	28 f0       	brcs	.+10     	; 0x77b6 <__gtsf2+0x56>
    77ac:	c7 01       	movw	r24, r14
    77ae:	b8 01       	movw	r22, r16
    77b0:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__fpcmp_parts_f>
    77b4:	01 c0       	rjmp	.+2      	; 0x77b8 <__gtsf2+0x58>
    77b6:	8f ef       	ldi	r24, 0xFF	; 255
    77b8:	68 96       	adiw	r28, 0x18	; 24
    77ba:	e6 e0       	ldi	r30, 0x06	; 6
    77bc:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <__epilogue_restores__+0x18>

000077c0 <__gesf2>:
    77c0:	a8 e1       	ldi	r26, 0x18	; 24
    77c2:	b0 e0       	ldi	r27, 0x00	; 0
    77c4:	e6 ee       	ldi	r30, 0xE6	; 230
    77c6:	fb e3       	ldi	r31, 0x3B	; 59
    77c8:	0c 94 a7 40 	jmp	0x814e	; 0x814e <__prologue_saves__+0x18>
    77cc:	69 83       	std	Y+1, r22	; 0x01
    77ce:	7a 83       	std	Y+2, r23	; 0x02
    77d0:	8b 83       	std	Y+3, r24	; 0x03
    77d2:	9c 83       	std	Y+4, r25	; 0x04
    77d4:	2d 83       	std	Y+5, r18	; 0x05
    77d6:	3e 83       	std	Y+6, r19	; 0x06
    77d8:	4f 83       	std	Y+7, r20	; 0x07
    77da:	58 87       	std	Y+8, r21	; 0x08
    77dc:	89 e0       	ldi	r24, 0x09	; 9
    77de:	e8 2e       	mov	r14, r24
    77e0:	f1 2c       	mov	r15, r1
    77e2:	ec 0e       	add	r14, r28
    77e4:	fd 1e       	adc	r15, r29
    77e6:	ce 01       	movw	r24, r28
    77e8:	01 96       	adiw	r24, 0x01	; 1
    77ea:	b7 01       	movw	r22, r14
    77ec:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    77f0:	8e 01       	movw	r16, r28
    77f2:	0f 5e       	subi	r16, 0xEF	; 239
    77f4:	1f 4f       	sbci	r17, 0xFF	; 255
    77f6:	ce 01       	movw	r24, r28
    77f8:	05 96       	adiw	r24, 0x05	; 5
    77fa:	b8 01       	movw	r22, r16
    77fc:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7800:	89 85       	ldd	r24, Y+9	; 0x09
    7802:	82 30       	cpi	r24, 0x02	; 2
    7804:	40 f0       	brcs	.+16     	; 0x7816 <__gesf2+0x56>
    7806:	89 89       	ldd	r24, Y+17	; 0x11
    7808:	82 30       	cpi	r24, 0x02	; 2
    780a:	28 f0       	brcs	.+10     	; 0x7816 <__gesf2+0x56>
    780c:	c7 01       	movw	r24, r14
    780e:	b8 01       	movw	r22, r16
    7810:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__fpcmp_parts_f>
    7814:	01 c0       	rjmp	.+2      	; 0x7818 <__gesf2+0x58>
    7816:	8f ef       	ldi	r24, 0xFF	; 255
    7818:	68 96       	adiw	r28, 0x18	; 24
    781a:	e6 e0       	ldi	r30, 0x06	; 6
    781c:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <__epilogue_restores__+0x18>

00007820 <__ltsf2>:
    7820:	a8 e1       	ldi	r26, 0x18	; 24
    7822:	b0 e0       	ldi	r27, 0x00	; 0
    7824:	e6 e1       	ldi	r30, 0x16	; 22
    7826:	fc e3       	ldi	r31, 0x3C	; 60
    7828:	0c 94 a7 40 	jmp	0x814e	; 0x814e <__prologue_saves__+0x18>
    782c:	69 83       	std	Y+1, r22	; 0x01
    782e:	7a 83       	std	Y+2, r23	; 0x02
    7830:	8b 83       	std	Y+3, r24	; 0x03
    7832:	9c 83       	std	Y+4, r25	; 0x04
    7834:	2d 83       	std	Y+5, r18	; 0x05
    7836:	3e 83       	std	Y+6, r19	; 0x06
    7838:	4f 83       	std	Y+7, r20	; 0x07
    783a:	58 87       	std	Y+8, r21	; 0x08
    783c:	89 e0       	ldi	r24, 0x09	; 9
    783e:	e8 2e       	mov	r14, r24
    7840:	f1 2c       	mov	r15, r1
    7842:	ec 0e       	add	r14, r28
    7844:	fd 1e       	adc	r15, r29
    7846:	ce 01       	movw	r24, r28
    7848:	01 96       	adiw	r24, 0x01	; 1
    784a:	b7 01       	movw	r22, r14
    784c:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7850:	8e 01       	movw	r16, r28
    7852:	0f 5e       	subi	r16, 0xEF	; 239
    7854:	1f 4f       	sbci	r17, 0xFF	; 255
    7856:	ce 01       	movw	r24, r28
    7858:	05 96       	adiw	r24, 0x05	; 5
    785a:	b8 01       	movw	r22, r16
    785c:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    7860:	89 85       	ldd	r24, Y+9	; 0x09
    7862:	82 30       	cpi	r24, 0x02	; 2
    7864:	40 f0       	brcs	.+16     	; 0x7876 <__ltsf2+0x56>
    7866:	89 89       	ldd	r24, Y+17	; 0x11
    7868:	82 30       	cpi	r24, 0x02	; 2
    786a:	28 f0       	brcs	.+10     	; 0x7876 <__ltsf2+0x56>
    786c:	c7 01       	movw	r24, r14
    786e:	b8 01       	movw	r22, r16
    7870:	0e 94 a9 3e 	call	0x7d52	; 0x7d52 <__fpcmp_parts_f>
    7874:	01 c0       	rjmp	.+2      	; 0x7878 <__ltsf2+0x58>
    7876:	81 e0       	ldi	r24, 0x01	; 1
    7878:	68 96       	adiw	r28, 0x18	; 24
    787a:	e6 e0       	ldi	r30, 0x06	; 6
    787c:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <__epilogue_restores__+0x18>

00007880 <__fixsfsi>:
    7880:	ac e0       	ldi	r26, 0x0C	; 12
    7882:	b0 e0       	ldi	r27, 0x00	; 0
    7884:	e6 e4       	ldi	r30, 0x46	; 70
    7886:	fc e3       	ldi	r31, 0x3C	; 60
    7888:	0c 94 ab 40 	jmp	0x8156	; 0x8156 <__prologue_saves__+0x20>
    788c:	69 83       	std	Y+1, r22	; 0x01
    788e:	7a 83       	std	Y+2, r23	; 0x02
    7890:	8b 83       	std	Y+3, r24	; 0x03
    7892:	9c 83       	std	Y+4, r25	; 0x04
    7894:	ce 01       	movw	r24, r28
    7896:	01 96       	adiw	r24, 0x01	; 1
    7898:	be 01       	movw	r22, r28
    789a:	6b 5f       	subi	r22, 0xFB	; 251
    789c:	7f 4f       	sbci	r23, 0xFF	; 255
    789e:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__unpack_f>
    78a2:	8d 81       	ldd	r24, Y+5	; 0x05
    78a4:	82 30       	cpi	r24, 0x02	; 2
    78a6:	61 f1       	breq	.+88     	; 0x7900 <__fixsfsi+0x80>
    78a8:	82 30       	cpi	r24, 0x02	; 2
    78aa:	50 f1       	brcs	.+84     	; 0x7900 <__fixsfsi+0x80>
    78ac:	84 30       	cpi	r24, 0x04	; 4
    78ae:	21 f4       	brne	.+8      	; 0x78b8 <__fixsfsi+0x38>
    78b0:	8e 81       	ldd	r24, Y+6	; 0x06
    78b2:	88 23       	and	r24, r24
    78b4:	51 f1       	breq	.+84     	; 0x790a <__fixsfsi+0x8a>
    78b6:	2e c0       	rjmp	.+92     	; 0x7914 <__fixsfsi+0x94>
    78b8:	2f 81       	ldd	r18, Y+7	; 0x07
    78ba:	38 85       	ldd	r19, Y+8	; 0x08
    78bc:	37 fd       	sbrc	r19, 7
    78be:	20 c0       	rjmp	.+64     	; 0x7900 <__fixsfsi+0x80>
    78c0:	6e 81       	ldd	r22, Y+6	; 0x06
    78c2:	2f 31       	cpi	r18, 0x1F	; 31
    78c4:	31 05       	cpc	r19, r1
    78c6:	1c f0       	brlt	.+6      	; 0x78ce <__fixsfsi+0x4e>
    78c8:	66 23       	and	r22, r22
    78ca:	f9 f0       	breq	.+62     	; 0x790a <__fixsfsi+0x8a>
    78cc:	23 c0       	rjmp	.+70     	; 0x7914 <__fixsfsi+0x94>
    78ce:	8e e1       	ldi	r24, 0x1E	; 30
    78d0:	90 e0       	ldi	r25, 0x00	; 0
    78d2:	82 1b       	sub	r24, r18
    78d4:	93 0b       	sbc	r25, r19
    78d6:	29 85       	ldd	r18, Y+9	; 0x09
    78d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    78da:	4b 85       	ldd	r20, Y+11	; 0x0b
    78dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    78de:	04 c0       	rjmp	.+8      	; 0x78e8 <__fixsfsi+0x68>
    78e0:	56 95       	lsr	r21
    78e2:	47 95       	ror	r20
    78e4:	37 95       	ror	r19
    78e6:	27 95       	ror	r18
    78e8:	8a 95       	dec	r24
    78ea:	d2 f7       	brpl	.-12     	; 0x78e0 <__fixsfsi+0x60>
    78ec:	66 23       	and	r22, r22
    78ee:	b1 f0       	breq	.+44     	; 0x791c <__fixsfsi+0x9c>
    78f0:	50 95       	com	r21
    78f2:	40 95       	com	r20
    78f4:	30 95       	com	r19
    78f6:	21 95       	neg	r18
    78f8:	3f 4f       	sbci	r19, 0xFF	; 255
    78fa:	4f 4f       	sbci	r20, 0xFF	; 255
    78fc:	5f 4f       	sbci	r21, 0xFF	; 255
    78fe:	0e c0       	rjmp	.+28     	; 0x791c <__fixsfsi+0x9c>
    7900:	20 e0       	ldi	r18, 0x00	; 0
    7902:	30 e0       	ldi	r19, 0x00	; 0
    7904:	40 e0       	ldi	r20, 0x00	; 0
    7906:	50 e0       	ldi	r21, 0x00	; 0
    7908:	09 c0       	rjmp	.+18     	; 0x791c <__fixsfsi+0x9c>
    790a:	2f ef       	ldi	r18, 0xFF	; 255
    790c:	3f ef       	ldi	r19, 0xFF	; 255
    790e:	4f ef       	ldi	r20, 0xFF	; 255
    7910:	5f e7       	ldi	r21, 0x7F	; 127
    7912:	04 c0       	rjmp	.+8      	; 0x791c <__fixsfsi+0x9c>
    7914:	20 e0       	ldi	r18, 0x00	; 0
    7916:	30 e0       	ldi	r19, 0x00	; 0
    7918:	40 e0       	ldi	r20, 0x00	; 0
    791a:	50 e8       	ldi	r21, 0x80	; 128
    791c:	b9 01       	movw	r22, r18
    791e:	ca 01       	movw	r24, r20
    7920:	2c 96       	adiw	r28, 0x0c	; 12
    7922:	e2 e0       	ldi	r30, 0x02	; 2
    7924:	0c 94 c7 40 	jmp	0x818e	; 0x818e <__epilogue_restores__+0x20>

00007928 <__floatunsisf>:
    7928:	a8 e0       	ldi	r26, 0x08	; 8
    792a:	b0 e0       	ldi	r27, 0x00	; 0
    792c:	ea e9       	ldi	r30, 0x9A	; 154
    792e:	fc e3       	ldi	r31, 0x3C	; 60
    7930:	0c 94 a3 40 	jmp	0x8146	; 0x8146 <__prologue_saves__+0x10>
    7934:	7b 01       	movw	r14, r22
    7936:	8c 01       	movw	r16, r24
    7938:	61 15       	cp	r22, r1
    793a:	71 05       	cpc	r23, r1
    793c:	81 05       	cpc	r24, r1
    793e:	91 05       	cpc	r25, r1
    7940:	19 f4       	brne	.+6      	; 0x7948 <__floatunsisf+0x20>
    7942:	82 e0       	ldi	r24, 0x02	; 2
    7944:	89 83       	std	Y+1, r24	; 0x01
    7946:	60 c0       	rjmp	.+192    	; 0x7a08 <__floatunsisf+0xe0>
    7948:	83 e0       	ldi	r24, 0x03	; 3
    794a:	89 83       	std	Y+1, r24	; 0x01
    794c:	8e e1       	ldi	r24, 0x1E	; 30
    794e:	c8 2e       	mov	r12, r24
    7950:	d1 2c       	mov	r13, r1
    7952:	dc 82       	std	Y+4, r13	; 0x04
    7954:	cb 82       	std	Y+3, r12	; 0x03
    7956:	ed 82       	std	Y+5, r14	; 0x05
    7958:	fe 82       	std	Y+6, r15	; 0x06
    795a:	0f 83       	std	Y+7, r16	; 0x07
    795c:	18 87       	std	Y+8, r17	; 0x08
    795e:	c8 01       	movw	r24, r16
    7960:	b7 01       	movw	r22, r14
    7962:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <__clzsi2>
    7966:	fc 01       	movw	r30, r24
    7968:	31 97       	sbiw	r30, 0x01	; 1
    796a:	f7 ff       	sbrs	r31, 7
    796c:	3b c0       	rjmp	.+118    	; 0x79e4 <__floatunsisf+0xbc>
    796e:	22 27       	eor	r18, r18
    7970:	33 27       	eor	r19, r19
    7972:	2e 1b       	sub	r18, r30
    7974:	3f 0b       	sbc	r19, r31
    7976:	57 01       	movw	r10, r14
    7978:	68 01       	movw	r12, r16
    797a:	02 2e       	mov	r0, r18
    797c:	04 c0       	rjmp	.+8      	; 0x7986 <__floatunsisf+0x5e>
    797e:	d6 94       	lsr	r13
    7980:	c7 94       	ror	r12
    7982:	b7 94       	ror	r11
    7984:	a7 94       	ror	r10
    7986:	0a 94       	dec	r0
    7988:	d2 f7       	brpl	.-12     	; 0x797e <__floatunsisf+0x56>
    798a:	40 e0       	ldi	r20, 0x00	; 0
    798c:	50 e0       	ldi	r21, 0x00	; 0
    798e:	60 e0       	ldi	r22, 0x00	; 0
    7990:	70 e0       	ldi	r23, 0x00	; 0
    7992:	81 e0       	ldi	r24, 0x01	; 1
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	a0 e0       	ldi	r26, 0x00	; 0
    7998:	b0 e0       	ldi	r27, 0x00	; 0
    799a:	04 c0       	rjmp	.+8      	; 0x79a4 <__floatunsisf+0x7c>
    799c:	88 0f       	add	r24, r24
    799e:	99 1f       	adc	r25, r25
    79a0:	aa 1f       	adc	r26, r26
    79a2:	bb 1f       	adc	r27, r27
    79a4:	2a 95       	dec	r18
    79a6:	d2 f7       	brpl	.-12     	; 0x799c <__floatunsisf+0x74>
    79a8:	01 97       	sbiw	r24, 0x01	; 1
    79aa:	a1 09       	sbc	r26, r1
    79ac:	b1 09       	sbc	r27, r1
    79ae:	8e 21       	and	r24, r14
    79b0:	9f 21       	and	r25, r15
    79b2:	a0 23       	and	r26, r16
    79b4:	b1 23       	and	r27, r17
    79b6:	00 97       	sbiw	r24, 0x00	; 0
    79b8:	a1 05       	cpc	r26, r1
    79ba:	b1 05       	cpc	r27, r1
    79bc:	21 f0       	breq	.+8      	; 0x79c6 <__floatunsisf+0x9e>
    79be:	41 e0       	ldi	r20, 0x01	; 1
    79c0:	50 e0       	ldi	r21, 0x00	; 0
    79c2:	60 e0       	ldi	r22, 0x00	; 0
    79c4:	70 e0       	ldi	r23, 0x00	; 0
    79c6:	4a 29       	or	r20, r10
    79c8:	5b 29       	or	r21, r11
    79ca:	6c 29       	or	r22, r12
    79cc:	7d 29       	or	r23, r13
    79ce:	4d 83       	std	Y+5, r20	; 0x05
    79d0:	5e 83       	std	Y+6, r21	; 0x06
    79d2:	6f 83       	std	Y+7, r22	; 0x07
    79d4:	78 87       	std	Y+8, r23	; 0x08
    79d6:	8e e1       	ldi	r24, 0x1E	; 30
    79d8:	90 e0       	ldi	r25, 0x00	; 0
    79da:	8e 1b       	sub	r24, r30
    79dc:	9f 0b       	sbc	r25, r31
    79de:	9c 83       	std	Y+4, r25	; 0x04
    79e0:	8b 83       	std	Y+3, r24	; 0x03
    79e2:	12 c0       	rjmp	.+36     	; 0x7a08 <__floatunsisf+0xe0>
    79e4:	30 97       	sbiw	r30, 0x00	; 0
    79e6:	81 f0       	breq	.+32     	; 0x7a08 <__floatunsisf+0xe0>
    79e8:	0e 2e       	mov	r0, r30
    79ea:	04 c0       	rjmp	.+8      	; 0x79f4 <__floatunsisf+0xcc>
    79ec:	ee 0c       	add	r14, r14
    79ee:	ff 1c       	adc	r15, r15
    79f0:	00 1f       	adc	r16, r16
    79f2:	11 1f       	adc	r17, r17
    79f4:	0a 94       	dec	r0
    79f6:	d2 f7       	brpl	.-12     	; 0x79ec <__floatunsisf+0xc4>
    79f8:	ed 82       	std	Y+5, r14	; 0x05
    79fa:	fe 82       	std	Y+6, r15	; 0x06
    79fc:	0f 83       	std	Y+7, r16	; 0x07
    79fe:	18 87       	std	Y+8, r17	; 0x08
    7a00:	ce 1a       	sub	r12, r30
    7a02:	df 0a       	sbc	r13, r31
    7a04:	dc 82       	std	Y+4, r13	; 0x04
    7a06:	cb 82       	std	Y+3, r12	; 0x03
    7a08:	1a 82       	std	Y+2, r1	; 0x02
    7a0a:	ce 01       	movw	r24, r28
    7a0c:	01 96       	adiw	r24, 0x01	; 1
    7a0e:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <__pack_f>
    7a12:	28 96       	adiw	r28, 0x08	; 8
    7a14:	ea e0       	ldi	r30, 0x0A	; 10
    7a16:	0c 94 bf 40 	jmp	0x817e	; 0x817e <__epilogue_restores__+0x10>

00007a1a <__clzsi2>:
    7a1a:	ef 92       	push	r14
    7a1c:	ff 92       	push	r15
    7a1e:	0f 93       	push	r16
    7a20:	1f 93       	push	r17
    7a22:	7b 01       	movw	r14, r22
    7a24:	8c 01       	movw	r16, r24
    7a26:	80 e0       	ldi	r24, 0x00	; 0
    7a28:	e8 16       	cp	r14, r24
    7a2a:	80 e0       	ldi	r24, 0x00	; 0
    7a2c:	f8 06       	cpc	r15, r24
    7a2e:	81 e0       	ldi	r24, 0x01	; 1
    7a30:	08 07       	cpc	r16, r24
    7a32:	80 e0       	ldi	r24, 0x00	; 0
    7a34:	18 07       	cpc	r17, r24
    7a36:	88 f4       	brcc	.+34     	; 0x7a5a <__clzsi2+0x40>
    7a38:	8f ef       	ldi	r24, 0xFF	; 255
    7a3a:	e8 16       	cp	r14, r24
    7a3c:	f1 04       	cpc	r15, r1
    7a3e:	01 05       	cpc	r16, r1
    7a40:	11 05       	cpc	r17, r1
    7a42:	31 f0       	breq	.+12     	; 0x7a50 <__clzsi2+0x36>
    7a44:	28 f0       	brcs	.+10     	; 0x7a50 <__clzsi2+0x36>
    7a46:	88 e0       	ldi	r24, 0x08	; 8
    7a48:	90 e0       	ldi	r25, 0x00	; 0
    7a4a:	a0 e0       	ldi	r26, 0x00	; 0
    7a4c:	b0 e0       	ldi	r27, 0x00	; 0
    7a4e:	17 c0       	rjmp	.+46     	; 0x7a7e <__clzsi2+0x64>
    7a50:	80 e0       	ldi	r24, 0x00	; 0
    7a52:	90 e0       	ldi	r25, 0x00	; 0
    7a54:	a0 e0       	ldi	r26, 0x00	; 0
    7a56:	b0 e0       	ldi	r27, 0x00	; 0
    7a58:	12 c0       	rjmp	.+36     	; 0x7a7e <__clzsi2+0x64>
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	e8 16       	cp	r14, r24
    7a5e:	80 e0       	ldi	r24, 0x00	; 0
    7a60:	f8 06       	cpc	r15, r24
    7a62:	80 e0       	ldi	r24, 0x00	; 0
    7a64:	08 07       	cpc	r16, r24
    7a66:	81 e0       	ldi	r24, 0x01	; 1
    7a68:	18 07       	cpc	r17, r24
    7a6a:	28 f0       	brcs	.+10     	; 0x7a76 <__clzsi2+0x5c>
    7a6c:	88 e1       	ldi	r24, 0x18	; 24
    7a6e:	90 e0       	ldi	r25, 0x00	; 0
    7a70:	a0 e0       	ldi	r26, 0x00	; 0
    7a72:	b0 e0       	ldi	r27, 0x00	; 0
    7a74:	04 c0       	rjmp	.+8      	; 0x7a7e <__clzsi2+0x64>
    7a76:	80 e1       	ldi	r24, 0x10	; 16
    7a78:	90 e0       	ldi	r25, 0x00	; 0
    7a7a:	a0 e0       	ldi	r26, 0x00	; 0
    7a7c:	b0 e0       	ldi	r27, 0x00	; 0
    7a7e:	20 e2       	ldi	r18, 0x20	; 32
    7a80:	30 e0       	ldi	r19, 0x00	; 0
    7a82:	40 e0       	ldi	r20, 0x00	; 0
    7a84:	50 e0       	ldi	r21, 0x00	; 0
    7a86:	28 1b       	sub	r18, r24
    7a88:	39 0b       	sbc	r19, r25
    7a8a:	4a 0b       	sbc	r20, r26
    7a8c:	5b 0b       	sbc	r21, r27
    7a8e:	04 c0       	rjmp	.+8      	; 0x7a98 <__clzsi2+0x7e>
    7a90:	16 95       	lsr	r17
    7a92:	07 95       	ror	r16
    7a94:	f7 94       	ror	r15
    7a96:	e7 94       	ror	r14
    7a98:	8a 95       	dec	r24
    7a9a:	d2 f7       	brpl	.-12     	; 0x7a90 <__clzsi2+0x76>
    7a9c:	f7 01       	movw	r30, r14
    7a9e:	e1 5f       	subi	r30, 0xF1	; 241
    7aa0:	fd 4f       	sbci	r31, 0xFD	; 253
    7aa2:	80 81       	ld	r24, Z
    7aa4:	28 1b       	sub	r18, r24
    7aa6:	31 09       	sbc	r19, r1
    7aa8:	41 09       	sbc	r20, r1
    7aaa:	51 09       	sbc	r21, r1
    7aac:	c9 01       	movw	r24, r18
    7aae:	1f 91       	pop	r17
    7ab0:	0f 91       	pop	r16
    7ab2:	ff 90       	pop	r15
    7ab4:	ef 90       	pop	r14
    7ab6:	08 95       	ret

00007ab8 <__pack_f>:
    7ab8:	df 92       	push	r13
    7aba:	ef 92       	push	r14
    7abc:	ff 92       	push	r15
    7abe:	0f 93       	push	r16
    7ac0:	1f 93       	push	r17
    7ac2:	fc 01       	movw	r30, r24
    7ac4:	e4 80       	ldd	r14, Z+4	; 0x04
    7ac6:	f5 80       	ldd	r15, Z+5	; 0x05
    7ac8:	06 81       	ldd	r16, Z+6	; 0x06
    7aca:	17 81       	ldd	r17, Z+7	; 0x07
    7acc:	d1 80       	ldd	r13, Z+1	; 0x01
    7ace:	80 81       	ld	r24, Z
    7ad0:	82 30       	cpi	r24, 0x02	; 2
    7ad2:	48 f4       	brcc	.+18     	; 0x7ae6 <__pack_f+0x2e>
    7ad4:	80 e0       	ldi	r24, 0x00	; 0
    7ad6:	90 e0       	ldi	r25, 0x00	; 0
    7ad8:	a0 e1       	ldi	r26, 0x10	; 16
    7ada:	b0 e0       	ldi	r27, 0x00	; 0
    7adc:	e8 2a       	or	r14, r24
    7ade:	f9 2a       	or	r15, r25
    7ae0:	0a 2b       	or	r16, r26
    7ae2:	1b 2b       	or	r17, r27
    7ae4:	a5 c0       	rjmp	.+330    	; 0x7c30 <__pack_f+0x178>
    7ae6:	84 30       	cpi	r24, 0x04	; 4
    7ae8:	09 f4       	brne	.+2      	; 0x7aec <__pack_f+0x34>
    7aea:	9f c0       	rjmp	.+318    	; 0x7c2a <__pack_f+0x172>
    7aec:	82 30       	cpi	r24, 0x02	; 2
    7aee:	21 f4       	brne	.+8      	; 0x7af8 <__pack_f+0x40>
    7af0:	ee 24       	eor	r14, r14
    7af2:	ff 24       	eor	r15, r15
    7af4:	87 01       	movw	r16, r14
    7af6:	05 c0       	rjmp	.+10     	; 0x7b02 <__pack_f+0x4a>
    7af8:	e1 14       	cp	r14, r1
    7afa:	f1 04       	cpc	r15, r1
    7afc:	01 05       	cpc	r16, r1
    7afe:	11 05       	cpc	r17, r1
    7b00:	19 f4       	brne	.+6      	; 0x7b08 <__pack_f+0x50>
    7b02:	e0 e0       	ldi	r30, 0x00	; 0
    7b04:	f0 e0       	ldi	r31, 0x00	; 0
    7b06:	96 c0       	rjmp	.+300    	; 0x7c34 <__pack_f+0x17c>
    7b08:	62 81       	ldd	r22, Z+2	; 0x02
    7b0a:	73 81       	ldd	r23, Z+3	; 0x03
    7b0c:	9f ef       	ldi	r25, 0xFF	; 255
    7b0e:	62 38       	cpi	r22, 0x82	; 130
    7b10:	79 07       	cpc	r23, r25
    7b12:	0c f0       	brlt	.+2      	; 0x7b16 <__pack_f+0x5e>
    7b14:	5b c0       	rjmp	.+182    	; 0x7bcc <__pack_f+0x114>
    7b16:	22 e8       	ldi	r18, 0x82	; 130
    7b18:	3f ef       	ldi	r19, 0xFF	; 255
    7b1a:	26 1b       	sub	r18, r22
    7b1c:	37 0b       	sbc	r19, r23
    7b1e:	2a 31       	cpi	r18, 0x1A	; 26
    7b20:	31 05       	cpc	r19, r1
    7b22:	2c f0       	brlt	.+10     	; 0x7b2e <__pack_f+0x76>
    7b24:	20 e0       	ldi	r18, 0x00	; 0
    7b26:	30 e0       	ldi	r19, 0x00	; 0
    7b28:	40 e0       	ldi	r20, 0x00	; 0
    7b2a:	50 e0       	ldi	r21, 0x00	; 0
    7b2c:	2a c0       	rjmp	.+84     	; 0x7b82 <__pack_f+0xca>
    7b2e:	b8 01       	movw	r22, r16
    7b30:	a7 01       	movw	r20, r14
    7b32:	02 2e       	mov	r0, r18
    7b34:	04 c0       	rjmp	.+8      	; 0x7b3e <__pack_f+0x86>
    7b36:	76 95       	lsr	r23
    7b38:	67 95       	ror	r22
    7b3a:	57 95       	ror	r21
    7b3c:	47 95       	ror	r20
    7b3e:	0a 94       	dec	r0
    7b40:	d2 f7       	brpl	.-12     	; 0x7b36 <__pack_f+0x7e>
    7b42:	81 e0       	ldi	r24, 0x01	; 1
    7b44:	90 e0       	ldi	r25, 0x00	; 0
    7b46:	a0 e0       	ldi	r26, 0x00	; 0
    7b48:	b0 e0       	ldi	r27, 0x00	; 0
    7b4a:	04 c0       	rjmp	.+8      	; 0x7b54 <__pack_f+0x9c>
    7b4c:	88 0f       	add	r24, r24
    7b4e:	99 1f       	adc	r25, r25
    7b50:	aa 1f       	adc	r26, r26
    7b52:	bb 1f       	adc	r27, r27
    7b54:	2a 95       	dec	r18
    7b56:	d2 f7       	brpl	.-12     	; 0x7b4c <__pack_f+0x94>
    7b58:	01 97       	sbiw	r24, 0x01	; 1
    7b5a:	a1 09       	sbc	r26, r1
    7b5c:	b1 09       	sbc	r27, r1
    7b5e:	8e 21       	and	r24, r14
    7b60:	9f 21       	and	r25, r15
    7b62:	a0 23       	and	r26, r16
    7b64:	b1 23       	and	r27, r17
    7b66:	00 97       	sbiw	r24, 0x00	; 0
    7b68:	a1 05       	cpc	r26, r1
    7b6a:	b1 05       	cpc	r27, r1
    7b6c:	21 f0       	breq	.+8      	; 0x7b76 <__pack_f+0xbe>
    7b6e:	81 e0       	ldi	r24, 0x01	; 1
    7b70:	90 e0       	ldi	r25, 0x00	; 0
    7b72:	a0 e0       	ldi	r26, 0x00	; 0
    7b74:	b0 e0       	ldi	r27, 0x00	; 0
    7b76:	9a 01       	movw	r18, r20
    7b78:	ab 01       	movw	r20, r22
    7b7a:	28 2b       	or	r18, r24
    7b7c:	39 2b       	or	r19, r25
    7b7e:	4a 2b       	or	r20, r26
    7b80:	5b 2b       	or	r21, r27
    7b82:	da 01       	movw	r26, r20
    7b84:	c9 01       	movw	r24, r18
    7b86:	8f 77       	andi	r24, 0x7F	; 127
    7b88:	90 70       	andi	r25, 0x00	; 0
    7b8a:	a0 70       	andi	r26, 0x00	; 0
    7b8c:	b0 70       	andi	r27, 0x00	; 0
    7b8e:	80 34       	cpi	r24, 0x40	; 64
    7b90:	91 05       	cpc	r25, r1
    7b92:	a1 05       	cpc	r26, r1
    7b94:	b1 05       	cpc	r27, r1
    7b96:	39 f4       	brne	.+14     	; 0x7ba6 <__pack_f+0xee>
    7b98:	27 ff       	sbrs	r18, 7
    7b9a:	09 c0       	rjmp	.+18     	; 0x7bae <__pack_f+0xf6>
    7b9c:	20 5c       	subi	r18, 0xC0	; 192
    7b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba0:	4f 4f       	sbci	r20, 0xFF	; 255
    7ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    7ba4:	04 c0       	rjmp	.+8      	; 0x7bae <__pack_f+0xf6>
    7ba6:	21 5c       	subi	r18, 0xC1	; 193
    7ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    7baa:	4f 4f       	sbci	r20, 0xFF	; 255
    7bac:	5f 4f       	sbci	r21, 0xFF	; 255
    7bae:	e0 e0       	ldi	r30, 0x00	; 0
    7bb0:	f0 e0       	ldi	r31, 0x00	; 0
    7bb2:	20 30       	cpi	r18, 0x00	; 0
    7bb4:	a0 e0       	ldi	r26, 0x00	; 0
    7bb6:	3a 07       	cpc	r19, r26
    7bb8:	a0 e0       	ldi	r26, 0x00	; 0
    7bba:	4a 07       	cpc	r20, r26
    7bbc:	a0 e4       	ldi	r26, 0x40	; 64
    7bbe:	5a 07       	cpc	r21, r26
    7bc0:	10 f0       	brcs	.+4      	; 0x7bc6 <__pack_f+0x10e>
    7bc2:	e1 e0       	ldi	r30, 0x01	; 1
    7bc4:	f0 e0       	ldi	r31, 0x00	; 0
    7bc6:	79 01       	movw	r14, r18
    7bc8:	8a 01       	movw	r16, r20
    7bca:	27 c0       	rjmp	.+78     	; 0x7c1a <__pack_f+0x162>
    7bcc:	60 38       	cpi	r22, 0x80	; 128
    7bce:	71 05       	cpc	r23, r1
    7bd0:	64 f5       	brge	.+88     	; 0x7c2a <__pack_f+0x172>
    7bd2:	fb 01       	movw	r30, r22
    7bd4:	e1 58       	subi	r30, 0x81	; 129
    7bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    7bd8:	d8 01       	movw	r26, r16
    7bda:	c7 01       	movw	r24, r14
    7bdc:	8f 77       	andi	r24, 0x7F	; 127
    7bde:	90 70       	andi	r25, 0x00	; 0
    7be0:	a0 70       	andi	r26, 0x00	; 0
    7be2:	b0 70       	andi	r27, 0x00	; 0
    7be4:	80 34       	cpi	r24, 0x40	; 64
    7be6:	91 05       	cpc	r25, r1
    7be8:	a1 05       	cpc	r26, r1
    7bea:	b1 05       	cpc	r27, r1
    7bec:	39 f4       	brne	.+14     	; 0x7bfc <__pack_f+0x144>
    7bee:	e7 fe       	sbrs	r14, 7
    7bf0:	0d c0       	rjmp	.+26     	; 0x7c0c <__pack_f+0x154>
    7bf2:	80 e4       	ldi	r24, 0x40	; 64
    7bf4:	90 e0       	ldi	r25, 0x00	; 0
    7bf6:	a0 e0       	ldi	r26, 0x00	; 0
    7bf8:	b0 e0       	ldi	r27, 0x00	; 0
    7bfa:	04 c0       	rjmp	.+8      	; 0x7c04 <__pack_f+0x14c>
    7bfc:	8f e3       	ldi	r24, 0x3F	; 63
    7bfe:	90 e0       	ldi	r25, 0x00	; 0
    7c00:	a0 e0       	ldi	r26, 0x00	; 0
    7c02:	b0 e0       	ldi	r27, 0x00	; 0
    7c04:	e8 0e       	add	r14, r24
    7c06:	f9 1e       	adc	r15, r25
    7c08:	0a 1f       	adc	r16, r26
    7c0a:	1b 1f       	adc	r17, r27
    7c0c:	17 ff       	sbrs	r17, 7
    7c0e:	05 c0       	rjmp	.+10     	; 0x7c1a <__pack_f+0x162>
    7c10:	16 95       	lsr	r17
    7c12:	07 95       	ror	r16
    7c14:	f7 94       	ror	r15
    7c16:	e7 94       	ror	r14
    7c18:	31 96       	adiw	r30, 0x01	; 1
    7c1a:	87 e0       	ldi	r24, 0x07	; 7
    7c1c:	16 95       	lsr	r17
    7c1e:	07 95       	ror	r16
    7c20:	f7 94       	ror	r15
    7c22:	e7 94       	ror	r14
    7c24:	8a 95       	dec	r24
    7c26:	d1 f7       	brne	.-12     	; 0x7c1c <__pack_f+0x164>
    7c28:	05 c0       	rjmp	.+10     	; 0x7c34 <__pack_f+0x17c>
    7c2a:	ee 24       	eor	r14, r14
    7c2c:	ff 24       	eor	r15, r15
    7c2e:	87 01       	movw	r16, r14
    7c30:	ef ef       	ldi	r30, 0xFF	; 255
    7c32:	f0 e0       	ldi	r31, 0x00	; 0
    7c34:	6e 2f       	mov	r22, r30
    7c36:	67 95       	ror	r22
    7c38:	66 27       	eor	r22, r22
    7c3a:	67 95       	ror	r22
    7c3c:	90 2f       	mov	r25, r16
    7c3e:	9f 77       	andi	r25, 0x7F	; 127
    7c40:	d7 94       	ror	r13
    7c42:	dd 24       	eor	r13, r13
    7c44:	d7 94       	ror	r13
    7c46:	8e 2f       	mov	r24, r30
    7c48:	86 95       	lsr	r24
    7c4a:	49 2f       	mov	r20, r25
    7c4c:	46 2b       	or	r20, r22
    7c4e:	58 2f       	mov	r21, r24
    7c50:	5d 29       	or	r21, r13
    7c52:	b7 01       	movw	r22, r14
    7c54:	ca 01       	movw	r24, r20
    7c56:	1f 91       	pop	r17
    7c58:	0f 91       	pop	r16
    7c5a:	ff 90       	pop	r15
    7c5c:	ef 90       	pop	r14
    7c5e:	df 90       	pop	r13
    7c60:	08 95       	ret

00007c62 <__unpack_f>:
    7c62:	fc 01       	movw	r30, r24
    7c64:	db 01       	movw	r26, r22
    7c66:	40 81       	ld	r20, Z
    7c68:	51 81       	ldd	r21, Z+1	; 0x01
    7c6a:	22 81       	ldd	r18, Z+2	; 0x02
    7c6c:	62 2f       	mov	r22, r18
    7c6e:	6f 77       	andi	r22, 0x7F	; 127
    7c70:	70 e0       	ldi	r23, 0x00	; 0
    7c72:	22 1f       	adc	r18, r18
    7c74:	22 27       	eor	r18, r18
    7c76:	22 1f       	adc	r18, r18
    7c78:	93 81       	ldd	r25, Z+3	; 0x03
    7c7a:	89 2f       	mov	r24, r25
    7c7c:	88 0f       	add	r24, r24
    7c7e:	82 2b       	or	r24, r18
    7c80:	28 2f       	mov	r18, r24
    7c82:	30 e0       	ldi	r19, 0x00	; 0
    7c84:	99 1f       	adc	r25, r25
    7c86:	99 27       	eor	r25, r25
    7c88:	99 1f       	adc	r25, r25
    7c8a:	11 96       	adiw	r26, 0x01	; 1
    7c8c:	9c 93       	st	X, r25
    7c8e:	11 97       	sbiw	r26, 0x01	; 1
    7c90:	21 15       	cp	r18, r1
    7c92:	31 05       	cpc	r19, r1
    7c94:	a9 f5       	brne	.+106    	; 0x7d00 <__unpack_f+0x9e>
    7c96:	41 15       	cp	r20, r1
    7c98:	51 05       	cpc	r21, r1
    7c9a:	61 05       	cpc	r22, r1
    7c9c:	71 05       	cpc	r23, r1
    7c9e:	11 f4       	brne	.+4      	; 0x7ca4 <__unpack_f+0x42>
    7ca0:	82 e0       	ldi	r24, 0x02	; 2
    7ca2:	37 c0       	rjmp	.+110    	; 0x7d12 <__unpack_f+0xb0>
    7ca4:	82 e8       	ldi	r24, 0x82	; 130
    7ca6:	9f ef       	ldi	r25, 0xFF	; 255
    7ca8:	13 96       	adiw	r26, 0x03	; 3
    7caa:	9c 93       	st	X, r25
    7cac:	8e 93       	st	-X, r24
    7cae:	12 97       	sbiw	r26, 0x02	; 2
    7cb0:	9a 01       	movw	r18, r20
    7cb2:	ab 01       	movw	r20, r22
    7cb4:	67 e0       	ldi	r22, 0x07	; 7
    7cb6:	22 0f       	add	r18, r18
    7cb8:	33 1f       	adc	r19, r19
    7cba:	44 1f       	adc	r20, r20
    7cbc:	55 1f       	adc	r21, r21
    7cbe:	6a 95       	dec	r22
    7cc0:	d1 f7       	brne	.-12     	; 0x7cb6 <__unpack_f+0x54>
    7cc2:	83 e0       	ldi	r24, 0x03	; 3
    7cc4:	8c 93       	st	X, r24
    7cc6:	0d c0       	rjmp	.+26     	; 0x7ce2 <__unpack_f+0x80>
    7cc8:	22 0f       	add	r18, r18
    7cca:	33 1f       	adc	r19, r19
    7ccc:	44 1f       	adc	r20, r20
    7cce:	55 1f       	adc	r21, r21
    7cd0:	12 96       	adiw	r26, 0x02	; 2
    7cd2:	8d 91       	ld	r24, X+
    7cd4:	9c 91       	ld	r25, X
    7cd6:	13 97       	sbiw	r26, 0x03	; 3
    7cd8:	01 97       	sbiw	r24, 0x01	; 1
    7cda:	13 96       	adiw	r26, 0x03	; 3
    7cdc:	9c 93       	st	X, r25
    7cde:	8e 93       	st	-X, r24
    7ce0:	12 97       	sbiw	r26, 0x02	; 2
    7ce2:	20 30       	cpi	r18, 0x00	; 0
    7ce4:	80 e0       	ldi	r24, 0x00	; 0
    7ce6:	38 07       	cpc	r19, r24
    7ce8:	80 e0       	ldi	r24, 0x00	; 0
    7cea:	48 07       	cpc	r20, r24
    7cec:	80 e4       	ldi	r24, 0x40	; 64
    7cee:	58 07       	cpc	r21, r24
    7cf0:	58 f3       	brcs	.-42     	; 0x7cc8 <__unpack_f+0x66>
    7cf2:	14 96       	adiw	r26, 0x04	; 4
    7cf4:	2d 93       	st	X+, r18
    7cf6:	3d 93       	st	X+, r19
    7cf8:	4d 93       	st	X+, r20
    7cfa:	5c 93       	st	X, r21
    7cfc:	17 97       	sbiw	r26, 0x07	; 7
    7cfe:	08 95       	ret
    7d00:	2f 3f       	cpi	r18, 0xFF	; 255
    7d02:	31 05       	cpc	r19, r1
    7d04:	79 f4       	brne	.+30     	; 0x7d24 <__unpack_f+0xc2>
    7d06:	41 15       	cp	r20, r1
    7d08:	51 05       	cpc	r21, r1
    7d0a:	61 05       	cpc	r22, r1
    7d0c:	71 05       	cpc	r23, r1
    7d0e:	19 f4       	brne	.+6      	; 0x7d16 <__unpack_f+0xb4>
    7d10:	84 e0       	ldi	r24, 0x04	; 4
    7d12:	8c 93       	st	X, r24
    7d14:	08 95       	ret
    7d16:	64 ff       	sbrs	r22, 4
    7d18:	03 c0       	rjmp	.+6      	; 0x7d20 <__unpack_f+0xbe>
    7d1a:	81 e0       	ldi	r24, 0x01	; 1
    7d1c:	8c 93       	st	X, r24
    7d1e:	12 c0       	rjmp	.+36     	; 0x7d44 <__unpack_f+0xe2>
    7d20:	1c 92       	st	X, r1
    7d22:	10 c0       	rjmp	.+32     	; 0x7d44 <__unpack_f+0xe2>
    7d24:	2f 57       	subi	r18, 0x7F	; 127
    7d26:	30 40       	sbci	r19, 0x00	; 0
    7d28:	13 96       	adiw	r26, 0x03	; 3
    7d2a:	3c 93       	st	X, r19
    7d2c:	2e 93       	st	-X, r18
    7d2e:	12 97       	sbiw	r26, 0x02	; 2
    7d30:	83 e0       	ldi	r24, 0x03	; 3
    7d32:	8c 93       	st	X, r24
    7d34:	87 e0       	ldi	r24, 0x07	; 7
    7d36:	44 0f       	add	r20, r20
    7d38:	55 1f       	adc	r21, r21
    7d3a:	66 1f       	adc	r22, r22
    7d3c:	77 1f       	adc	r23, r23
    7d3e:	8a 95       	dec	r24
    7d40:	d1 f7       	brne	.-12     	; 0x7d36 <__unpack_f+0xd4>
    7d42:	70 64       	ori	r23, 0x40	; 64
    7d44:	14 96       	adiw	r26, 0x04	; 4
    7d46:	4d 93       	st	X+, r20
    7d48:	5d 93       	st	X+, r21
    7d4a:	6d 93       	st	X+, r22
    7d4c:	7c 93       	st	X, r23
    7d4e:	17 97       	sbiw	r26, 0x07	; 7
    7d50:	08 95       	ret

00007d52 <__fpcmp_parts_f>:
    7d52:	1f 93       	push	r17
    7d54:	dc 01       	movw	r26, r24
    7d56:	fb 01       	movw	r30, r22
    7d58:	9c 91       	ld	r25, X
    7d5a:	92 30       	cpi	r25, 0x02	; 2
    7d5c:	08 f4       	brcc	.+2      	; 0x7d60 <__fpcmp_parts_f+0xe>
    7d5e:	47 c0       	rjmp	.+142    	; 0x7dee <__fpcmp_parts_f+0x9c>
    7d60:	80 81       	ld	r24, Z
    7d62:	82 30       	cpi	r24, 0x02	; 2
    7d64:	08 f4       	brcc	.+2      	; 0x7d68 <__fpcmp_parts_f+0x16>
    7d66:	43 c0       	rjmp	.+134    	; 0x7dee <__fpcmp_parts_f+0x9c>
    7d68:	94 30       	cpi	r25, 0x04	; 4
    7d6a:	51 f4       	brne	.+20     	; 0x7d80 <__fpcmp_parts_f+0x2e>
    7d6c:	11 96       	adiw	r26, 0x01	; 1
    7d6e:	1c 91       	ld	r17, X
    7d70:	84 30       	cpi	r24, 0x04	; 4
    7d72:	99 f5       	brne	.+102    	; 0x7dda <__fpcmp_parts_f+0x88>
    7d74:	81 81       	ldd	r24, Z+1	; 0x01
    7d76:	68 2f       	mov	r22, r24
    7d78:	70 e0       	ldi	r23, 0x00	; 0
    7d7a:	61 1b       	sub	r22, r17
    7d7c:	71 09       	sbc	r23, r1
    7d7e:	3f c0       	rjmp	.+126    	; 0x7dfe <__fpcmp_parts_f+0xac>
    7d80:	84 30       	cpi	r24, 0x04	; 4
    7d82:	21 f0       	breq	.+8      	; 0x7d8c <__fpcmp_parts_f+0x3a>
    7d84:	92 30       	cpi	r25, 0x02	; 2
    7d86:	31 f4       	brne	.+12     	; 0x7d94 <__fpcmp_parts_f+0x42>
    7d88:	82 30       	cpi	r24, 0x02	; 2
    7d8a:	b9 f1       	breq	.+110    	; 0x7dfa <__fpcmp_parts_f+0xa8>
    7d8c:	81 81       	ldd	r24, Z+1	; 0x01
    7d8e:	88 23       	and	r24, r24
    7d90:	89 f1       	breq	.+98     	; 0x7df4 <__fpcmp_parts_f+0xa2>
    7d92:	2d c0       	rjmp	.+90     	; 0x7dee <__fpcmp_parts_f+0x9c>
    7d94:	11 96       	adiw	r26, 0x01	; 1
    7d96:	1c 91       	ld	r17, X
    7d98:	11 97       	sbiw	r26, 0x01	; 1
    7d9a:	82 30       	cpi	r24, 0x02	; 2
    7d9c:	f1 f0       	breq	.+60     	; 0x7dda <__fpcmp_parts_f+0x88>
    7d9e:	81 81       	ldd	r24, Z+1	; 0x01
    7da0:	18 17       	cp	r17, r24
    7da2:	d9 f4       	brne	.+54     	; 0x7dda <__fpcmp_parts_f+0x88>
    7da4:	12 96       	adiw	r26, 0x02	; 2
    7da6:	2d 91       	ld	r18, X+
    7da8:	3c 91       	ld	r19, X
    7daa:	13 97       	sbiw	r26, 0x03	; 3
    7dac:	82 81       	ldd	r24, Z+2	; 0x02
    7dae:	93 81       	ldd	r25, Z+3	; 0x03
    7db0:	82 17       	cp	r24, r18
    7db2:	93 07       	cpc	r25, r19
    7db4:	94 f0       	brlt	.+36     	; 0x7dda <__fpcmp_parts_f+0x88>
    7db6:	28 17       	cp	r18, r24
    7db8:	39 07       	cpc	r19, r25
    7dba:	bc f0       	brlt	.+46     	; 0x7dea <__fpcmp_parts_f+0x98>
    7dbc:	14 96       	adiw	r26, 0x04	; 4
    7dbe:	8d 91       	ld	r24, X+
    7dc0:	9d 91       	ld	r25, X+
    7dc2:	0d 90       	ld	r0, X+
    7dc4:	bc 91       	ld	r27, X
    7dc6:	a0 2d       	mov	r26, r0
    7dc8:	24 81       	ldd	r18, Z+4	; 0x04
    7dca:	35 81       	ldd	r19, Z+5	; 0x05
    7dcc:	46 81       	ldd	r20, Z+6	; 0x06
    7dce:	57 81       	ldd	r21, Z+7	; 0x07
    7dd0:	28 17       	cp	r18, r24
    7dd2:	39 07       	cpc	r19, r25
    7dd4:	4a 07       	cpc	r20, r26
    7dd6:	5b 07       	cpc	r21, r27
    7dd8:	18 f4       	brcc	.+6      	; 0x7de0 <__fpcmp_parts_f+0x8e>
    7dda:	11 23       	and	r17, r17
    7ddc:	41 f0       	breq	.+16     	; 0x7dee <__fpcmp_parts_f+0x9c>
    7dde:	0a c0       	rjmp	.+20     	; 0x7df4 <__fpcmp_parts_f+0xa2>
    7de0:	82 17       	cp	r24, r18
    7de2:	93 07       	cpc	r25, r19
    7de4:	a4 07       	cpc	r26, r20
    7de6:	b5 07       	cpc	r27, r21
    7de8:	40 f4       	brcc	.+16     	; 0x7dfa <__fpcmp_parts_f+0xa8>
    7dea:	11 23       	and	r17, r17
    7dec:	19 f0       	breq	.+6      	; 0x7df4 <__fpcmp_parts_f+0xa2>
    7dee:	61 e0       	ldi	r22, 0x01	; 1
    7df0:	70 e0       	ldi	r23, 0x00	; 0
    7df2:	05 c0       	rjmp	.+10     	; 0x7dfe <__fpcmp_parts_f+0xac>
    7df4:	6f ef       	ldi	r22, 0xFF	; 255
    7df6:	7f ef       	ldi	r23, 0xFF	; 255
    7df8:	02 c0       	rjmp	.+4      	; 0x7dfe <__fpcmp_parts_f+0xac>
    7dfa:	60 e0       	ldi	r22, 0x00	; 0
    7dfc:	70 e0       	ldi	r23, 0x00	; 0
    7dfe:	cb 01       	movw	r24, r22
    7e00:	1f 91       	pop	r17
    7e02:	08 95       	ret

00007e04 <malloc>:
    7e04:	cf 93       	push	r28
    7e06:	df 93       	push	r29
    7e08:	bc 01       	movw	r22, r24
    7e0a:	82 30       	cpi	r24, 0x02	; 2
    7e0c:	91 05       	cpc	r25, r1
    7e0e:	10 f4       	brcc	.+4      	; 0x7e14 <malloc+0x10>
    7e10:	62 e0       	ldi	r22, 0x02	; 2
    7e12:	70 e0       	ldi	r23, 0x00	; 0
    7e14:	a0 91 92 07 	lds	r26, 0x0792
    7e18:	b0 91 93 07 	lds	r27, 0x0793
    7e1c:	ed 01       	movw	r28, r26
    7e1e:	e0 e0       	ldi	r30, 0x00	; 0
    7e20:	f0 e0       	ldi	r31, 0x00	; 0
    7e22:	40 e0       	ldi	r20, 0x00	; 0
    7e24:	50 e0       	ldi	r21, 0x00	; 0
    7e26:	21 c0       	rjmp	.+66     	; 0x7e6a <malloc+0x66>
    7e28:	88 81       	ld	r24, Y
    7e2a:	99 81       	ldd	r25, Y+1	; 0x01
    7e2c:	86 17       	cp	r24, r22
    7e2e:	97 07       	cpc	r25, r23
    7e30:	69 f4       	brne	.+26     	; 0x7e4c <malloc+0x48>
    7e32:	8a 81       	ldd	r24, Y+2	; 0x02
    7e34:	9b 81       	ldd	r25, Y+3	; 0x03
    7e36:	30 97       	sbiw	r30, 0x00	; 0
    7e38:	19 f0       	breq	.+6      	; 0x7e40 <malloc+0x3c>
    7e3a:	93 83       	std	Z+3, r25	; 0x03
    7e3c:	82 83       	std	Z+2, r24	; 0x02
    7e3e:	04 c0       	rjmp	.+8      	; 0x7e48 <malloc+0x44>
    7e40:	90 93 93 07 	sts	0x0793, r25
    7e44:	80 93 92 07 	sts	0x0792, r24
    7e48:	fe 01       	movw	r30, r28
    7e4a:	34 c0       	rjmp	.+104    	; 0x7eb4 <malloc+0xb0>
    7e4c:	68 17       	cp	r22, r24
    7e4e:	79 07       	cpc	r23, r25
    7e50:	38 f4       	brcc	.+14     	; 0x7e60 <malloc+0x5c>
    7e52:	41 15       	cp	r20, r1
    7e54:	51 05       	cpc	r21, r1
    7e56:	19 f0       	breq	.+6      	; 0x7e5e <malloc+0x5a>
    7e58:	84 17       	cp	r24, r20
    7e5a:	95 07       	cpc	r25, r21
    7e5c:	08 f4       	brcc	.+2      	; 0x7e60 <malloc+0x5c>
    7e5e:	ac 01       	movw	r20, r24
    7e60:	fe 01       	movw	r30, r28
    7e62:	8a 81       	ldd	r24, Y+2	; 0x02
    7e64:	9b 81       	ldd	r25, Y+3	; 0x03
    7e66:	9c 01       	movw	r18, r24
    7e68:	e9 01       	movw	r28, r18
    7e6a:	20 97       	sbiw	r28, 0x00	; 0
    7e6c:	e9 f6       	brne	.-70     	; 0x7e28 <malloc+0x24>
    7e6e:	41 15       	cp	r20, r1
    7e70:	51 05       	cpc	r21, r1
    7e72:	a9 f1       	breq	.+106    	; 0x7ede <malloc+0xda>
    7e74:	ca 01       	movw	r24, r20
    7e76:	86 1b       	sub	r24, r22
    7e78:	97 0b       	sbc	r25, r23
    7e7a:	04 97       	sbiw	r24, 0x04	; 4
    7e7c:	08 f4       	brcc	.+2      	; 0x7e80 <malloc+0x7c>
    7e7e:	ba 01       	movw	r22, r20
    7e80:	e0 e0       	ldi	r30, 0x00	; 0
    7e82:	f0 e0       	ldi	r31, 0x00	; 0
    7e84:	2a c0       	rjmp	.+84     	; 0x7eda <malloc+0xd6>
    7e86:	8d 91       	ld	r24, X+
    7e88:	9c 91       	ld	r25, X
    7e8a:	11 97       	sbiw	r26, 0x01	; 1
    7e8c:	84 17       	cp	r24, r20
    7e8e:	95 07       	cpc	r25, r21
    7e90:	f9 f4       	brne	.+62     	; 0x7ed0 <malloc+0xcc>
    7e92:	64 17       	cp	r22, r20
    7e94:	75 07       	cpc	r23, r21
    7e96:	81 f4       	brne	.+32     	; 0x7eb8 <malloc+0xb4>
    7e98:	12 96       	adiw	r26, 0x02	; 2
    7e9a:	8d 91       	ld	r24, X+
    7e9c:	9c 91       	ld	r25, X
    7e9e:	13 97       	sbiw	r26, 0x03	; 3
    7ea0:	30 97       	sbiw	r30, 0x00	; 0
    7ea2:	19 f0       	breq	.+6      	; 0x7eaa <malloc+0xa6>
    7ea4:	93 83       	std	Z+3, r25	; 0x03
    7ea6:	82 83       	std	Z+2, r24	; 0x02
    7ea8:	04 c0       	rjmp	.+8      	; 0x7eb2 <malloc+0xae>
    7eaa:	90 93 93 07 	sts	0x0793, r25
    7eae:	80 93 92 07 	sts	0x0792, r24
    7eb2:	fd 01       	movw	r30, r26
    7eb4:	32 96       	adiw	r30, 0x02	; 2
    7eb6:	4f c0       	rjmp	.+158    	; 0x7f56 <malloc+0x152>
    7eb8:	ca 01       	movw	r24, r20
    7eba:	86 1b       	sub	r24, r22
    7ebc:	97 0b       	sbc	r25, r23
    7ebe:	fd 01       	movw	r30, r26
    7ec0:	e8 0f       	add	r30, r24
    7ec2:	f9 1f       	adc	r31, r25
    7ec4:	61 93       	st	Z+, r22
    7ec6:	71 93       	st	Z+, r23
    7ec8:	02 97       	sbiw	r24, 0x02	; 2
    7eca:	8d 93       	st	X+, r24
    7ecc:	9c 93       	st	X, r25
    7ece:	43 c0       	rjmp	.+134    	; 0x7f56 <malloc+0x152>
    7ed0:	fd 01       	movw	r30, r26
    7ed2:	82 81       	ldd	r24, Z+2	; 0x02
    7ed4:	93 81       	ldd	r25, Z+3	; 0x03
    7ed6:	9c 01       	movw	r18, r24
    7ed8:	d9 01       	movw	r26, r18
    7eda:	10 97       	sbiw	r26, 0x00	; 0
    7edc:	a1 f6       	brne	.-88     	; 0x7e86 <malloc+0x82>
    7ede:	80 91 90 07 	lds	r24, 0x0790
    7ee2:	90 91 91 07 	lds	r25, 0x0791
    7ee6:	89 2b       	or	r24, r25
    7ee8:	41 f4       	brne	.+16     	; 0x7efa <malloc+0xf6>
    7eea:	80 91 11 03 	lds	r24, 0x0311
    7eee:	90 91 12 03 	lds	r25, 0x0312
    7ef2:	90 93 91 07 	sts	0x0791, r25
    7ef6:	80 93 90 07 	sts	0x0790, r24
    7efa:	40 91 13 03 	lds	r20, 0x0313
    7efe:	50 91 14 03 	lds	r21, 0x0314
    7f02:	41 15       	cp	r20, r1
    7f04:	51 05       	cpc	r21, r1
    7f06:	41 f4       	brne	.+16     	; 0x7f18 <malloc+0x114>
    7f08:	4d b7       	in	r20, 0x3d	; 61
    7f0a:	5e b7       	in	r21, 0x3e	; 62
    7f0c:	80 91 0f 03 	lds	r24, 0x030F
    7f10:	90 91 10 03 	lds	r25, 0x0310
    7f14:	48 1b       	sub	r20, r24
    7f16:	59 0b       	sbc	r21, r25
    7f18:	20 91 90 07 	lds	r18, 0x0790
    7f1c:	30 91 91 07 	lds	r19, 0x0791
    7f20:	24 17       	cp	r18, r20
    7f22:	35 07       	cpc	r19, r21
    7f24:	b0 f4       	brcc	.+44     	; 0x7f52 <malloc+0x14e>
    7f26:	ca 01       	movw	r24, r20
    7f28:	82 1b       	sub	r24, r18
    7f2a:	93 0b       	sbc	r25, r19
    7f2c:	86 17       	cp	r24, r22
    7f2e:	97 07       	cpc	r25, r23
    7f30:	80 f0       	brcs	.+32     	; 0x7f52 <malloc+0x14e>
    7f32:	ab 01       	movw	r20, r22
    7f34:	4e 5f       	subi	r20, 0xFE	; 254
    7f36:	5f 4f       	sbci	r21, 0xFF	; 255
    7f38:	84 17       	cp	r24, r20
    7f3a:	95 07       	cpc	r25, r21
    7f3c:	50 f0       	brcs	.+20     	; 0x7f52 <malloc+0x14e>
    7f3e:	42 0f       	add	r20, r18
    7f40:	53 1f       	adc	r21, r19
    7f42:	50 93 91 07 	sts	0x0791, r21
    7f46:	40 93 90 07 	sts	0x0790, r20
    7f4a:	f9 01       	movw	r30, r18
    7f4c:	61 93       	st	Z+, r22
    7f4e:	71 93       	st	Z+, r23
    7f50:	02 c0       	rjmp	.+4      	; 0x7f56 <malloc+0x152>
    7f52:	e0 e0       	ldi	r30, 0x00	; 0
    7f54:	f0 e0       	ldi	r31, 0x00	; 0
    7f56:	cf 01       	movw	r24, r30
    7f58:	df 91       	pop	r29
    7f5a:	cf 91       	pop	r28
    7f5c:	08 95       	ret

00007f5e <free>:
    7f5e:	cf 93       	push	r28
    7f60:	df 93       	push	r29
    7f62:	00 97       	sbiw	r24, 0x00	; 0
    7f64:	09 f4       	brne	.+2      	; 0x7f68 <free+0xa>
    7f66:	50 c0       	rjmp	.+160    	; 0x8008 <free+0xaa>
    7f68:	ec 01       	movw	r28, r24
    7f6a:	22 97       	sbiw	r28, 0x02	; 2
    7f6c:	1b 82       	std	Y+3, r1	; 0x03
    7f6e:	1a 82       	std	Y+2, r1	; 0x02
    7f70:	a0 91 92 07 	lds	r26, 0x0792
    7f74:	b0 91 93 07 	lds	r27, 0x0793
    7f78:	10 97       	sbiw	r26, 0x00	; 0
    7f7a:	09 f1       	breq	.+66     	; 0x7fbe <free+0x60>
    7f7c:	40 e0       	ldi	r20, 0x00	; 0
    7f7e:	50 e0       	ldi	r21, 0x00	; 0
    7f80:	ac 17       	cp	r26, r28
    7f82:	bd 07       	cpc	r27, r29
    7f84:	08 f1       	brcs	.+66     	; 0x7fc8 <free+0x6a>
    7f86:	bb 83       	std	Y+3, r27	; 0x03
    7f88:	aa 83       	std	Y+2, r26	; 0x02
    7f8a:	fe 01       	movw	r30, r28
    7f8c:	21 91       	ld	r18, Z+
    7f8e:	31 91       	ld	r19, Z+
    7f90:	e2 0f       	add	r30, r18
    7f92:	f3 1f       	adc	r31, r19
    7f94:	ae 17       	cp	r26, r30
    7f96:	bf 07       	cpc	r27, r31
    7f98:	79 f4       	brne	.+30     	; 0x7fb8 <free+0x5a>
    7f9a:	8d 91       	ld	r24, X+
    7f9c:	9c 91       	ld	r25, X
    7f9e:	11 97       	sbiw	r26, 0x01	; 1
    7fa0:	28 0f       	add	r18, r24
    7fa2:	39 1f       	adc	r19, r25
    7fa4:	2e 5f       	subi	r18, 0xFE	; 254
    7fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa8:	39 83       	std	Y+1, r19	; 0x01
    7faa:	28 83       	st	Y, r18
    7fac:	12 96       	adiw	r26, 0x02	; 2
    7fae:	8d 91       	ld	r24, X+
    7fb0:	9c 91       	ld	r25, X
    7fb2:	13 97       	sbiw	r26, 0x03	; 3
    7fb4:	9b 83       	std	Y+3, r25	; 0x03
    7fb6:	8a 83       	std	Y+2, r24	; 0x02
    7fb8:	41 15       	cp	r20, r1
    7fba:	51 05       	cpc	r21, r1
    7fbc:	71 f4       	brne	.+28     	; 0x7fda <free+0x7c>
    7fbe:	d0 93 93 07 	sts	0x0793, r29
    7fc2:	c0 93 92 07 	sts	0x0792, r28
    7fc6:	20 c0       	rjmp	.+64     	; 0x8008 <free+0xaa>
    7fc8:	12 96       	adiw	r26, 0x02	; 2
    7fca:	8d 91       	ld	r24, X+
    7fcc:	9c 91       	ld	r25, X
    7fce:	13 97       	sbiw	r26, 0x03	; 3
    7fd0:	ad 01       	movw	r20, r26
    7fd2:	00 97       	sbiw	r24, 0x00	; 0
    7fd4:	11 f0       	breq	.+4      	; 0x7fda <free+0x7c>
    7fd6:	dc 01       	movw	r26, r24
    7fd8:	d3 cf       	rjmp	.-90     	; 0x7f80 <free+0x22>
    7fda:	fa 01       	movw	r30, r20
    7fdc:	d3 83       	std	Z+3, r29	; 0x03
    7fde:	c2 83       	std	Z+2, r28	; 0x02
    7fe0:	21 91       	ld	r18, Z+
    7fe2:	31 91       	ld	r19, Z+
    7fe4:	e2 0f       	add	r30, r18
    7fe6:	f3 1f       	adc	r31, r19
    7fe8:	ce 17       	cp	r28, r30
    7fea:	df 07       	cpc	r29, r31
    7fec:	69 f4       	brne	.+26     	; 0x8008 <free+0xaa>
    7fee:	88 81       	ld	r24, Y
    7ff0:	99 81       	ldd	r25, Y+1	; 0x01
    7ff2:	28 0f       	add	r18, r24
    7ff4:	39 1f       	adc	r19, r25
    7ff6:	2e 5f       	subi	r18, 0xFE	; 254
    7ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    7ffa:	fa 01       	movw	r30, r20
    7ffc:	31 83       	std	Z+1, r19	; 0x01
    7ffe:	20 83       	st	Z, r18
    8000:	8a 81       	ldd	r24, Y+2	; 0x02
    8002:	9b 81       	ldd	r25, Y+3	; 0x03
    8004:	93 83       	std	Z+3, r25	; 0x03
    8006:	82 83       	std	Z+2, r24	; 0x02
    8008:	df 91       	pop	r29
    800a:	cf 91       	pop	r28
    800c:	08 95       	ret

0000800e <atoi>:
    800e:	fc 01       	movw	r30, r24
    8010:	88 27       	eor	r24, r24
    8012:	99 27       	eor	r25, r25
    8014:	e8 94       	clt
    8016:	21 91       	ld	r18, Z+
    8018:	20 32       	cpi	r18, 0x20	; 32
    801a:	e9 f3       	breq	.-6      	; 0x8016 <atoi+0x8>
    801c:	29 30       	cpi	r18, 0x09	; 9
    801e:	10 f0       	brcs	.+4      	; 0x8024 <atoi+0x16>
    8020:	2e 30       	cpi	r18, 0x0E	; 14
    8022:	c8 f3       	brcs	.-14     	; 0x8016 <atoi+0x8>
    8024:	2b 32       	cpi	r18, 0x2B	; 43
    8026:	41 f0       	breq	.+16     	; 0x8038 <atoi+0x2a>
    8028:	2d 32       	cpi	r18, 0x2D	; 45
    802a:	39 f4       	brne	.+14     	; 0x803a <atoi+0x2c>
    802c:	68 94       	set
    802e:	04 c0       	rjmp	.+8      	; 0x8038 <atoi+0x2a>
    8030:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__mulhi_const_10>
    8034:	82 0f       	add	r24, r18
    8036:	91 1d       	adc	r25, r1
    8038:	21 91       	ld	r18, Z+
    803a:	20 53       	subi	r18, 0x30	; 48
    803c:	2a 30       	cpi	r18, 0x0A	; 10
    803e:	c0 f3       	brcs	.-16     	; 0x8030 <atoi+0x22>
    8040:	1e f4       	brtc	.+6      	; 0x8048 <atoi+0x3a>
    8042:	90 95       	com	r25
    8044:	81 95       	neg	r24
    8046:	9f 4f       	sbci	r25, 0xFF	; 255
    8048:	08 95       	ret

0000804a <strtok>:
    804a:	40 e3       	ldi	r20, 0x30	; 48
    804c:	53 e0       	ldi	r21, 0x03	; 3
    804e:	0e 94 3a 40 	call	0x8074	; 0x8074 <strtok_r>
    8052:	08 95       	ret

00008054 <strcpy>:
    8054:	fb 01       	movw	r30, r22
    8056:	dc 01       	movw	r26, r24
    8058:	01 90       	ld	r0, Z+
    805a:	0d 92       	st	X+, r0
    805c:	00 20       	and	r0, r0
    805e:	e1 f7       	brne	.-8      	; 0x8058 <strcpy+0x4>
    8060:	08 95       	ret

00008062 <strlen>:
    8062:	fc 01       	movw	r30, r24
    8064:	01 90       	ld	r0, Z+
    8066:	00 20       	and	r0, r0
    8068:	e9 f7       	brne	.-6      	; 0x8064 <strlen+0x2>
    806a:	80 95       	com	r24
    806c:	90 95       	com	r25
    806e:	8e 0f       	add	r24, r30
    8070:	9f 1f       	adc	r25, r31
    8072:	08 95       	ret

00008074 <strtok_r>:
    8074:	00 97       	sbiw	r24, 0x00	; 0
    8076:	31 f4       	brne	.+12     	; 0x8084 <strtok_r+0x10>
    8078:	da 01       	movw	r26, r20
    807a:	8d 91       	ld	r24, X+
    807c:	9c 91       	ld	r25, X
    807e:	00 97       	sbiw	r24, 0x00	; 0
    8080:	09 f4       	brne	.+2      	; 0x8084 <strtok_r+0x10>
    8082:	0e c0       	rjmp	.+28     	; 0x80a0 <strtok_r+0x2c>
    8084:	dc 01       	movw	r26, r24
    8086:	fb 01       	movw	r30, r22
    8088:	3d 91       	ld	r19, X+
    808a:	21 91       	ld	r18, Z+
    808c:	22 23       	and	r18, r18
    808e:	19 f0       	breq	.+6      	; 0x8096 <strtok_r+0x22>
    8090:	32 17       	cp	r19, r18
    8092:	c9 f3       	breq	.-14     	; 0x8086 <strtok_r+0x12>
    8094:	fa cf       	rjmp	.-12     	; 0x808a <strtok_r+0x16>
    8096:	33 23       	and	r19, r19
    8098:	31 f4       	brne	.+12     	; 0x80a6 <strtok_r+0x32>
    809a:	da 01       	movw	r26, r20
    809c:	1d 92       	st	X+, r1
    809e:	1c 92       	st	X, r1
    80a0:	88 27       	eor	r24, r24
    80a2:	99 27       	eor	r25, r25
    80a4:	08 95       	ret
    80a6:	11 97       	sbiw	r26, 0x01	; 1
    80a8:	af 93       	push	r26
    80aa:	bf 93       	push	r27
    80ac:	fb 01       	movw	r30, r22
    80ae:	3d 91       	ld	r19, X+
    80b0:	21 91       	ld	r18, Z+
    80b2:	32 17       	cp	r19, r18
    80b4:	71 f4       	brne	.+28     	; 0x80d2 <strtok_r+0x5e>
    80b6:	33 23       	and	r19, r19
    80b8:	21 f4       	brne	.+8      	; 0x80c2 <strtok_r+0x4e>
    80ba:	88 27       	eor	r24, r24
    80bc:	99 27       	eor	r25, r25
    80be:	11 97       	sbiw	r26, 0x01	; 1
    80c0:	02 c0       	rjmp	.+4      	; 0x80c6 <strtok_r+0x52>
    80c2:	1e 92       	st	-X, r1
    80c4:	11 96       	adiw	r26, 0x01	; 1
    80c6:	fa 01       	movw	r30, r20
    80c8:	a1 93       	st	Z+, r26
    80ca:	b0 83       	st	Z, r27
    80cc:	9f 91       	pop	r25
    80ce:	8f 91       	pop	r24
    80d0:	08 95       	ret
    80d2:	22 23       	and	r18, r18
    80d4:	69 f7       	brne	.-38     	; 0x80b0 <strtok_r+0x3c>
    80d6:	ea cf       	rjmp	.-44     	; 0x80ac <strtok_r+0x38>

000080d8 <__mulhi_const_10>:
    80d8:	7a e0       	ldi	r23, 0x0A	; 10
    80da:	97 9f       	mul	r25, r23
    80dc:	90 2d       	mov	r25, r0
    80de:	87 9f       	mul	r24, r23
    80e0:	80 2d       	mov	r24, r0
    80e2:	91 0d       	add	r25, r1
    80e4:	11 24       	eor	r1, r1
    80e6:	08 95       	ret

000080e8 <__udivmodhi4>:
    80e8:	aa 1b       	sub	r26, r26
    80ea:	bb 1b       	sub	r27, r27
    80ec:	51 e1       	ldi	r21, 0x11	; 17
    80ee:	07 c0       	rjmp	.+14     	; 0x80fe <__udivmodhi4_ep>

000080f0 <__udivmodhi4_loop>:
    80f0:	aa 1f       	adc	r26, r26
    80f2:	bb 1f       	adc	r27, r27
    80f4:	a6 17       	cp	r26, r22
    80f6:	b7 07       	cpc	r27, r23
    80f8:	10 f0       	brcs	.+4      	; 0x80fe <__udivmodhi4_ep>
    80fa:	a6 1b       	sub	r26, r22
    80fc:	b7 0b       	sbc	r27, r23

000080fe <__udivmodhi4_ep>:
    80fe:	88 1f       	adc	r24, r24
    8100:	99 1f       	adc	r25, r25
    8102:	5a 95       	dec	r21
    8104:	a9 f7       	brne	.-22     	; 0x80f0 <__udivmodhi4_loop>
    8106:	80 95       	com	r24
    8108:	90 95       	com	r25
    810a:	bc 01       	movw	r22, r24
    810c:	cd 01       	movw	r24, r26
    810e:	08 95       	ret

00008110 <__divmodhi4>:
    8110:	97 fb       	bst	r25, 7
    8112:	09 2e       	mov	r0, r25
    8114:	07 26       	eor	r0, r23
    8116:	0a d0       	rcall	.+20     	; 0x812c <__divmodhi4_neg1>
    8118:	77 fd       	sbrc	r23, 7
    811a:	04 d0       	rcall	.+8      	; 0x8124 <__divmodhi4_neg2>
    811c:	e5 df       	rcall	.-54     	; 0x80e8 <__udivmodhi4>
    811e:	06 d0       	rcall	.+12     	; 0x812c <__divmodhi4_neg1>
    8120:	00 20       	and	r0, r0
    8122:	1a f4       	brpl	.+6      	; 0x812a <__divmodhi4_exit>

00008124 <__divmodhi4_neg2>:
    8124:	70 95       	com	r23
    8126:	61 95       	neg	r22
    8128:	7f 4f       	sbci	r23, 0xFF	; 255

0000812a <__divmodhi4_exit>:
    812a:	08 95       	ret

0000812c <__divmodhi4_neg1>:
    812c:	f6 f7       	brtc	.-4      	; 0x812a <__divmodhi4_exit>
    812e:	90 95       	com	r25
    8130:	81 95       	neg	r24
    8132:	9f 4f       	sbci	r25, 0xFF	; 255
    8134:	08 95       	ret

00008136 <__prologue_saves__>:
    8136:	2f 92       	push	r2
    8138:	3f 92       	push	r3
    813a:	4f 92       	push	r4
    813c:	5f 92       	push	r5
    813e:	6f 92       	push	r6
    8140:	7f 92       	push	r7
    8142:	8f 92       	push	r8
    8144:	9f 92       	push	r9
    8146:	af 92       	push	r10
    8148:	bf 92       	push	r11
    814a:	cf 92       	push	r12
    814c:	df 92       	push	r13
    814e:	ef 92       	push	r14
    8150:	ff 92       	push	r15
    8152:	0f 93       	push	r16
    8154:	1f 93       	push	r17
    8156:	cf 93       	push	r28
    8158:	df 93       	push	r29
    815a:	cd b7       	in	r28, 0x3d	; 61
    815c:	de b7       	in	r29, 0x3e	; 62
    815e:	ca 1b       	sub	r28, r26
    8160:	db 0b       	sbc	r29, r27
    8162:	0f b6       	in	r0, 0x3f	; 63
    8164:	f8 94       	cli
    8166:	de bf       	out	0x3e, r29	; 62
    8168:	0f be       	out	0x3f, r0	; 63
    816a:	cd bf       	out	0x3d, r28	; 61
    816c:	19 94       	eijmp

0000816e <__epilogue_restores__>:
    816e:	2a 88       	ldd	r2, Y+18	; 0x12
    8170:	39 88       	ldd	r3, Y+17	; 0x11
    8172:	48 88       	ldd	r4, Y+16	; 0x10
    8174:	5f 84       	ldd	r5, Y+15	; 0x0f
    8176:	6e 84       	ldd	r6, Y+14	; 0x0e
    8178:	7d 84       	ldd	r7, Y+13	; 0x0d
    817a:	8c 84       	ldd	r8, Y+12	; 0x0c
    817c:	9b 84       	ldd	r9, Y+11	; 0x0b
    817e:	aa 84       	ldd	r10, Y+10	; 0x0a
    8180:	b9 84       	ldd	r11, Y+9	; 0x09
    8182:	c8 84       	ldd	r12, Y+8	; 0x08
    8184:	df 80       	ldd	r13, Y+7	; 0x07
    8186:	ee 80       	ldd	r14, Y+6	; 0x06
    8188:	fd 80       	ldd	r15, Y+5	; 0x05
    818a:	0c 81       	ldd	r16, Y+4	; 0x04
    818c:	1b 81       	ldd	r17, Y+3	; 0x03
    818e:	aa 81       	ldd	r26, Y+2	; 0x02
    8190:	b9 81       	ldd	r27, Y+1	; 0x01
    8192:	ce 0f       	add	r28, r30
    8194:	d1 1d       	adc	r29, r1
    8196:	0f b6       	in	r0, 0x3f	; 63
    8198:	f8 94       	cli
    819a:	de bf       	out	0x3e, r29	; 62
    819c:	0f be       	out	0x3f, r0	; 63
    819e:	cd bf       	out	0x3d, r28	; 61
    81a0:	ed 01       	movw	r28, r26
    81a2:	08 95       	ret

000081a4 <_exit>:
    81a4:	f8 94       	cli

000081a6 <__stop_program>:
    81a6:	ff cf       	rjmp	.-2      	; 0x81a6 <__stop_program>
